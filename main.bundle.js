!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!x[e])return;for(var n in x[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(g[n]=t[n]);0==--v&&0===y&&_()}(e,n),t&&t(e,n)};var n,r=!0,i="50ee3728b4a7d356e19a",o=1e4,a={},s=[],c=[];function u(e){var t=E[e];if(!t)return C;var r=function(r){return t.hot.active?(E[r]?-1===E[r].parents.indexOf(e)&&E[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),C(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return C[e]},set:function(t){C[e]=t}}};for(var o in C)Object.prototype.hasOwnProperty.call(C,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===f&&p("prepare"),y++,C.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===f&&(b[e]||S(e),0===y&&0===v&&_())}},r.t=function(e,t){return 1&t&&(e=r(e)),C.t(e,-2&t)},r}function l(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:A,apply:O,status:function(e){if(!e)return f;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:a[e]};return n=void 0,t}var d=[],f="idle";function p(e){f=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var h,g,m,v=0,y=0,b={},x={},w={};function k(e){return+e+""===e?+e:e}function A(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=C.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;x={},b={},w=e.c,m=e.h,p("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});g={};return S(0),"prepare"===f&&0===y&&0===v&&_(),t});var t}function S(e){w[e]?(x[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=C.p+""+e+"."+i+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function _(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return O(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in g)Object.prototype.hasOwnProperty.call(g,n)&&t.push(k(n));e.resolve(t)}}function O(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,o,c,u;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((c=E[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<c.parents.length;s++){var u=c.parents[s],l=E[u];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),d(n[u],[o])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},v=[],y={},b=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var x in g)if(Object.prototype.hasOwnProperty.call(g,x)){var A;u=k(x);var S=!1,_=!1,O=!1,j="";switch((A=g[x]?l(u):{type:"disposed",moduleId:x}).chain&&(j="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":t.onDeclined&&t.onDeclined(A),t.ignoreDeclined||(S=new Error("Aborted because of self decline: "+A.moduleId+j));break;case"declined":t.onDeclined&&t.onDeclined(A),t.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+j));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(A),t.ignoreUnaccepted||(S=new Error("Aborted because "+u+" is not accepted"+j));break;case"accepted":t.onAccepted&&t.onAccepted(A),_=!0;break;case"disposed":t.onDisposed&&t.onDisposed(A),O=!0;break;default:throw new Error("Unexception type "+A.type)}if(S)return p("abort"),Promise.reject(S);if(_)for(u in y[u]=g[u],d(v,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,u)&&(h[u]||(h[u]=[]),d(h[u],A.outdatedDependencies[u]));O&&(d(v,[A.moduleId]),y[u]=b)}var $,N=[];for(r=0;r<v.length;r++)u=v[r],E[u]&&E[u].hot._selfAccepted&&N.push({module:u,errorHandler:E[u].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var M,P,T=v.slice();T.length>0;)if(u=T.pop(),c=E[u]){var q={},z=c.hot._disposeHandlers;for(o=0;o<z.length;o++)(n=z[o])(q);for(a[u]=q,c.hot.active=!1,delete E[u],delete h[u],o=0;o<c.children.length;o++){var I=E[c.children[o]];I&&(($=I.parents.indexOf(u))>=0&&I.parents.splice($,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(c=E[u]))for(P=h[u],o=0;o<P.length;o++)M=P[o],($=c.children.indexOf(M))>=0&&c.children.splice($,1);for(u in p("apply"),i=m,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var L=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(c=E[u])){P=h[u];var V=[];for(r=0;r<P.length;r++)if(M=P[r],n=c.hot._acceptedDependencies[M]){if(-1!==V.indexOf(n))continue;V.push(n)}for(r=0;r<V.length;r++){n=V[r];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:P[r],error:e}),t.ignoreErrored||L||(L=e)}}}for(r=0;r<N.length;r++){var D=N[r];u=D.module,s=[u];try{C(u)}catch(e){if("function"==typeof D.errorHandler)try{D.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||L||(L=n),L||(L=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||L||(L=e)}}return L?(p("fail"),Promise.reject(L)):(p("idle"),new Promise(function(e){e(v)}))}var E={};function C(t){if(E[t])return E[t].exports;var n=E[t]={i:t,l:!1,exports:{},hot:l(t),parents:(c=s,s=[],c),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}C.m=e,C.c=E,C.d=function(e,t,n){C.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},C.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},C.t=function(e,t){if(1&t&&(e=C(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)C.d(n,r,function(t){return e[t]}.bind(null,r));return n},C.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return C.d(t,"a",t),t},C.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},C.p="",C.h=function(){return i},u(70)(C.s=70)}([function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return a});var r=n(41),i=void 0!==e?e:{},o=Object(r.a)(i),a=(o.flush,o.hydrate,o.cx,o.merge,o.getRegisteredStyles,o.injectGlobal,o.keyframes,o.css);o.sheet,o.caches}).call(this,n(58))},function(e,t,n){var r=n(19)("wks"),i=n(10),o=n(2).Symbol,a="function"==typeof o;(e.exports=function(e){return r[e]||(r[e]=a&&o[e]||(a?o:i)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(6),i=n(16);e.exports=n(8)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(34);t.Cycle=r.default;const i=n(57);t.Circulator=i.default},function(e,t,n){var r=n(15),i=n(28),o=n(20),a=Object.defineProperty;t.f=n(8)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(11)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(45),i=n(23);e.exports=function(e){return r(i(e))}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(2),i=n(3),o=n(4),a=n(10)("src"),s=Function.toString,c=(""+s).split("toString");n(13).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,s){var u="function"==typeof n;u&&(o(n,"name")||i(n,"name",t)),e[t]!==n&&(u&&(o(n,a)||i(n,a,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:s?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(e,t){var n=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(e,t){e.exports=!1},function(e,t,n){var r=n(7);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(32),i=n(25);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){for(var r=n(42),i=n(17),o=n(12),a=n(2),s=n(3),c=n(21),u=n(1),l=u("iterator"),d=u("toStringTag"),f=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=i(p),g=0;g<h.length;g++){var m,v=h[g],y=p[v],b=a[v],x=b&&b.prototype;if(x&&(x[l]||s(x,l,f),x[d]||s(x,d,v),c[v]=f,y))for(m in r)x[m]||o(x,m,r[m],!0)}},function(e,t,n){var r=n(13),i=n(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(14)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports={}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(19)("keys"),i=n(10);e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(6).f,i=n(4),o=n(1)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){e.exports=!n(8)&&!n(11)(function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(7),i=n(2).document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var r=n(2),i=n(13),o=n(3),a=n(12),s=n(47),c=function(e,t,n){var u,l,d,f,p=e&c.F,h=e&c.G,g=e&c.S,m=e&c.P,v=e&c.B,y=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?i:i[t]||(i[t]={}),x=b.prototype||(b.prototype={});for(u in h&&(n=t),n)d=((l=!p&&y&&void 0!==y[u])?y:n)[u],f=v&&l?s(d,r):m&&"function"==typeof d?s(Function.call,d):d,y&&a(y,u,d,e&c.U),b[u]!=d&&o(b,u,f),m&&x[u]!=d&&(x[u]=d)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(15),i=n(50),o=n(25),a=n(24)("IE_PROTO"),s=function(){},c=function(){var e,t=n(29)("iframe"),r=o.length;for(t.style.display="none",n(54).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[o[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=c(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(4),i=n(9),o=n(51)(!1),a=n(24)("IE_PROTO");e.exports=function(e,t){var n,s=i(e),c=0,u=[];for(n in s)n!=a&&r(s,n)&&u.push(n);for(;t.length>c;)r(s,n=t[c++])&&(~o(u,n)||u.push(n));return u}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function*(e){const t=e.length;let n=0;for(;;)n=(t+n+((yield e[n])||1))%t}},function(e,t,n){"use strict";var r=n(3),i=n(12),o=n(11),a=n(23),s=n(1);e.exports=function(e,t,n){var c=s(e),u=n(a,c,""[e]),l=u[0],d=u[1];o(function(){var t={};return t[c]=function(){return 7},7!=""[e](t)})&&(i(String.prototype,e,l),r(RegExp.prototype,c,2==t?function(e,t){return d.call(e,this,t)}:function(e){return d.call(e,this)}))}},function(e,t,n){var r=n(2),i=n(13),o=n(14),a=n(37),s=n(6).f;e.exports=function(e){var t=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){t.f=n(1)},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(32),i=n(25).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,i,o,a,s,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(i[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";var r=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},i={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var o=function(e){for(var t,n=e.length,r=n^n,i=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(i)|(255&e.charCodeAt(++i))<<8|(255&e.charCodeAt(++i))<<16|(255&e.charCodeAt(++i))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++i;switch(n){case 3:r^=(255&e.charCodeAt(i+2))<<16;case 2:r^=(255&e.charCodeAt(i+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(i)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),((r^=r>>>15)>>>0).toString(36)};var a=function(e){function t(e,t,r){var i=t.trim().split(h);t=i;var o=i.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<o;++s)t[s]=n(e,t[s],r).trim();break;default:var c=s=0;for(t=[];s<o;++s)for(var u=0;u<a;++u)t[c++]=n(e[u]+" ",i[s],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,o){var a=e+";",s=2*t+3*n+4*o;if(944===s){e=a.indexOf(":",9)+1;var c=a.substring(e,a.length-1).trim();return c=a.substring(0,e).trim()+c+";",1===j||2===j&&i(c,1)?"-webkit-"+c+c:c}if(0===j||2===j&&!i(a,1))return a;switch(s){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(_,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(c=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+c+a;case 1005:return f.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(c=a.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(t)){case 226:c=a.replace(b,"tb");break;case 232:c=a.replace(b,"tb-rl");break;case 220:c=a.replace(b,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+c+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,s=(c=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:a=a.replace(c,"-webkit-"+c)+";"+a;break;case 207:case 102:a=a.replace(c,"-webkit-"+(102<s?"inline-":"")+"box")+";"+a.replace(c,"-webkit-"+c)+";"+a.replace(c,"-ms-"+c+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return c=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+c+"-ms-flex-"+c+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(k,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(k,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,o).replace(":fill-available",":stretch"):a.replace(c,"-webkit-"+c)+a.replace(c,"-moz-"+c.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+o&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),P(2!==t?r:r.replace(A,"$1"),n,t)}function o(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function a(e,t,n,r,i,o,a,s,u,l){for(var d,f=0,p=t;f<M;++f)switch(d=N[f].call(c,e,p,n,r,i,o,a,s,u,l)){case void 0:case!1:case!0:case null:break;default:p=d}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(P=null,e?"function"!=typeof e?j=1:(j=2,P=e):j=0),s}function c(e,n){var s=e;if(33>s.charCodeAt(0)&&(s=s.trim()),s=[s],0<M){var c=a(-1,n,s,s,E,O,0,0,0,0);void 0!==c&&"string"==typeof c&&(n=c)}var d=function e(n,s,c,d,f){for(var p,h,g,b,w,k=0,A=0,S=0,_=0,N=0,P=0,q=g=p=0,z=0,I=0,L=0,V=0,D=c.length,F=D-1,R="",H="",W="",B="";z<D;){if(h=c.charCodeAt(z),z===F&&0!==A+_+S+k&&(0!==A&&(h=47===A?10:47),_=S=k=0,D++,F++),0===A+_+S+k){if(z===F&&(0<I&&(R=R.replace(l,"")),0<R.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:R+=c.charAt(z)}h=59}switch(h){case 123:for(p=(R=R.trim()).charCodeAt(0),g=1,V=++z;z<D;){switch(h=c.charCodeAt(z)){case 123:g++;break;case 125:g--;break;case 47:switch(h=c.charCodeAt(z+1)){case 42:case 47:e:{for(q=z+1;q<F;++q)switch(c.charCodeAt(q)){case 47:if(42===h&&42===c.charCodeAt(q-1)&&z+2!==q){z=q+1;break e}break;case 10:if(47===h){z=q+1;break e}}z=q}}break;case 91:h++;case 40:h++;case 34:case 39:for(;z++<F&&c.charCodeAt(z)!==h;);}if(0===g)break;z++}switch(g=c.substring(V,z),0===p&&(p=(R=R.replace(u,"").trim()).charCodeAt(0)),p){case 64:switch(0<I&&(R=R.replace(l,"")),h=R.charCodeAt(1)){case 100:case 109:case 115:case 45:I=s;break;default:I=$}if(V=(g=e(s,I,g,h,f+1)).length,0<M&&(w=a(3,g,I=t($,R,L),s,E,O,V,h,f,d),R=I.join(""),void 0!==w&&0===(V=(g=w.trim()).length)&&(h=0,g="")),0<V)switch(h){case 115:R=R.replace(x,o);case 100:case 109:case 45:g=R+"{"+g+"}";break;case 107:g=(R=R.replace(m,"$1 $2"))+"{"+g+"}",g=1===j||2===j&&i("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=R+g,112===d&&(H+=g,g="")}else g="";break;default:g=e(s,t(s,R,L),g,d,f+1)}W+=g,g=L=I=q=p=0,R="",h=c.charCodeAt(++z);break;case 125:case 59:if(1<(V=(R=(0<I?R.replace(l,""):R).trim()).length))switch(0===q&&(p=R.charCodeAt(0),45===p||96<p&&123>p)&&(V=(R=R.replace(" ",":")).length),0<M&&void 0!==(w=a(1,R,s,n,E,O,H.length,d,f,d))&&0===(V=(R=w.trim()).length)&&(R="\0\0"),p=R.charCodeAt(0),h=R.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){B+=R+c.charAt(z);break}default:58!==R.charCodeAt(V-1)&&(H+=r(R,p,h,R.charCodeAt(2)))}L=I=q=p=0,R="",h=c.charCodeAt(++z)}}switch(h){case 13:case 10:47===A?A=0:0===1+p&&107!==d&&0<R.length&&(I=1,R+="\0"),0<M*T&&a(0,R,s,n,E,O,H.length,d,f,d),O=1,E++;break;case 59:case 125:if(0===A+_+S+k){O++;break}default:switch(O++,b=c.charAt(z),h){case 9:case 32:if(0===_+k+A)switch(N){case 44:case 58:case 9:case 32:b="";break;default:32!==h&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===_+A+k&&(I=L=1,b="\f"+b);break;case 108:if(0===_+A+k+C&&0<q)switch(z-q){case 2:112===N&&58===c.charCodeAt(z-3)&&(C=N);case 8:111===P&&(C=P)}break;case 58:0===_+A+k&&(q=z);break;case 44:0===A+S+_+k&&(I=1,b+="\r");break;case 34:case 39:0===A&&(_=_===h?0:0===_?h:_);break;case 91:0===_+A+S&&k++;break;case 93:0===_+A+S&&k--;break;case 41:0===_+A+k&&S--;break;case 40:if(0===_+A+k){if(0===p)switch(2*N+3*P){case 533:break;default:p=1}S++}break;case 64:0===A+S+_+k+q+g&&(g=1);break;case 42:case 47:if(!(0<_+k+S))switch(A){case 0:switch(2*h+3*c.charCodeAt(z+1)){case 235:A=47;break;case 220:V=z,A=42}break;case 42:47===h&&42===N&&V+2!==z&&(33===c.charCodeAt(V+2)&&(H+=c.substring(V,z+1)),b="",A=0)}}0===A&&(R+=b)}P=N,N=h,z++}if(0<(V=H.length)){if(I=s,0<M&&void 0!==(w=a(2,H,I,n,E,O,V,d,f,d))&&0===(H=w).length)return B+H+W;if(H=I.join(",")+"{"+H+"}",0!=j*C){switch(2!==j||i(H,2)||(C=0),C){case 111:H=H.replace(y,":-moz-$1")+H;break;case 112:H=H.replace(v,"::-webkit-input-$1")+H.replace(v,"::-moz-$1")+H.replace(v,":-ms-input-$1")+H}C=0}}return B+H+W}($,s,n,0,0);return 0<M&&void 0!==(c=a(-2,d,s,s,E,O,d.length,0,0,0))&&(d=c),C=0,O=E=1,d}var u=/^\0+/g,l=/[\0\r\f]/g,d=/: */g,f=/zoo|gra/,p=/([,: ])(transform)/g,h=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,m=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,k=/-self|flex-/g,A=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,O=1,E=1,C=0,j=1,$=[],N=[],M=0,P=null,T=0;return c.use=function e(t){switch(t){case void 0:case null:M=N.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:N[M++]=t;break;case Boolean:T=0|!!t}}return e},c.set=s,void 0!==e&&s(e),c},s=n(40),c=n.n(s),u=/[A-Z]|^ms/g,l=r(function(e){return e.replace(u,"-$&").toLowerCase()}),d=function(e,t){return null==t||"boolean"==typeof t?"":1===i[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},f=function e(t){for(var n=t.length,r=0,i="";r<n;r++){var o=t[r];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"function":0,a=e([o()]);break;case"object":if(Array.isArray(o))a=e(o);else for(var s in a="",o)o[s]&&s&&(a&&(a+=" "),a+=s);break;default:a=o}a&&(i&&(i+=" "),i+=a)}}return i},p="undefined"!=typeof document;function h(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key||""),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),(void 0!==e.container?e.container:document.head).appendChild(t),t}var g=function(){function e(e){this.isSpeedy=!0,this.tags=[],this.ctr=0,this.opts=e}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.tags[0]=h(this.opts),this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=h(this.opts);this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(h(this.opts))},t.flush=function(){this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0,this.injected=!1},e}();t.a=function(e,t){if(void 0!==e.__SECRET_EMOTION__)return e.__SECRET_EMOTION__;void 0===t&&(t={});var n,r,i=t.key||"css",s=c()(function(e){n+=e,p&&h.insert(e,v)});void 0!==t.prefix&&(r={prefix:t.prefix});var u={registered:{},inserted:{},nonce:t.nonce,key:i},h=new g(t);p&&h.inject();var m=new a(r);m.use(t.stylisPlugins)(s);var v="";function y(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":if(void 0!==e.__emotion_styles){var n=e.toString();return n}return y.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(w.has(e))return w.get(e);var t="";return Array.isArray(e)?e.forEach(function(e){t+=y.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==u.registered[e[n]]?t+=n+"{"+u.registered[e[n]]+"}":t+=l(n)+":"+d(n,e[n])+";":Array.isArray(e[n])&&"string"==typeof e[n][0]&&void 0===u.registered[e[n][0]]?e[n].forEach(function(e){t+=l(n)+":"+d(n,e)+";"}):t+=n+"{"+y.call(this,e[n],!1)+"}"},this),w.set(e,t),t}.call(this,e);default:var r=u.registered[e];return!1===t&&void 0!==r?r:e}}var b,x,w=new WeakMap,k=/label:\s*([^\s;\n{]+)\s*;/g,A=function(e){var t=!0,n="",r="";null==e||void 0===e.raw?(t=!1,n+=y.call(this,e,!1)):n+=e[0];for(var i=arguments.length,a=new Array(i>1?i-1:0),s=1;s<i;s++)a[s-1]=arguments[s];return a.forEach(function(r,i){n+=y.call(this,r,46===n.charCodeAt(n.length-1)),!0===t&&void 0!==e[i+1]&&(n+=e[i+1])},this),x=n,n=n.replace(k,function(e,t){return r+="-"+t,""}),b=function(e,t){return o(e+t)+t}(n,r),n};function S(e,t){void 0===u.inserted[b]&&(n="",m(e,t),u.inserted[b]=n)}var _=function(){var e=A.apply(this,arguments),t=i+"-"+b;return void 0===u.registered[t]&&(u.registered[t]=x),S("."+t,e),t};function O(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==u.registered[t]?e.push(t):n+=t+" "}),n}function E(e,t){var n=[],r=O(n,e);return n.length<2?e:r+_(n,t)}function C(e){u.inserted[e]=!0}if(p){var j=document.querySelectorAll("[data-emotion-"+i+"]");Array.prototype.forEach.call(j,function(e){h.tags[0].parentNode.insertBefore(e,h.tags[0]),e.getAttribute("data-emotion-"+i).split(" ").forEach(C)})}var $={flush:function(){p&&(h.flush(),h.inject()),u.inserted={},u.registered={}},hydrate:function(e){e.forEach(C)},cx:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return E(f(t))},merge:E,getRegisteredStyles:O,injectGlobal:function(){S("",A.apply(this,arguments))},keyframes:function(){var e=A.apply(this,arguments),t="animation-"+b;return S("","@keyframes "+t+"{"+e+"}"),t},css:_,sheet:h,caches:u};return e.__SECRET_EMOTION__=$,$}},function(e,t,n){"use strict";var r=n(43),i=n(44),o=n(21),a=n(9);e.exports=n(46)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,i(1)):i(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(1)("unscopables"),i=Array.prototype;null==i[r]&&n(3)(i,r,{}),e.exports=function(e){i[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var r=n(22);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(14),i=n(30),o=n(12),a=n(3),s=n(21),c=n(49),u=n(26),l=n(55),d=n(1)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,g,m,v){c(n,t,h);var y,b,x,w=function(e){if(!f&&e in _)return _[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},k=t+" Iterator",A="values"==g,S=!1,_=e.prototype,O=_[d]||_["@@iterator"]||g&&_[g],E=O||w(g),C=g?A?w("entries"):E:void 0,j="Array"==t&&_.entries||O;if(j&&(x=l(j.call(new e)))!==Object.prototype&&x.next&&(u(x,k,!0),r||"function"==typeof x[d]||a(x,d,p)),A&&O&&"values"!==O.name&&(S=!0,E=function(){return O.call(this)}),r&&!v||!f&&!S&&_[d]||a(_,d,E),s[t]=E,s[k]=p,g)if(y={values:A?E:w("values"),keys:m?E:w("keys"),entries:C},v)for(b in y)b in _||o(_,b,y[b]);else i(i.P+i.F*(f||S),t,y);return y}},function(e,t,n){var r=n(48);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";var r=n(31),i=n(16),o=n(26),a={};n(3)(a,n(1)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:i(1,n)}),o(e,t+" Iterator")}},function(e,t,n){var r=n(6),i=n(15),o=n(17);e.exports=n(8)?Object.defineProperties:function(e,t){i(e);for(var n,a=o(t),s=a.length,c=0;s>c;)r.f(e,n=a[c++],t[n]);return e}},function(e,t,n){var r=n(9),i=n(52),o=n(53);e.exports=function(e){return function(t,n,a){var s,c=r(t),u=i(c.length),l=o(a,u);if(e&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(33),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(33),i=Math.max,o=Math.min;e.exports=function(e,t){return(e=r(e))<0?i(e+t,0):o(e,t)}},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(4),i=n(56),o=n(24)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=i(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){var r=n(23);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(34);t.default=class{constructor(e){const t=Array.isArray(e)?e:Array.from(e);this.size=t.length,this.cycle=r.default(t),this.cycle.next()}*[Symbol.iterator](){yield*Array.from(Array(this.size),(e,t)=>this.step(+!!t)),this.next()}step(e){return this.cycle.next(e).value}current(){return this.step(0)}prev(){return this.step(-1)}next(){return this.step(1)}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){},function(e,t,n){n(35)("match",1,function(e,t,n){return[function(n){"use strict";var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},n]})},function(e,t,n){n(35)("split",2,function(e,t,r){"use strict";var i=n(62),o=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var s=void 0===/()??/.exec("")[1];r=function(e,t){var n=String(this);if(void 0===e&&0===t)return[];if(!i(e))return o.call(n,e,t);var r,c,u,l,d,f=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,g=void 0===t?4294967295:t>>>0,m=new RegExp(e.source,p+"g");for(s||(r=new RegExp("^"+m.source+"$(?!\\s)",p));(c=m.exec(n))&&!((u=c.index+c[0].length)>h&&(f.push(n.slice(h,c.index)),!s&&c.length>1&&c[0].replace(r,function(){for(d=1;d<arguments.length-2;d++)void 0===arguments[d]&&(c[d]=void 0)}),c.length>1&&c.index<n.length&&a.apply(f,c.slice(1)),l=c[0].length,h=u,f.length>=g));)m.lastIndex===c.index&&m.lastIndex++;return h===n.length?!l&&m.test("")||f.push(""):f.push(n.slice(h)),f.length>g?f.slice(0,g):f}}else"0".split(void 0,0).length&&(r=function(e,t){return void 0===e&&0===t?[]:o.call(this,e,t)});return[function(n,i){var o=e(this),a=null==n?void 0:n[t];return void 0!==a?a.call(n,o,i):r.call(String(o),n,i)},r]})},function(e,t,n){var r=n(7),i=n(22),o=n(1)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))}},function(e,t,n){n(36)("asyncIterator")},function(e,t,n){"use strict";var r=n(2),i=n(4),o=n(8),a=n(30),s=n(12),c=n(65).KEY,u=n(11),l=n(19),d=n(26),f=n(10),p=n(1),h=n(37),g=n(36),m=n(66),v=n(67),y=n(15),b=n(7),x=n(9),w=n(20),k=n(16),A=n(31),S=n(68),_=n(69),O=n(6),E=n(17),C=_.f,j=O.f,$=S.f,N=r.Symbol,M=r.JSON,P=M&&M.stringify,T=p("_hidden"),q=p("toPrimitive"),z={}.propertyIsEnumerable,I=l("symbol-registry"),L=l("symbols"),V=l("op-symbols"),D=Object.prototype,F="function"==typeof N,R=r.QObject,H=!R||!R.prototype||!R.prototype.findChild,W=o&&u(function(){return 7!=A(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=C(D,t);r&&delete D[t],j(e,t,n),r&&e!==D&&j(D,t,r)}:j,B=function(e){var t=L[e]=A(N.prototype);return t._k=e,t},G=F&&"symbol"==typeof N.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof N},U=function(e,t,n){return e===D&&U(V,t,n),y(e),t=w(t,!0),y(n),i(L,t)?(n.enumerable?(i(e,T)&&e[T][t]&&(e[T][t]=!1),n=A(n,{enumerable:k(0,!1)})):(i(e,T)||j(e,T,k(1,{})),e[T][t]=!0),W(e,t,n)):j(e,t,n)},J=function(e,t){y(e);for(var n,r=m(t=x(t)),i=0,o=r.length;o>i;)U(e,n=r[i++],t[n]);return e},K=function(e){var t=z.call(this,e=w(e,!0));return!(this===D&&i(L,e)&&!i(V,e))&&(!(t||!i(this,e)||!i(L,e)||i(this,T)&&this[T][e])||t)},X=function(e,t){if(e=x(e),t=w(t,!0),e!==D||!i(L,t)||i(V,t)){var n=C(e,t);return!n||!i(L,t)||i(e,T)&&e[T][t]||(n.enumerable=!0),n}},Y=function(e){for(var t,n=$(x(e)),r=[],o=0;n.length>o;)i(L,t=n[o++])||t==T||t==c||r.push(t);return r},Z=function(e){for(var t,n=e===D,r=$(n?V:x(e)),o=[],a=0;r.length>a;)!i(L,t=r[a++])||n&&!i(D,t)||o.push(L[t]);return o};F||(s((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(n){this===D&&t.call(V,n),i(this,T)&&i(this[T],e)&&(this[T][e]=!1),W(this,e,k(1,n))};return o&&H&&W(D,e,{configurable:!0,set:t}),B(e)}).prototype,"toString",function(){return this._k}),_.f=X,O.f=U,n(39).f=S.f=Y,n(27).f=K,n(38).f=Z,o&&!n(14)&&s(D,"propertyIsEnumerable",K,!0),h.f=function(e){return B(p(e))}),a(a.G+a.W+a.F*!F,{Symbol:N});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Q.length>ee;)p(Q[ee++]);for(var te=E(p.store),ne=0;te.length>ne;)g(te[ne++]);a(a.S+a.F*!F,"Symbol",{for:function(e){return i(I,e+="")?I[e]:I[e]=N(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!F,"Object",{create:function(e,t){return void 0===t?A(e):J(A(e),t)},defineProperty:U,defineProperties:J,getOwnPropertyDescriptor:X,getOwnPropertyNames:Y,getOwnPropertySymbols:Z}),M&&a(a.S+a.F*(!F||u(function(){var e=N();return"[null]"!=P([e])||"{}"!=P({a:e})||"{}"!=P(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=t=r[1],(b(t)||void 0!==e)&&!G(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),r[1]=t,P.apply(M,r)}}),N.prototype[q]||n(3)(N.prototype,q,N.prototype.valueOf),d(N,"Symbol"),d(Math,"Math",!0),d(r.JSON,"JSON",!0)},function(e,t,n){var r=n(10)("meta"),i=n(7),o=n(4),a=n(6).f,s=0,c=Object.isExtensible||function(){return!0},u=!n(11)(function(){return c(Object.preventExtensions({}))}),l=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},d=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,r)){if(!c(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!o(e,r)){if(!c(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return u&&d.NEED&&c(e)&&!o(e,r)&&l(e),e}}},function(e,t,n){var r=n(17),i=n(38),o=n(27);e.exports=function(e){var t=r(e),n=i.f;if(n)for(var a,s=n(e),c=o.f,u=0;s.length>u;)c.call(e,a=s[u++])&&t.push(a);return t}},function(e,t,n){var r=n(22);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(9),i=n(39).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(r(e))}},function(e,t,n){var r=n(27),i=n(16),o=n(9),a=n(20),s=n(4),c=n(28),u=Object.getOwnPropertyDescriptor;t.f=n(8)?u:function(e,t){if(e=o(e),t=a(t,!0),c)try{return u(e,t)}catch(e){}if(s(e,t))return i(!r.f.call(e,t),e[t])}},function(e,t,n){"use strict";n.r(t);n(18);var r=n(5),i=n(0);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const o=new WeakMap,a=e=>"function"==typeof e&&o.has(e),s=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,c=(e,t,n=null)=>{let r=t;for(;r!==n;){const t=r.nextSibling;e.removeChild(r),r=t}},u={},l=`{{lit-${String(Math.random()).slice(2)}}}`,d=`\x3c!--${l}--\x3e`,f=new RegExp(`${l}|${d}`),p=(()=>{const e=document.createElement("div");return e.setAttribute("style","{{bad value}}"),"{{bad value}}"!==e.getAttribute("style")})();class h{constructor(e,t){this.parts=[],this.element=t;let n=-1,r=0;const i=[],o=t=>{const a=t.content,s=document.createTreeWalker(a,133,null,!1);let c,u;for(;s.nextNode();){n++,c=u;const t=u=s.currentNode;if(1===t.nodeType){if(t.hasAttributes()){const i=t.attributes;let o=0;for(let e=0;e<i.length;e++)i[e].value.indexOf(l)>=0&&o++;for(;o-- >0;){const i=e.strings[r],o=v.exec(i)[2],a=p&&"style"===o?"style$":/^[a-zA-Z-]*$/.test(o)?o:o.toLowerCase(),s=t.getAttribute(a).split(f);this.parts.push({type:"attribute",index:n,name:o,strings:s}),t.removeAttribute(a),r+=s.length-1}}"TEMPLATE"===t.tagName&&o(t)}else if(3===t.nodeType){const e=t.nodeValue;if(e.indexOf(l)<0)continue;const o=t.parentNode,a=e.split(f),s=a.length-1;r+=s;for(let e=0;e<s;e++)o.insertBefore(""===a[e]?m():document.createTextNode(a[e]),t),this.parts.push({type:"node",index:n++});o.insertBefore(""===a[s]?m():document.createTextNode(a[s]),t),i.push(t)}else if(8===t.nodeType)if(t.nodeValue===l){const e=t.parentNode,o=t.previousSibling;null===o||o!==c||o.nodeType!==Node.TEXT_NODE?e.insertBefore(m(),t):n--,this.parts.push({type:"node",index:n++}),i.push(t),null===t.nextSibling?e.insertBefore(m(),t):n--,u=c,r++}else{let e=-1;for(;-1!==(e=t.nodeValue.indexOf(l,e+1));)this.parts.push({type:"node",index:-1})}}};o(t);for(const e of i)e.parentNode.removeChild(e)}}const g=e=>-1!==e.index,m=()=>document.createComment(""),v=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class y{constructor(e,t,n){this._parts=[],this.template=e,this.processor=t,this._getTemplate=n}update(e){let t=0;for(const n of this._parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this._parts)void 0!==e&&e.commit()}_clone(){const e=s?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=this.template.parts;let n=0,r=0;const i=e=>{const o=document.createTreeWalker(e,133,null,!1);let a=o.nextNode();for(;n<t.length&&null!==a;){const e=t[n];if(g(e))if(r===e.index){if("node"===e.type){const e=this.processor.handleTextExpression(this._getTemplate);e.insertAfterNode(a),this._parts.push(e)}else this._parts.push(...this.processor.handleAttributeExpressions(a,e.name,e.strings));n++}else r++,"TEMPLATE"===a.nodeName&&i(a.content),a=o.nextNode();else this._parts.push(void 0),n++}};return i(e),s&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class b{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!0;for(let r=0;r<e;r++){const e=this.strings[r];t+=e;const i=e.lastIndexOf(">");!(n=(i>-1||n)&&-1===e.indexOf("<",i+1))&&p&&(t=t.replace(v,(e,t,n,r)=>"style"===n?`${t}style$${r}`:e)),t+=n?d:l}return t+=this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const x=e=>null===e||!("object"==typeof e||"function"==typeof e);class w{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new k(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let r=0;r<t;r++){n+=e[r];const t=this.parts[r];if(void 0!==t){const e=t.value;if(null!=e&&(Array.isArray(e)||"string"!=typeof e&&e[Symbol.iterator]))for(const t of e)n+="string"==typeof t?t:String(t);else n+="string"==typeof e?e:String(e)}}return n+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class k{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===u||x(e)&&e===this.value||(this.value=e,a(e)||(this.committer.dirty=!0))}commit(){for(;a(this.value);){const e=this.value;this.value=u,e(this)}this.value!==u&&this.committer.commit()}}class A{constructor(e){this.value=void 0,this._pendingValue=void 0,this.templateFactory=e}appendInto(e){this.startNode=e.appendChild(m()),this.endNode=e.appendChild(m())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e._insert(this.startNode=m()),e._insert(this.endNode=m())}insertAfterPart(e){e._insert(this.startNode=m()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this._pendingValue=e}commit(){for(;a(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}const e=this._pendingValue;e!==u&&(x(e)?e!==this.value&&this._commitText(e):e instanceof b?this._commitTemplateResult(e):e instanceof Node?this._commitNode(e):Array.isArray(e)||e[Symbol.iterator]?this._commitIterable(e):void 0!==e.then?this._commitPromise(e):this._commitText(e))}_insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}_commitNode(e){this.value!==e&&(this.clear(),this._insert(e),this.value=e)}_commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&t.nodeType===Node.TEXT_NODE?t.textContent=e:this._commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}_commitTemplateResult(e){const t=this.templateFactory(e);if(this.value&&this.value.template===t)this.value.update(e.values);else{const n=new y(t,e.processor,this.templateFactory),r=n._clone();n.update(e.values),this._commitNode(r),this.value=n}}_commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const i of e)void 0===(n=t[r])&&(n=new A(this.templateFactory),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(i),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}_commitPromise(e){this.value=e,e.then(t=>{this.value===e&&(this.setValue(t),this.commit())})}clear(e=this.startNode){c(this.startNode.parentNode,e.nextSibling,this.endNode)}}class S{constructor(e,t,n){if(this.value=void 0,this._pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this._pendingValue=e}commit(){for(;a(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}if(this._pendingValue===u)return;const e=!!this._pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)),this.value=e,this._pendingValue=u}}class _ extends w{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new O(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class O extends k{}class E{constructor(e,t){this.value=void 0,this._pendingValue=void 0,this.element=e,this.eventName=t}setValue(e){this._pendingValue=e}commit(){for(;a(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}this._pendingValue!==u&&(null==this._pendingValue!=(null==this.value)&&(null==this._pendingValue?this.element.removeEventListener(this.eventName,this):this.element.addEventListener(this.eventName,this)),this.value=this._pendingValue,this._pendingValue=u)}handleEvent(e){"function"==typeof this.value?this.value.call(this.element,e):"function"==typeof this.value.handleEvent&&this.value.handleEvent(e)}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const C=new class{handleAttributeExpressions(e,t,n){const r=t[0];return"."===r?new _(e,t.slice(1),n).parts:"@"===r?[new E(e,t.slice(1))]:"?"===r?[new S(e,t.slice(1),n)]:new w(e,t,n).parts}handleTextExpression(e){return new A(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const j=new Map,$=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const N=(e,...t)=>new b(e,t,"html",C);n(59);var M=e=>t=>N`<div class="Box ${i.a`
    position: relative;
    width: var(--box);
    height: var(--box);
    background-color: ${e};
    --sh: 1px;
    box-shadow: inset var(--sh) var(--sh) 0 0
      rgba(255, 255, 255, 0.15);
  `} ${t?i.a`
          // border: 1px solid #f06;
        `:i.a`
          visibility: hidden;
        `}"></div>`;var P=e=>{let t=e.shape,n=e.x,r=e.y,o=e.height,a=e.width,s=e.color,c=e.turns;return N`
  <div class="Shape ${i.a`
    position: absolute;
    top: calc(var(--box) * ${r});
    left: calc(var(--box) * ${n});
  `}"
  data-x="${n}"
  data-y="${r}"
  data-height="${o}"
  data-width="${a}"
  data-turns="${+c}"
  >${t.map(e=>N`<div class=${i.a`
        display: flex;
      `}>${e.map(M(s))}</div>`)}</div>
`};var T=(e,t)=>{let n=e.boxes,r=e.width,o=e.height;return{width:r,height:o,html:N`<div class="Letter ${i.a`
    position: relative;
    margin-right: var(--box);
    width: calc(var(--box) * ${r});
    height: calc(var(--box) * ${o});
    flex-shrink: 0;
  `}"
    data-width="${r}"
    data-height="${o}"
  >
  <div class="Letter-container ${i.a`
    position: relative;
    width: 100%;
    height: 100%;
  `}">
    ${n.map(e=>P(e))}
    </div>
    <div class="Cover ${i.a`
      background: rgb(var(--bg));
      position: absolute;
      width: 100%;
      height: var(--box);
      opacity: 0;
    `} ${t?i.a`
          top: 0;
        `:i.a`
          bottom: 0;
        `}"></div>
</div>`}};var q=e=>{let t=e.width;return e.group.map(e=>{let n=e.x1,r=e.x2;return Array.from({length:t},(e,t)=>t<=r&&t>=n?1:0)})};n(60),n(61);const z=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return JSON.stringify(t)};var I=e=>{const t=e.split(/\n/).map(e=>e.trimRight()).filter(e=>e);return{width:Math.max(...t.map(e=>e.length)),height:t.length,segmentized:t.map(e=>e.match(/(.)\1*/g)).map((e,t)=>e.map((t,n)=>({char:t[0],length:t.length,x:e.slice(0,n).join("").length})).filter(e=>" "!==e.char).map((e,n)=>{let r=e.char,i=e.length,o=e.x;return{char:r,x1:o,x2:o+i-1,id:z(o,t),i:n,y:t}}))}};var L=e=>e.map((e,t,n)=>e.map(e=>Object.assign({},e,{next:n[t+1]&&n[t+1].find(t=>{let n=t.char,r=t.x1,i=t.x2;return n===e.char&&e.x1<=i&&r<=e.x2})})));const V=["#004777","#a30000","#ff7700","#efd28d","#00afb5"],D=new r.Circulator(V),F=new r.Circulator(V),R=Math.round(Math.random()*V.length);D.step(R),F.step(R);n(63),n(64);const H=()=>{const e=window.getComputedStyle(document.body).getPropertyValue("--box"),t=parseInt(e,10),n=Math.round(e.endsWith("vw")?.01*window.innerWidth*t:t);return t!==n&&document.documentElement.style.setProperty("--box",`${n}px`),n},W=Symbol("log"),B=Symbol("log group");Object.assign(Object.prototype,{[W](){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.log(this,...t),this},[B](e,t){var n=this;return void 0===t&&(t=!1),function(){console[t?"groupCollapsed":"group"](e);const r=n(...arguments);return console.groupEnd(),r}}});const G=Symbol("play"),U=Symbol("of");Object.assign(Animation.prototype,{[G](){return this.play(),this.finished}}),Animation[U]=(e=>{const t=new Animation(e,document.timeline);return t.pause(),t});const J=(e,t,n)=>{const r=Math.ceil(e),i=Math.floor(t);return Math.floor(n*(i-r+1))+r};var K=function(e,t,n){void 0===t&&(t=!1);const r=I(e),i=r.segmentized,o=r.width,a=r.height,s=L(i),c=s.map(e=>e.map(e=>e.next).filter(e=>e).map(e=>e.id)),u=s.map(e=>e.filter(e=>{let t=e.id;return!c.some(e=>e.includes(t))})),l=t?F:D,d=u.map(e=>e.map(e=>(function e(t,n){void 0===n&&(n=[]);const r=n.concat(t);return t.next?e(s[t.next.y][t.next.i],r):r})(e))).map(e=>e.map(e=>Object.assign({},e.reduce((e,t)=>({x1:Math.min(e.x1,t.x1),x2:Math.max(e.x2,t.x2)})),{y1:e[0].y,y2:e[e.length-1].y,group:e})).map(e=>{let t=e.x1,n=e.x2,r=e.y1,i=e.y2,o=e.group;return{x:t,y:r,width:n-t+1,height:i-r+1,color:l.next(),group:o.map(e=>({x1:e.x1-t,x2:e.x2-t}))}}).map(e=>Object.assign({},e,{shape:q(e)})).map(e=>{const t=(e=>1===new Set(e.map(e=>JSON.stringify(e))).size)(e.shape),r=t&&(e=>e[0].length===e.length)(e.shape);return Object.assign({},e,{turns:J(0,+r?0:+t?1:3,n.next())})}));return{boxes:((t?d.map(e=>e.map(e=>Object.assign({},e,{shape:e.shape.reverse(),y:a-e.y-e.height})).reverse()).reverse():null)||d).reduce((e,t)=>e.concat(t),[]),width:o,height:a}};const X=Array.from({length:20},()=>Math.random());var Y={a:"\n az\naazz\na  z\nd  c\nddcc\nd  c\n",b:"\nbbqq\nb  q\nbooq\nroov\nr  v\nrrvv\n",c:"\nccc\nx c\nx\nx\nx q\nqqq\n",d:"\nddcc\ndd c\nqq c\nqa r\nqa r\naarr\n",e:"\neee\ne\ncc\ncc\ne\neee\n",f:"\ncrrr\nc  r\ncc\ndd\nd\nd\n",g:"\niooo\ni  o\ni\ni dd\nc  d\ncccd\n",h:"\nl  h\nl  h\nllhh\nsscc\ns  c\ns  c\n",i:"\npp\npp\ndc\ndc\ndc\ndc\n",j:"\n ooo\n   o\n   p\n   p\nc  p\ncccp\n",k:"\nt  c\nt cc\nttc\nssd\ns dd\ns  d\n",l:"\nto\nto\nto\nto\nattt\naaat\n",m:"\ns  r\nssrr\ncsrc\nc  c\nc  c\nc  c\n",n:"\no  r\noo r\nxo r\nx pr\nx pp\nx  p\n",o:"\nookk\no  k\no  k\ns  t\ns  t\nsstt\n",p:"\npppr\np  r\no rr\no\no\no\n",q:"\nddds\nd  s\ns  s\ns  s\ns cc\ns cc\n",r:"\nddds\nd  s\ns  s\ns cs\ns cc\ns  c\n",s:"\nabbb\naa b\n a\n  d\na dd\naaad\n",t:"\nsscc\nsscc\n fo\n fo\n fo\n fo\n",u:"\nq  q\nq  q\nq  q\nq  q\npppp\nssss\n",v:"\nc  c\nc  c\nc  c\nc  c\n xx\n xx\n  ",w:"\nc  c  c\nc  c  c\nc  c  c\nc  c  c\n aa aa\n aa aa\n  ",z:"\nzzzs\nz ss\n  s\n a\naa c\naccc\n",x:"\nx  c\nxxcc\n xc\n pr\npprr\np  r\n",y:"\nc  r\nccrr\n cr\n oo\n oo\n"},Z={"č":"\n   oo\n   oo\nxxxxyyyy\n  zzzz\n  t  t\n  t  t\n  tt tt\n","š":"\n   ccc\n  ffcdd\n ffzzzdd\n   qzx\n   q x\n   q x\n   q x\n","ž":"\naa         o o\n aa  zzzz fdaa\n  xxx    ff  aa\n   x      fzzzz\n   f     d\n apffzzzzoa \naapf    a aa\na p     aa a\n  p      a\n","ķ":"\nrr    \n r   kk\n rgggkk\n ppgpp\n p   p\n p   p\n","ģ":"\n x   q\nxxx qqq\nppdddpp\n ppdpp\n  ccc\n   c\n"};const Q=function(){return`data:image/svg+xml;base64,${btoa(function(e,t){return void 0===e&&(e="#000000"),void 0===t&&(t="#FFFFFF"),`<svg xmlns="http://www.w3.org/2000/svg" width="28px" height="28px">,\n<defs>,\n  <filter id="f1" x="-50%" y="-50%" width="200%" height="200%">,\n    <feOffset result="offsetOut" in="SourceAlpha" dx="0" dy="1"/>,\n    <feGaussianBlur result="blurOut" in="offsetOut" stdDeviation="1"/>,\n    <feComponentTransfer result="opacityOut" in="blurOut">,\n      <feFuncA type="linear" slope="0.3"/>,\n    </feComponentTransfer>,\n    <feBlend in="SourceGraphic" in2="opacityOut" mode="normal"/>,\n  </filter>,\n</defs>,\n<polygon fill="${e}" points="4,18.5 4,2.5 15.5,14 11,14 13,19 9.5,20.5 7.25,15.25" filter="url(#f1)"/>,\n<polygon fill="${t}" points="5,16 7.5,13.5 10,19.125 11.625,18.5 9.5,13 13,13 5,5"/>,\n</svg>`}(...arguments))}`},ee=(e=>(function(t,n){void 0===n&&(n=!1);const o=H(),a=[...t].map(t=>" "===t?{width:2,html:N`<div class="${i.a`
              width: ${2*o}px;
            `}"></div>`}:T(K(e[t],n,(()=>new r.Circulator([...X]))()),n)),s=a.map(e=>e.width).reduce((e,t)=>e+t),c=Math.max(...a.map(e=>e.height||0));return N`
  <div class="Word 
  Word-mirror-${n}
  ${n?i.a`
          opacity: 1;
          align-items: flex-start;
        `:i.a`
          align-items: flex-end;
        `}
  ${i.a`
    display: flex;
    width: ${s*o+(a.length-1)*o}px;
  `}"
    data-width="${s}"
    data-height="${c}"
  >
  ${a.map(e=>e.html)}
  </div>`}))(Object.assign(Y,Z)),te=i.a`
  overflow: hidden;
  display: flex;
  justify-content: center;
`;let ne=0;var re=function(e,t){return void 0===t&&(t=ne++),N`
<div class="MirrorWord ${i.a`
  position: absolute;
  width: 100%;
`}">
  <div class="Word-overlay ${te}"
  @mousemove="${e=>{let n=e.layerX,r=e.layerY;const i=document.querySelector(`#Mouse-${t}`);i.style.left=`${n-5}px`,i.style.bottom=`${r-5}px`}}"
  @mouseleave="${()=>{document.querySelector(`#Mouse-${t}`).style.display="none"}}"
  @mouseenter="${()=>{document.querySelector(`#Mouse-${t}`).style.display="block"}}"
  >${ee(e)}</div>
  <div class="Word-overlay-mirror ${i.a`
    position: relative;
  `} ${te}">
    ${ee(e,!0)}
    ${(e=>N`<img id="Mouse-${e}" class="Mouse ${i.a`
    position: absolute;
    transform: scaleY(-1);
    left: -100%;
  `}" src="${Q()}">`)(t)}
  </div>
</div>
`},ie={loop:1,mirror:1,hide:1,speedFactor:2,hideDelay:3e3,texts:["hello world","č ķ ģ"],offsetAbs:200};const oe=H(),ae=function(e,t){void 0===t&&(t=!1);const n=[...e.querySelectorAll(".Shape")],r=e.getBoundingClientRect();t||n.reverse();const i=ie.offsetAbs,o=t?i:-i,a=n.map((e,a)=>{const s=e.getBoundingClientRect(),c=window.getComputedStyle(e),u=ie.speedFactor,l=parseInt(e.dataset.y,10),d=parseInt(e.dataset.height,10),f=parseInt(e.dataset.width,10),p=r.height/oe,h=(i/oe+(p-(t?l:p-l-d)))*oe,g=r.width/2,m=f*oe/2+parseInt(c.left,10),v=Math.abs(g-m),y=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new KeyframeEffect(e,...n)},b=r.width/2-s.width/2,x=y({opacity:[0,1]},{duration:100*u,fill:"both",easing:"ease-in"}),w=2*u,k=.55*u,A=100*u,S=+e.dataset.turns,_=A*S,O=t?-1:1,E=y([{transform:`rotate(${90*S*(a%2?-1:1)*O}deg)`},{transform:"rotate(0)"}],{duration:_,fill:"both",composite:"add",easing:"ease-in-out",delay:30}),C=y({left:[`${b}px`,c.left]},{duration:v*w,fill:"both",easing:"ease-in-out"}),j=Math.max(v,_/w),$=j*O,N=Math.max(j*w,_),M=y({top:[`${o}px`,`${o+$}px`]},{duration:N,fill:"both"}),P=h*k-j*k,T=y({top:[`${o+$}px`,c.top]},{duration:P,fill:"forwards",easing:"ease-in",endDelay:a+1===n.length?ie.hideDelay:0});return new SequenceEffect([x,new GroupEffect([C,M,E]),T])});return new SequenceEffect(a)},se={opacity:0},ce={opacity:1},ue=e=>new KeyframeEffect(e,[se,ce,se,ce],{duration:250}),le=(e,t)=>{const n=e.querySelector(".Cover"),r=e.getBoundingClientRect(),i=e.querySelector(".Letter-container"),o=r.height/oe,a=t?-1:1,s=Array.from({length:o},(e,t)=>{const r=new KeyframeEffect(i,[{top:`${t*oe*a}px`},{top:`${(t+1)*oe*a}px`}],{duration:100,easing:"ease-in",fill:"forwards"});return new SequenceEffect([ue(n),r])});return new SequenceEffect(s)},de=[...document.querySelectorAll("h1.heading")].map(e=>({heading:e,arrow:e.querySelector("a.arrow"),up:e.querySelector("a.uparrow"),link:e.querySelector("a.link"),height:e.getBoundingClientRect().height})),fe=document.querySelector("#projects .section-content"),pe=document.querySelector("#about-heading"),he=pe.getBoundingClientRect().height;pe.style.height=`${he}px`;const ge=parseInt(window.getComputedStyle(de[0].arrow).borderTopWidth,10);let me=0,ve=!1,ye=null;const be=e=>{let t=e.heading,n=e.link,r=e.arrow,i=e.height,o=e.up;const a=t.getBoundingClientRect().top;null===ye&&(ye=window.innerHeight-de[0].heading.offsetTop-de[0].height);const s=Math.max(0,a/(window.innerHeight-ye-i));n.style.fontSize=`${.8+.2*(1-s)}em`;const c=Math.max(0,s*ge);r.style.setProperty("--size",`${c}px`);const u=Math.max(0,(1-s)*ge);o.style.setProperty("--size",`${u}px`)},xe=()=>{de.forEach(be);const e=fe.getBoundingClientRect(),t=e.bottom-window.innerHeight+he>0,n=window.innerHeight-e.top-he+20<=0;pe.classList.toggle("fixed",t),pe.classList.toggle("static",n),e.top-he<=0?!window.paused&&window.playing&&(window.paused=!0,window.playing.pause()):window.paused&&(window.paused=!1,window.playing.play())};xe(),window.addEventListener("scroll",()=>{me=window.scrollY,ve||(window.requestAnimationFrame(()=>{xe(),ve=!1}),ve=!0)}),document.querySelectorAll('a[href^="#"]').forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const n=e.getAttribute("href");window.history.pushState(null,null,n),document.querySelector(n).scrollIntoView({block:"start",behavior:"smooth"})})});const we=document.querySelector("#Animation-root");!function(e,t,n=function(e){let t=j.get(e.type);void 0===t&&(t=new Map,j.set(e.type,t));let n=t.get(e.strings);return void 0===n&&(n=new h(e,e.getTemplateElement()),t.set(e.strings,n)),n}){let r=$.get(t);void 0===r&&(c(t,t.firstChild),$.set(t,r=new A(n)),r.appendInto(t)),r.setValue(e),r.commit()}(N`<div class="Animation ${i.a`
    flex-grow: 1;
  `}">
  ${ie.texts.map(re)}
</div>
`,we);const ke=[...document.querySelectorAll(".MirrorWord")],Ae=Object(r.Cycle)(ke.map(e=>{const t=[...e.querySelectorAll(".Word-mirror-false .Letter")],n=[...e.querySelectorAll(".Word-mirror-true .Letter")],r=Animation[U](new GroupEffect(t.map(e=>new SequenceEffect([ae(e)].concat(ie.hide?le(e):[]))).concat(ie.mirror?n.map(e=>new SequenceEffect([ae(e,!0)].concat(ie.hide?le(e,!0):[]))):[])));return{word:e,letters:t,animation:r}}));ke.forEach(e=>{e.style.display="none",e.style.position="relative"}),(async()=>{for(const e of Ae){const t=e.animation,n=e.word;if(n.style.display="block",window.playing=t,await t[G](),window.playing=null,n.style.display="none",!ie.loop)break}})(),document.documentElement.classList.add(i.a`
  cursor: url(${Q()}) 5 5, default;
`)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,