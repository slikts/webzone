!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===m&&S()}(e,n),t&&t(e,n)};var n,r=!0,o="d040394a7493ba2ba7f5",i={},c=[],a=[];function s(e){var t=_[e];if(!t)return E;var r=function(r){return t.hot.active?(_[r]?-1===_[r].parents.indexOf(e)&&_[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),E(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(t){E[e]=t}}};for(var i in E)Object.prototype.hasOwnProperty.call(E,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===f&&d("prepare"),m++,E.e(e).then(t,(function(e){throw t(),e}));function t(){m--,"prepare"===f&&(y[e]||k(e),0===m&&0===g&&S())}},r.t=function(e,t){return 1&t&&(e=r(e)),E.t(e,-2&t)},r}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:O,apply:A,status:function(e){if(!e)return f;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:i[e]};return n=void 0,t}var l=[],f="idle";function d(e){f=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var p,h,v,g=0,m=0,y={},b={},x={};function w(e){return+e+""===e?+e:e}function O(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=E.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return d("idle"),null;b={},y={},x=e.c,v=e.h,d("prepare");var t=new Promise((function(e,t){p={resolve:e,reject:t}}));h={};return k(0),"prepare"===f&&0===m&&0===g&&S(),t}));var t}function k(e){x[e]?(b[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=E.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):y[e]=!0}function S(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then((function(){return A(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function A(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,a,s,u;function l(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((s=_[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var a=0;a<s.parents.length;a++){var u=s.parents[a],l=_[u];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),p(n[u],[i])):(delete n[u],t.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},m=[],y={},b=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var k;u=w(O);var S=!1,A=!1,j=!1,C="";switch((k=h[O]?l(u):{type:"disposed",moduleId:O}).chain&&(C="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(S=new Error("Aborted because of self decline: "+k.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(S=new Error("Aborted because "+u+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(k),A=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),j=!0;break;default:throw new Error("Unexception type "+k.type)}if(S)return d("abort"),Promise.reject(S);if(A)for(u in y[u]=h[u],p(m,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,u)&&(g[u]||(g[u]=[]),p(g[u],k.outdatedDependencies[u]));j&&(p(m,[k.moduleId]),y[u]=b)}var N,M=[];for(r=0;r<m.length;r++)u=m[r],_[u]&&_[u].hot._selfAccepted&&y[u]!==b&&M.push({module:u,errorHandler:_[u].hot._selfAccepted});d("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)}));for(var P,T,q=m.slice();q.length>0;)if(u=q.pop(),s=_[u]){var I={},z=s.hot._disposeHandlers;for(a=0;a<z.length;a++)(n=z[a])(I);for(i[u]=I,s.hot.active=!1,delete _[u],delete g[u],a=0;a<s.children.length;a++){var L=_[s.children[a]];L&&((N=L.parents.indexOf(u))>=0&&L.parents.splice(N,1))}}for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(s=_[u]))for(T=g[u],a=0;a<T.length;a++)P=T[a],(N=s.children.indexOf(P))>=0&&s.children.splice(N,1);for(u in d("apply"),o=v,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var R=null;for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(s=_[u])){T=g[u];var V=[];for(r=0;r<T.length;r++)if(P=T[r],n=s.hot._acceptedDependencies[P]){if(-1!==V.indexOf(n))continue;V.push(n)}for(r=0;r<V.length;r++){n=V[r];try{n(T)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:T[r],error:e}),t.ignoreErrored||R||(R=e)}}}for(r=0;r<M.length;r++){var D=M[r];u=D.module,c=[u];try{E(u)}catch(e){if("function"==typeof D.errorHandler)try{D.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||R||(R=n),R||(R=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||R||(R=e)}}return R?(d("fail"),Promise.reject(R)):(d("idle"),new Promise((function(e){e(m)})))}var _={};function E(t){if(_[t])return _[t].exports;var n=_[t]={i:t,l:!1,exports:{},hot:u(t),parents:(a=c,c=[],a),children:[]};return e[t].call(n.exports,n,n.exports,s(t)),n.l=!0,n.exports}E.m=e,E.c=_,E.d=function(e,t,n){E.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},E.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},E.t=function(e,t){if(1&t&&(e=E(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(E.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)E.d(n,r,function(t){return e[t]}.bind(null,r));return n},E.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(t,"a",t),t},E.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},E.p="",E.h=function(){return o},s(83)(E.s=83)}([function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return c}));var r=n(46),o=void 0!==e?e:{},i=Object(r.a)(o),c=(i.flush,i.hydrate,i.cx,i.merge,i.getRegisteredStyles,i.injectGlobal,i.keyframes,i.css);i.sheet,i.caches}).call(this,n(48))},function(e,t,n){var r=n(15)("wks"),o=n(12),i=n(2).Symbol,c="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=c&&i[e]||(c?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(8),o=n(18);e.exports=n(10)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(31);t.Cycle=r.default;const o=n(47);t.Circulator=o.default},function(e,t,n){var r=n(4),o=n(32),i=n(22),c=Object.defineProperty;t.f=n(10)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(5)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(54),o=n(13);e.exports=function(e){return r(o(e))}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(2),o=n(3),i=n(6),c=n(12)("src"),a=n(56),s=(""+a).split("toString");n(16).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,c)||o(n,c,e[t]?""+e[t]:s.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||a.call(this)}))},function(e,t,n){var r=n(16),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(17)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t){e.exports=!1},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(2),o=n(16),i=n(3),c=n(14),a=n(57),s=function(e,t,n){var u,l,f,d,p=e&s.F,h=e&s.G,v=e&s.S,g=e&s.P,m=e&s.B,y=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),x=b.prototype||(b.prototype={});for(u in h&&(n=t),n)f=((l=!p&&y&&void 0!==y[u])?y:n)[u],d=m&&l?a(f,r):g&&"function"==typeof f?a(Function.call,f):f,y&&c(y,u,f,e&s.U),b[u]!=f&&i(b,u,d),g&&x[u]!=f&&(x[u]=f)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){var r=n(36),o=n(27);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports={}},function(e,t,n){var r=n(25),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(15)("keys"),o=n(12);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(8).f,o=n(6),i=n(1)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r,o,i=n(68),c=RegExp.prototype.exec,a=String.prototype.replace,s=c,u=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(s=function(e){var t,n,r,o,s=this;return l&&(n=new RegExp("^"+s.source+"$(?!\\s)",i.call(s))),u&&(t=s.lastIndex),r=c.call(s,e),u&&r&&(s.lastIndex=s.global?r.index+r[0].length:t),l&&r&&r.length>1&&a.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=s},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function*(e){const t=e.length;let n=0;for(;;)n=(t+n+((yield e[n])||1))%t}},function(e,t,n){e.exports=!n(10)&&!n(5)((function(){return 7!=Object.defineProperty(n(33)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(9),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(4),o=n(59),i=n(27),c=n(26)("IE_PROTO"),a=function(){},s=function(){var e,t=n(33)("iframe"),r=i.length;for(t.style.display="none",n(62).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[i[r]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[c]=e):n=s(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(6),o=n(11),i=n(60)(!1),c=n(26)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),s=0,u=[];for(n in a)n!=c&&r(a,n)&&u.push(n);for(;t.length>s;)r(a,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(13);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(65)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){"use strict";var r=n(66),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(67);var r=n(14),o=n(3),i=n(5),c=n(13),a=n(1),s=n(29),u=a("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=a(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[u]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!l||"split"===e&&!f){var v=/./[d],g=n(c,d,""[e],(function(e,t,n,r,o){return t.exec===s?p&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),m=g[0],y=g[1];r(String.prototype,e,m),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){var r=n(2),o=n(16),i=n(17),c=n(42),a=n(8).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:c.f(e)})}},function(e,t,n){t.f=n(1)},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(36),o=n(27).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,c,a,s,u,l,f){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";var r=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var i=function(e){for(var t,n=e.length,r=n^n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16),((r^=r>>>15)>>>0).toString(36)};var c=function(e){function t(e,t,r){var o=t.trim().split(h);t=o;var i=o.length,c=e.length;switch(c){case 0:case 1:var a=0;for(e=0===c?"":e[0]+" ";a<i;++a)t[a]=n(e,t[a],r).trim();break;default:var s=a=0;for(t=[];a<i;++a)for(var u=0;u<c;++u)t[s++]=n(e[u]+" ",o[a],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,i){var c=e+";",a=2*t+3*n+4*i;if(944===a){e=c.indexOf(":",9)+1;var s=c.substring(e,c.length-1).trim();return s=c.substring(0,e).trim()+s+";",1===C||2===C&&o(s,1)?"-webkit-"+s+s:s}if(0===C||2===C&&!o(c,1))return c;switch(a){case 1015:return 97===c.charCodeAt(10)?"-webkit-"+c+c:c;case 951:return 116===c.charCodeAt(3)?"-webkit-"+c+c:c;case 963:return 110===c.charCodeAt(5)?"-webkit-"+c+c:c;case 1009:if(100!==c.charCodeAt(4))break;case 969:case 942:return"-webkit-"+c+c;case 978:return"-webkit-"+c+"-moz-"+c+c;case 1019:case 983:return"-webkit-"+c+"-moz-"+c+"-ms-"+c+c;case 883:if(45===c.charCodeAt(8))return"-webkit-"+c+c;if(0<c.indexOf("image-set(",11))return c.replace(A,"$1-webkit-$2")+c;break;case 932:if(45===c.charCodeAt(4))switch(c.charCodeAt(5)){case 103:return"-webkit-box-"+c.replace("-grow","")+"-webkit-"+c+"-ms-"+c.replace("grow","positive")+c;case 115:return"-webkit-"+c+"-ms-"+c.replace("shrink","negative")+c;case 98:return"-webkit-"+c+"-ms-"+c.replace("basis","preferred-size")+c}return"-webkit-"+c+"-ms-"+c+c;case 964:return"-webkit-"+c+"-ms-flex-"+c+c;case 1023:if(99!==c.charCodeAt(8))break;return"-webkit-box-pack"+(s=c.substring(c.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+c+"-ms-flex-pack"+s+c;case 1005:return d.test(c)?c.replace(f,":-webkit-")+c.replace(f,":-moz-")+c:c;case 1e3:switch(t=(s=c.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=c.replace(b,"tb");break;case 232:s=c.replace(b,"tb-rl");break;case 220:s=c.replace(b,"lr");break;default:return c}return"-webkit-"+c+"-ms-"+s+c;case 1017:if(-1===c.indexOf("sticky",9))break;case 975:switch(t=(c=e).length-10,a=(s=(33===c.charCodeAt(t)?c.substring(0,t):c).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:c=c.replace(s,"-webkit-"+s)+";"+c;break;case 207:case 102:c=c.replace(s,"-webkit-"+(102<a?"inline-":"")+"box")+";"+c.replace(s,"-webkit-"+s)+";"+c.replace(s,"-ms-"+s+"box")+";"+c}return c+";";case 938:if(45===c.charCodeAt(5))switch(c.charCodeAt(6)){case 105:return s=c.replace("-items",""),"-webkit-"+c+"-webkit-box-"+s+"-ms-flex-"+s+c;case 115:return"-webkit-"+c+"-ms-flex-item-"+c.replace(O,"")+c;default:return"-webkit-"+c+"-ms-flex-line-pack"+c.replace("align-content","").replace(O,"")+c}break;case 973:case 989:if(45!==c.charCodeAt(3)||122===c.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):c.replace(s,"-webkit-"+s)+c.replace(s,"-moz-"+s.replace("fill-",""))+c;break;case 962:if(c="-webkit-"+c+(102===c.charCodeAt(5)?"-ms-"+c:"")+c,211===n+i&&105===c.charCodeAt(13)&&0<c.indexOf("transform",10))return c.substring(0,c.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+c}return c}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),T(2!==t?r:r.replace(k,"$1"),n,t)}function i(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function c(e,t,n,r,o,i,c,a,u,l){for(var f,d=0,p=t;d<P;++d)switch(f=M[d].call(s,e,p,n,r,o,i,c,a,u,l)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function a(e){return void 0!==(e=e.prefix)&&(T=null,e?"function"!=typeof e?C=1:(C=2,T=e):C=0),a}function s(e,n){var a=e;if(33>a.charCodeAt(0)&&(a=a.trim()),a=[a],0<P){var s=c(-1,n,a,a,E,_,0,0,0,0);void 0!==s&&"string"==typeof s&&(n=s)}var f=function e(n,a,s,f,d){for(var p,h,v,b,w,O=0,k=0,S=0,A=0,M=0,T=0,I=v=p=0,z=0,L=0,R=0,V=0,D=s.length,F=D-1,H="",$="",W="",B="";z<D;){if(h=s.charCodeAt(z),z===F&&0!==k+A+S+O&&(0!==k&&(h=47===k?10:47),A=S=O=0,D++,F++),0===k+A+S+O){if(z===F&&(0<L&&(H=H.replace(l,"")),0<H.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:H+=s.charAt(z)}h=59}switch(h){case 123:for(p=(H=H.trim()).charCodeAt(0),v=1,V=++z;z<D;){switch(h=s.charCodeAt(z)){case 123:v++;break;case 125:v--;break;case 47:switch(h=s.charCodeAt(z+1)){case 42:case 47:e:{for(I=z+1;I<F;++I)switch(s.charCodeAt(I)){case 47:if(42===h&&42===s.charCodeAt(I-1)&&z+2!==I){z=I+1;break e}break;case 10:if(47===h){z=I+1;break e}}z=I}}break;case 91:h++;case 40:h++;case 34:case 39:for(;z++<F&&s.charCodeAt(z)!==h;);}if(0===v)break;z++}switch(v=s.substring(V,z),0===p&&(p=(H=H.replace(u,"").trim()).charCodeAt(0)),p){case 64:switch(0<L&&(H=H.replace(l,"")),h=H.charCodeAt(1)){case 100:case 109:case 115:case 45:L=a;break;default:L=N}if(V=(v=e(a,L,v,h,d+1)).length,0<P&&(w=c(3,v,L=t(N,H,R),a,E,_,V,h,d,f),H=L.join(""),void 0!==w&&0===(V=(v=w.trim()).length)&&(h=0,v="")),0<V)switch(h){case 115:H=H.replace(x,i);case 100:case 109:case 45:v=H+"{"+v+"}";break;case 107:v=(H=H.replace(g,"$1 $2"))+"{"+v+"}",v=1===C||2===C&&o("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=H+v,112===f&&($+=v,v="")}else v="";break;default:v=e(a,t(a,H,R),v,f,d+1)}W+=v,v=R=L=I=p=0,H="",h=s.charCodeAt(++z);break;case 125:case 59:if(1<(V=(H=(0<L?H.replace(l,""):H).trim()).length))switch(0===I&&(p=H.charCodeAt(0),45===p||96<p&&123>p)&&(V=(H=H.replace(" ",":")).length),0<P&&void 0!==(w=c(1,H,a,n,E,_,$.length,f,d,f))&&0===(V=(H=w.trim()).length)&&(H="\0\0"),p=H.charCodeAt(0),h=H.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){B+=H+s.charAt(z);break}default:58!==H.charCodeAt(V-1)&&($+=r(H,p,h,H.charCodeAt(2)))}R=L=I=p=0,H="",h=s.charCodeAt(++z)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==f&&0<H.length&&(L=1,H+="\0"),0<P*q&&c(0,H,a,n,E,_,$.length,f,d,f),_=1,E++;break;case 59:case 125:if(0===k+A+S+O){_++;break}default:switch(_++,b=s.charAt(z),h){case 9:case 32:if(0===A+O+k)switch(M){case 44:case 58:case 9:case 32:b="";break;default:32!==h&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===A+k+O&&(L=R=1,b="\f"+b);break;case 108:if(0===A+k+O+j&&0<I)switch(z-I){case 2:112===M&&58===s.charCodeAt(z-3)&&(j=M);case 8:111===T&&(j=T)}break;case 58:0===A+k+O&&(I=z);break;case 44:0===k+S+A+O&&(L=1,b+="\r");break;case 34:case 39:0===k&&(A=A===h?0:0===A?h:A);break;case 91:0===A+k+S&&O++;break;case 93:0===A+k+S&&O--;break;case 41:0===A+k+O&&S--;break;case 40:if(0===A+k+O){if(0===p)switch(2*M+3*T){case 533:break;default:p=1}S++}break;case 64:0===k+S+A+O+I+v&&(v=1);break;case 42:case 47:if(!(0<A+O+S))switch(k){case 0:switch(2*h+3*s.charCodeAt(z+1)){case 235:k=47;break;case 220:V=z,k=42}break;case 42:47===h&&42===M&&V+2!==z&&(33===s.charCodeAt(V+2)&&($+=s.substring(V,z+1)),b="",k=0)}}0===k&&(H+=b)}T=M,M=h,z++}if(0<(V=$.length)){if(L=a,0<P&&(void 0!==(w=c(2,$,L,n,E,_,V,f,d,f))&&0===($=w).length))return B+$+W;if($=L.join(",")+"{"+$+"}",0!=C*j){switch(2!==C||o($,2)||(j=0),j){case 111:$=$.replace(y,":-moz-$1")+$;break;case 112:$=$.replace(m,"::-webkit-input-$1")+$.replace(m,"::-moz-$1")+$.replace(m,":-ms-input-$1")+$}j=0}}return B+$+W}(N,a,n,0,0);return 0<P&&(void 0!==(s=c(-2,f,a,a,E,_,f.length,0,0,0))&&(f=s)),"",j=0,_=E=1,f}var u=/^\0+/g,l=/[\0\r\f]/g,f=/: */g,d=/zoo|gra/,p=/([,: ])(transform)/g,h=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,m=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,O=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,A=/([^-])(image-set\()/,_=1,E=1,j=0,C=1,N=[],M=[],P=0,T=null,q=0;return s.use=function e(t){switch(t){case void 0:case null:P=M.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:M[P++]=t;break;case Boolean:q=0|!!t}}return e},s.set=a,void 0!==e&&a(e),s},a=n(45),s=n.n(a),u=/[A-Z]|^ms/g,l=r((function(e){return e.replace(u,"-$&").toLowerCase()})),f=function(e,t){return null==t||"boolean"==typeof t?"":1===o[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},d=function e(t){for(var n=t.length,r=0,o="";r<n;r++){var i=t[r];if(null!=i){var c=void 0;switch(typeof i){case"boolean":break;case"function":0,c=e([i()]);break;case"object":if(Array.isArray(i))c=e(i);else for(var a in c="",i)i[a]&&a&&(c&&(c+=" "),c+=a);break;default:c=i}c&&(o&&(o+=" "),o+=c)}}return o},p="undefined"!=typeof document;function h(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key||""),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),(void 0!==e.container?e.container:document.head).appendChild(t),t}var v=function(){function e(e){this.isSpeedy=!0,this.tags=[],this.ctr=0,this.opts=e}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.tags[0]=h(this.opts),this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=h(this.opts);this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(h(this.opts))},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0,this.injected=!1},e}();t.a=function(e,t){if(void 0!==e.__SECRET_EMOTION__)return e.__SECRET_EMOTION__;void 0===t&&(t={});var n,r,o=t.key||"css",a=s()((function(e){n+=e,p&&h.insert(e,m)}));void 0!==t.prefix&&(r={prefix:t.prefix});var u={registered:{},inserted:{},nonce:t.nonce,key:o},h=new v(t);p&&h.inject();var g=new c(r);g.use(t.stylisPlugins)(a);var m="";function y(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":if(void 0!==e.__emotion_styles){var n=e.toString();return n}return y.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return O.call(this,e);default:var r=u.registered[e];return!1===t&&void 0!==r?r:e}}var b,x,w=new WeakMap;function O(e){if(w.has(e))return w.get(e);var t="";return Array.isArray(e)?e.forEach((function(e){t+=y.call(this,e,!1)}),this):Object.keys(e).forEach((function(n){"object"!=typeof e[n]?void 0!==u.registered[e[n]]?t+=n+"{"+u.registered[e[n]]+"}":t+=l(n)+":"+f(n,e[n])+";":Array.isArray(e[n])&&"string"==typeof e[n][0]&&void 0===u.registered[e[n][0]]?e[n].forEach((function(e){t+=l(n)+":"+f(n,e)+";"})):t+=n+"{"+y.call(this,e[n],!1)+"}"}),this),w.set(e,t),t}var k=/label:\s*([^\s;\n{]+)\s*;/g,S=function(e,t){return i(e+t)+t},A=function(e){var t=!0,n="",r="";null==e||void 0===e.raw?(t=!1,n+=y.call(this,e,!1)):n+=e[0];for(var o=arguments.length,i=new Array(o>1?o-1:0),c=1;c<o;c++)i[c-1]=arguments[c];return i.forEach((function(r,o){n+=y.call(this,r,46===n.charCodeAt(n.length-1)),!0===t&&void 0!==e[o+1]&&(n+=e[o+1])}),this),x=n,n=n.replace(k,(function(e,t){return r+="-"+t,""})),b=S(n,r),n};function _(e,t){void 0===u.inserted[b]&&(n="",g(e,t),u.inserted[b]=n)}var E=function(){var e=A.apply(this,arguments),t=o+"-"+b;return void 0===u.registered[t]&&(u.registered[t]=x),_("."+t,e),t};function j(e,t){var n="";return t.split(" ").forEach((function(t){void 0!==u.registered[t]?e.push(t):n+=t+" "})),n}function C(e,t){var n=[],r=j(n,e);return n.length<2?e:r+E(n,t)}function N(e){u.inserted[e]=!0}if(p){var M=document.querySelectorAll("[data-emotion-"+o+"]");Array.prototype.forEach.call(M,(function(e){h.tags[0].parentNode.insertBefore(e,h.tags[0]),e.getAttribute("data-emotion-"+o).split(" ").forEach(N)}))}var P={flush:function(){p&&(h.flush(),h.inject()),u.inserted={},u.registered={}},hydrate:function(e){e.forEach(N)},cx:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return C(d(t))},merge:C,getRegisteredStyles:j,injectGlobal:function(){var e=A.apply(this,arguments);_("",e)},keyframes:function(){var e=A.apply(this,arguments),t="animation-"+b;return _("","@keyframes "+t+"{"+e+"}"),t},css:E,sheet:h,caches:u};return e.__SECRET_EMOTION__=P,P}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(31);t.default=class{constructor(e){const t=Array.isArray(e)?e:Array.from(e);this.size=t.length,this.cycle=r.default(t),this.cycle.next()}*[Symbol.iterator](){yield*Array.from(Array(this.size),(e,t)=>this.step(+!!t)),this.next()}step(e){return this.cycle.next(e).value}current(){return this.step(0)}prev(){return this.step(-1)}next(){return this.step(1)}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){},function(e,t,n){for(var r=n(51),o=n(21),i=n(14),c=n(2),a=n(3),s=n(23),u=n(1),l=u("iterator"),f=u("toStringTag"),d=s.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),v=0;v<h.length;v++){var g,m=h[v],y=p[m],b=c[m],x=b&&b.prototype;if(x&&(x[l]||a(x,l,d),x[f]||a(x,f,m),s[m]=d,y))for(g in r)x[g]||i(x,g,r[g],!0)}},function(e,t,n){"use strict";var r=n(52),o=n(53),i=n(23),c=n(11);e.exports=n(55)(Array,"Array",(function(e,t){this._t=c(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(1)("unscopables"),o=Array.prototype;null==o[r]&&n(3)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var r=n(19);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(17),o=n(20),i=n(14),c=n(3),a=n(23),s=n(58),u=n(28),l=n(63),f=n(1)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,v,g,m){s(n,t,h);var y,b,x,w=function(e){if(!d&&e in A)return A[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},O=t+" Iterator",k="values"==v,S=!1,A=e.prototype,_=A[f]||A["@@iterator"]||v&&A[v],E=_||w(v),j=v?k?w("entries"):E:void 0,C="Array"==t&&A.entries||_;if(C&&(x=l(C.call(new e)))!==Object.prototype&&x.next&&(u(x,O,!0),r||"function"==typeof x[f]||c(x,f,p)),k&&_&&"values"!==_.name&&(S=!0,E=function(){return _.call(this)}),r&&!m||!d&&!S&&A[f]||c(A,f,E),a[t]=E,a[O]=p,v)if(y={values:k?E:w("values"),keys:g?E:w("keys"),entries:j},m)for(b in y)b in A||i(A,b,y[b]);else o(o.P+o.F*(d||S),t,y);return y}},function(e,t,n){e.exports=n(15)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(34);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){"use strict";var r=n(35),o=n(18),i=n(28),c={};n(3)(c,n(1)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(c,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(8),o=n(4),i=n(21);e.exports=n(10)?Object.defineProperties:function(e,t){o(e);for(var n,c=i(t),a=c.length,s=0;a>s;)r.f(e,n=c[s++],t[n]);return e}},function(e,t,n){var r=n(11),o=n(24),i=n(61);e.exports=function(e){return function(t,n,c){var a,s=r(t),u=o(s.length),l=i(c,u);if(e&&n!=n){for(;u>l;)if((a=s[l++])!=a)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(25),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(6),o=n(37),i=n(26)("IE_PROTO"),c=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,t,n){"use strict";var r=n(4),o=n(24),i=n(38),c=n(39);n(40)("match",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var s=r(e),u=String(this);if(!s.global)return c(s,u);var l=s.unicode;s.lastIndex=0;for(var f,d=[],p=0;null!==(f=c(s,u));){var h=String(f[0]);d[p]=h,""===h&&(s.lastIndex=i(u,o(s.lastIndex),l)),p++}return 0===p?null:d}]}))},function(e,t,n){var r=n(25),o=n(13);e.exports=function(e){return function(t,n){var i,c,a=String(o(t)),s=r(n),u=a.length;return s<0||s>=u?e?"":void 0:(i=a.charCodeAt(s))<55296||i>56319||s+1===u||(c=a.charCodeAt(s+1))<56320||c>57343?e?a.charAt(s):i:e?a.slice(s,s+2):c-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(19),o=n(1)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,c;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(c=r(t))&&"function"==typeof t.callee?"Arguments":c}},function(e,t,n){"use strict";var r=n(29);n(20)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";n(70)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},function(e,t,n){var r=n(20),o=n(13),i=n(5),c=n(71),a="["+c+"]",s=RegExp("^"+a+a+"*"),u=RegExp(a+a+"*$"),l=function(e,t,n){var o={},a=i((function(){return!!c[e]()||"​"!="​"[e]()})),s=o[e]=a?t(f):c[e];n&&(o[n]=s),r(r.P+r.F*a,"String",o)},f=l.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(s,"")),2&t&&(e=e.replace(u,"")),e};e.exports=l},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){"use strict";var r=n(73),o=n(4),i=n(74),c=n(38),a=n(24),s=n(39),u=n(29),l=n(5),f=Math.min,d=[].push,p="length",h=!l((function(){RegExp(4294967295,"y")}));n(40)("split",2,(function(e,t,n,l){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[p]||2!="ab".split(/(?:ab)*/)[p]||4!=".".split(/(.?)(.?)/)[p]||".".split(/()()/)[p]>1||"".split(/.?/)[p]?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,c,a,s=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,h=void 0===t?4294967295:t>>>0,v=new RegExp(e.source,l+"g");(i=u.call(v,o))&&!((c=v.lastIndex)>f&&(s.push(o.slice(f,i.index)),i[p]>1&&i.index<o[p]&&d.apply(s,i.slice(1)),a=i[0][p],f=c,s[p]>=h));)v.lastIndex===i.index&&v.lastIndex++;return f===o[p]?!a&&v.test("")||s.push(""):s.push(o.slice(f)),s[p]>h?s.slice(0,h):s}:"0".split(void 0,0)[p]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):v.call(String(o),n,r)},function(e,t){var r=l(v,e,this,t,v!==n);if(r.done)return r.value;var u=o(e),d=String(this),p=i(u,RegExp),g=u.unicode,m=(u.ignoreCase?"i":"")+(u.multiline?"m":"")+(u.unicode?"u":"")+(h?"y":"g"),y=new p(h?u:"^(?:"+u.source+")",m),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===d.length)return null===s(y,d)?[d]:[];for(var x=0,w=0,O=[];w<d.length;){y.lastIndex=h?w:0;var k,S=s(y,h?d:d.slice(w));if(null===S||(k=f(a(y.lastIndex+(h?0:w)),d.length))===x)w=c(d,w,g);else{if(O.push(d.slice(x,w)),O.length===b)return O;for(var A=1;A<=S.length-1;A++)if(O.push(S[A]),O.length===b)return O;w=x=k}}return O.push(d.slice(x)),O}]}))},function(e,t,n){var r=n(9),o=n(19),i=n(1)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(4),o=n(34),i=n(1)("species");e.exports=function(e,t){var n,c=r(e).constructor;return void 0===c||null==(n=r(c)[i])?t:o(n)}},function(e,t,n){n(41)("asyncIterator")},function(e,t,n){"use strict";var r=n(2),o=n(6),i=n(10),c=n(20),a=n(14),s=n(77).KEY,u=n(5),l=n(15),f=n(28),d=n(12),p=n(1),h=n(42),v=n(41),g=n(78),m=n(79),y=n(4),b=n(9),x=n(37),w=n(11),O=n(22),k=n(18),S=n(35),A=n(80),_=n(81),E=n(43),j=n(8),C=n(21),N=_.f,M=j.f,P=A.f,T=r.Symbol,q=r.JSON,I=q&&q.stringify,z=p("_hidden"),L=p("toPrimitive"),R={}.propertyIsEnumerable,V=l("symbol-registry"),D=l("symbols"),F=l("op-symbols"),H=Object.prototype,$="function"==typeof T&&!!E.f,W=r.QObject,B=!W||!W.prototype||!W.prototype.findChild,G=i&&u((function(){return 7!=S(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=N(H,t);r&&delete H[t],M(e,t,n),r&&e!==H&&M(H,t,r)}:M,U=function(e){var t=D[e]=S(T.prototype);return t._k=e,t},J=$&&"symbol"==typeof T.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof T},K=function(e,t,n){return e===H&&K(F,t,n),y(e),t=O(t,!0),y(n),o(D,t)?(n.enumerable?(o(e,z)&&e[z][t]&&(e[z][t]=!1),n=S(n,{enumerable:k(0,!1)})):(o(e,z)||M(e,z,k(1,{})),e[z][t]=!0),G(e,t,n)):M(e,t,n)},X=function(e,t){y(e);for(var n,r=g(t=w(t)),o=0,i=r.length;i>o;)K(e,n=r[o++],t[n]);return e},Y=function(e){var t=R.call(this,e=O(e,!0));return!(this===H&&o(D,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(D,e)||o(this,z)&&this[z][e])||t)},Z=function(e,t){if(e=w(e),t=O(t,!0),e!==H||!o(D,t)||o(F,t)){var n=N(e,t);return!n||!o(D,t)||o(e,z)&&e[z][t]||(n.enumerable=!0),n}},Q=function(e){for(var t,n=P(w(e)),r=[],i=0;n.length>i;)o(D,t=n[i++])||t==z||t==s||r.push(t);return r},ee=function(e){for(var t,n=e===H,r=P(n?F:w(e)),i=[],c=0;r.length>c;)!o(D,t=r[c++])||n&&!o(H,t)||i.push(D[t]);return i};$||(a((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===H&&t.call(F,n),o(this,z)&&o(this[z],e)&&(this[z][e]=!1),G(this,e,k(1,n))};return i&&B&&G(H,e,{configurable:!0,set:t}),U(e)}).prototype,"toString",(function(){return this._k})),_.f=Z,j.f=K,n(44).f=A.f=Q,n(30).f=Y,E.f=ee,i&&!n(17)&&a(H,"propertyIsEnumerable",Y,!0),h.f=function(e){return U(p(e))}),c(c.G+c.W+c.F*!$,{Symbol:T});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=C(p.store),oe=0;re.length>oe;)v(re[oe++]);c(c.S+c.F*!$,"Symbol",{for:function(e){return o(V,e+="")?V[e]:V[e]=T(e)},keyFor:function(e){if(!J(e))throw TypeError(e+" is not a symbol!");for(var t in V)if(V[t]===e)return t},useSetter:function(){B=!0},useSimple:function(){B=!1}}),c(c.S+c.F*!$,"Object",{create:function(e,t){return void 0===t?S(e):X(S(e),t)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:ee});var ie=u((function(){E.f(1)}));c(c.S+c.F*ie,"Object",{getOwnPropertySymbols:function(e){return E.f(x(e))}}),q&&c(c.S+c.F*(!$||u((function(){var e=T();return"[null]"!=I([e])||"{}"!=I({a:e})||"{}"!=I(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!J(e))return m(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!J(t))return t}),r[1]=t,I.apply(q,r)}}),T.prototype[L]||n(3)(T.prototype,L,T.prototype.valueOf),f(T,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){var r=n(12)("meta"),o=n(9),i=n(6),c=n(8).f,a=0,s=Object.isExtensible||function(){return!0},u=!n(5)((function(){return s(Object.preventExtensions({}))})),l=function(e){c(e,r,{value:{i:"O"+ ++a,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!s(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!s(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return u&&f.NEED&&s(e)&&!i(e,r)&&l(e),e}}},function(e,t,n){var r=n(21),o=n(43),i=n(30);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var c,a=n(e),s=i.f,u=0;a.length>u;)s.call(e,c=a[u++])&&t.push(c);return t}},function(e,t,n){var r=n(19);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(11),o=n(44).f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return c&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return c.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(30),o=n(18),i=n(11),c=n(22),a=n(6),s=n(32),u=Object.getOwnPropertyDescriptor;t.f=n(10)?u:function(e,t){if(e=i(e),t=c(t,!0),s)try{return u(e,t)}catch(e){}if(a(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t){const n=[...document.querySelectorAll("h1.heading")].map(e=>({heading:e,arrow:e.querySelector("a.arrow"),up:e.querySelector("a.uparrow"),link:e.querySelector("a.link"),height:e.getBoundingClientRect().height})),r=document.querySelector("#projects .section-content"),o=document.querySelector("#about-heading"),i=o.getBoundingClientRect().height;o.style.height=i+"px";const c=parseInt(window.getComputedStyle(n[0].arrow).borderTopWidth,10);let a=0,s=!1,u=null;const l=({heading:e,link:t,arrow:r,height:o,up:i})=>{const{top:a}=e.getBoundingClientRect();null===u&&(u=window.innerHeight-n[0].heading.offsetTop-n[0].height);const s=Math.max(0,a/(window.innerHeight-u-o));t.style.fontSize=.8+.2*(1-s)+"em";const l=Math.max(0,s*c);r.style.setProperty("--size",l+"px");const f=Math.max(0,(1-s)*c);i.style.setProperty("--size",f+"px")},f=()=>{n.forEach(l);const e=r.getBoundingClientRect(),t=e.bottom-window.innerHeight+i>0,c=window.innerHeight-e.top-i+20<=0;o.classList.toggle("fixed",t),o.classList.toggle("static",c),e.top-i<=0?!window.paused&&window.playing&&(window.paused=!0,window.playing.pause()):window.paused&&(window.paused=!1,window.playing.play())};f(),window.addEventListener("scroll",()=>{a=window.scrollY,s||(window.requestAnimationFrame(()=>{f(),s=!1}),s=!0)}),document.querySelectorAll('a[href^="#"]').forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const n=e.getAttribute("href");window.history.pushState(null,null,n),document.querySelector(n).scrollIntoView({block:"start",behavior:"smooth"})})})},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n(0);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const i=new WeakMap,c=e=>"function"==typeof e&&i.has(e)
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */,a=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,s=(e,t,n=null)=>{let r=t;for(;r!==n;){const t=r.nextSibling;e.removeChild(r),r=t}},u={},l=`{{lit-${String(Math.random()).slice(2)}}}`,f=`\x3c!--${l}--\x3e`,d=new RegExp(`${l}|${f}`),p=(()=>{const e=document.createElement("div");return e.setAttribute("style","{{bad value}}"),"{{bad value}}"!==e.getAttribute("style")})();class h{constructor(e,t){this.parts=[],this.element=t;let n=-1,r=0;const o=[],i=t=>{const c=t.content,a=document.createTreeWalker(c,133,null,!1);let s,u;for(;a.nextNode();){n++,s=u;const t=u=a.currentNode;if(1===t.nodeType){if(t.hasAttributes()){const o=t.attributes;let i=0;for(let e=0;e<o.length;e++)o[e].value.indexOf(l)>=0&&i++;for(;i-- >0;){const o=e.strings[r],i=m.exec(o)[2],c=p&&"style"===i?"style$":/^[a-zA-Z-]*$/.test(i)?i:i.toLowerCase(),a=t.getAttribute(c).split(d);this.parts.push({type:"attribute",index:n,name:i,strings:a}),t.removeAttribute(c),r+=a.length-1}}"TEMPLATE"===t.tagName&&i(t)}else if(3===t.nodeType){const e=t.nodeValue;if(e.indexOf(l)<0)continue;const i=t.parentNode,c=e.split(d),a=c.length-1;r+=a;for(let e=0;e<a;e++)i.insertBefore(""===c[e]?g():document.createTextNode(c[e]),t),this.parts.push({type:"node",index:n++});i.insertBefore(""===c[a]?g():document.createTextNode(c[a]),t),o.push(t)}else if(8===t.nodeType)if(t.nodeValue===l){const e=t.parentNode,i=t.previousSibling;null===i||i!==s||i.nodeType!==Node.TEXT_NODE?e.insertBefore(g(),t):n--,this.parts.push({type:"node",index:n++}),o.push(t),null===t.nextSibling?e.insertBefore(g(),t):n--,u=s,r++}else{let e=-1;for(;-1!==(e=t.nodeValue.indexOf(l,e+1));)this.parts.push({type:"node",index:-1})}}};i(t);for(const e of o)e.parentNode.removeChild(e)}}const v=e=>-1!==e.index,g=()=>document.createComment(""),m=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class y{constructor(e,t,n){this._parts=[],this.template=e,this.processor=t,this._getTemplate=n}update(e){let t=0;for(const n of this._parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this._parts)void 0!==e&&e.commit()}_clone(){const e=a?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=this.template.parts;let n=0,r=0;const o=e=>{const i=document.createTreeWalker(e,133,null,!1);let c=i.nextNode();for(;n<t.length&&null!==c;){const e=t[n];if(v(e))if(r===e.index){if("node"===e.type){const e=this.processor.handleTextExpression(this._getTemplate);e.insertAfterNode(c),this._parts.push(e)}else this._parts.push(...this.processor.handleAttributeExpressions(c,e.name,e.strings));n++}else r++,"TEMPLATE"===c.nodeName&&o(c.content),c=i.nextNode();else this._parts.push(void 0),n++}};return o(e),a&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class b{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!0;for(let r=0;r<e;r++){const e=this.strings[r];t+=e;const o=e.lastIndexOf(">");n=(o>-1||n)&&-1===e.indexOf("<",o+1),!n&&p&&(t=t.replace(m,(e,t,n,r)=>"style"===n?`${t}style$${r}`:e)),t+=n?f:l}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const x=e=>null===e||!("object"==typeof e||"function"==typeof e);class w{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new O(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let r=0;r<t;r++){n+=e[r];const t=this.parts[r];if(void 0!==t){const e=t.value;if(null!=e&&(Array.isArray(e)||"string"!=typeof e&&e[Symbol.iterator]))for(const t of e)n+="string"==typeof t?t:String(t);else n+="string"==typeof e?e:String(e)}}return n+=e[t],n}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class O{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===u||x(e)&&e===this.value||(this.value=e,c(e)||(this.committer.dirty=!0))}commit(){for(;c(this.value);){const e=this.value;this.value=u,e(this)}this.value!==u&&this.committer.commit()}}class k{constructor(e){this.value=void 0,this._pendingValue=void 0,this.templateFactory=e}appendInto(e){this.startNode=e.appendChild(g()),this.endNode=e.appendChild(g())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e._insert(this.startNode=g()),e._insert(this.endNode=g())}insertAfterPart(e){e._insert(this.startNode=g()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this._pendingValue=e}commit(){for(;c(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}const e=this._pendingValue;e!==u&&(x(e)?e!==this.value&&this._commitText(e):e instanceof b?this._commitTemplateResult(e):e instanceof Node?this._commitNode(e):Array.isArray(e)||e[Symbol.iterator]?this._commitIterable(e):void 0!==e.then?this._commitPromise(e):this._commitText(e))}_insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}_commitNode(e){this.value!==e&&(this.clear(),this._insert(e),this.value=e)}_commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&t.nodeType===Node.TEXT_NODE?t.textContent=e:this._commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}_commitTemplateResult(e){const t=this.templateFactory(e);if(this.value&&this.value.template===t)this.value.update(e.values);else{const n=new y(t,e.processor,this.templateFactory),r=n._clone();n.update(e.values),this._commitNode(r),this.value=n}}_commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const o of e)n=t[r],void 0===n&&(n=new k(this.templateFactory),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(o),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}_commitPromise(e){this.value=e,e.then(t=>{this.value===e&&(this.setValue(t),this.commit())})}clear(e=this.startNode){s(this.startNode.parentNode,e.nextSibling,this.endNode)}}class S{constructor(e,t,n){if(this.value=void 0,this._pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this._pendingValue=e}commit(){for(;c(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}if(this._pendingValue===u)return;const e=!!this._pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)),this.value=e,this._pendingValue=u}}class A extends w{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new _(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class _ extends O{}class E{constructor(e,t){this.value=void 0,this._pendingValue=void 0,this.element=e,this.eventName=t}setValue(e){this._pendingValue=e}commit(){for(;c(this._pendingValue);){const e=this._pendingValue;this._pendingValue=u,e(this)}this._pendingValue!==u&&(null==this._pendingValue!=(null==this.value)&&(null==this._pendingValue?this.element.removeEventListener(this.eventName,this):this.element.addEventListener(this.eventName,this)),this.value=this._pendingValue,this._pendingValue=u)}handleEvent(e){"function"==typeof this.value?this.value.call(this.element,e):"function"==typeof this.value.handleEvent&&this.value.handleEvent(e)}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const j=new class{handleAttributeExpressions(e,t,n){const r=t[0];if("."===r){return new A(e,t.slice(1),n).parts}return"@"===r?[new E(e,t.slice(1))]:"?"===r?[new S(e,t.slice(1),n)]:new w(e,t,n).parts}handleTextExpression(e){return new k(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function C(e){let t=N.get(e.type);void 0===t&&(t=new Map,N.set(e.type,t));let n=t.get(e.strings);return void 0===n&&(n=new h(e,e.getTemplateElement()),t.set(e.strings,n)),n}const N=new Map,M=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function P(e,t,n=C){let r=M.get(t);void 0===r&&(s(t,t.firstChild),M.set(t,r=new k(n)),r.appendInto(t)),r.setValue(e),r.commit()}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const T=(e,...t)=>new b(e,t,"html",j);n(49);function q(){const e=R(["\n          visibility: hidden;\n        "]);return q=function(){return e},e}function I(){const e=R(["\n          // border: 1px solid #f06;\n        "]);return I=function(){return e},e}function z(){const e=R(["\n    position: relative;\n    width: var(--box);\n    height: var(--box);\n    background-color: ",";\n    --sh: 1px;\n    box-shadow: inset var(--sh) var(--sh) 0 0\n      rgba(255, 255, 255, 0.15);\n  "]);return z=function(){return e},e}function L(){const e=R(['<div class="Box '," ",'"></div>']);return L=function(){return e},e}function R(e,t){return t||(t=e.slice(0)),e.raw=t,e}var V=e=>t=>T(L(),Object(o.a)(z(),e),t?Object(o.a)(I()):Object(o.a)(q()));function D(){const e=W(["\n        display: flex;\n      "]);return D=function(){return e},e}function F(){const e=W(["<div class=",">","</div>"]);return F=function(){return e},e}function H(){const e=W(["\n    position: absolute;\n    top: calc(var(--box) * ",");\n    left: calc(var(--box) * ",");\n  "]);return H=function(){return e},e}function $(){const e=W(['\n  <div class="Shape ','"\n  data-x="','"\n  data-y="','"\n  data-height="','"\n  data-width="','"\n  data-turns="','"\n  >',"</div>\n"]);return $=function(){return e},e}function W(e,t){return t||(t=e.slice(0)),e.raw=t,e}var B=({shape:e,x:t,y:n,height:r,width:i,color:c,turns:a})=>T($(),Object(o.a)(H(),n,t),t,n,r,i,+a,e.map(e=>T(F(),Object(o.a)(D()),e.map(V(c)))));function G(){const e=Z(["\n          bottom: 0;\n        "]);return G=function(){return e},e}function U(){const e=Z(["\n          top: 0;\n        "]);return U=function(){return e},e}function J(){const e=Z(["\n      background: rgb(var(--bg));\n      position: absolute;\n      width: 100%;\n      height: var(--box);\n      opacity: 0;\n    "]);return J=function(){return e},e}function K(){const e=Z(["\n    position: relative;\n    width: 100%;\n    height: 100%;\n  "]);return K=function(){return e},e}function X(){const e=Z(["\n    position: relative;\n    margin-right: var(--box);\n    width: calc(var(--box) * ",");\n    height: calc(var(--box) * ",");\n    flex-shrink: 0;\n  "]);return X=function(){return e},e}function Y(){const e=Z(['<div class="Letter ','"\n    data-width="','"\n    data-height="','"\n  >\n  <div class="Letter-container ','">\n    ','\n    </div>\n    <div class="Cover '," ",'"></div>\n</div>']);return Y=function(){return e},e}function Z(e,t){return t||(t=e.slice(0)),e.raw=t,e}var Q=({boxes:e,width:t,height:n},r)=>({width:t,height:n,html:T(Y(),Object(o.a)(X(),t,n),t,n,Object(o.a)(K()),e.map(e=>B(e)),Object(o.a)(J()),r?Object(o.a)(U()):Object(o.a)(G()))});n(50);var ee=({width:e,group:t})=>t.map(({x1:t,x2:n})=>Array.from({length:e},(e,r)=>r<=n&&r>=t?1:0));n(64),n(69),n(72);const te=(...e)=>JSON.stringify(e);var ne=e=>{const t=e.split(/\n/).map(e=>e.trimRight()).filter(e=>e);return{width:Math.max(...t.map(({length:e})=>e)),height:t.length,segmentized:t.map(e=>e.match(/(.)\1*/g)).map((e,t)=>e.map((t,n)=>({char:t[0],length:t.length,x:e.slice(0,n).join("").length})).filter(({char:e})=>" "!==e).map(({char:e,length:n,x:r},o)=>({char:e,x1:r,x2:r+n-1,id:te(r,t),i:o,y:t})))}};var re=e=>e.map((e,t,n)=>e.map(e=>Object.assign({},e,{next:n[t+1]&&n[t+1].find(({char:t,x1:n,x2:r})=>t===e.char&&e.x1<=r&&n<=e.x2)})));const oe=["#004777","#a30000","#ff7700","#efd28d","#00afb5"],ie=new r.Circulator(oe),ce=new r.Circulator(oe),ae=Math.round(Math.random()*oe.length);ie.step(ae),ce.step(ae);n(75),n(76);const se=()=>{const e=window.getComputedStyle(document.body).getPropertyValue("--box"),t=parseInt(e,10),n=Math.round(e.endsWith("vw")?.01*window.innerWidth*t:t);return t!==n&&document.documentElement.style.setProperty("--box",n+"px"),n},ue=Symbol("log"),le=Symbol("log group");Object.assign(Object.prototype,{[ue](...e){return console.log(this,...e),this},[le](e,t=!1){return(...n)=>{console[t?"groupCollapsed":"group"](e);const r=this(...n);return console.groupEnd(),r}}});const fe=Symbol("play"),de=Symbol("of");Object.assign(Animation.prototype,{[fe](){return this.play(),this.finished}}),Animation[de]=e=>{const t=new Animation(e,document.timeline);return t.pause(),t};const pe=(e,t,n)=>{const r=Math.ceil(e),o=Math.floor(t);return Math.floor(n*(o-r+1))+r};var he=(e,t=!1,n)=>{const{segmentized:r,width:o,height:i}=ne(e),c=re(r),a=c.map(e=>e.map(({next:e})=>e).filter(e=>e).map(({id:e})=>e)),s=c.map(e=>e.filter(({id:e})=>!a.some(t=>t.includes(e)))),u=(e,t=[])=>{const n=t.concat(e);return e.next?u(c[e.next.y][e.next.i],n):n},l=t?ce:ie,f=s.map(e=>e.map(e=>u(e))).map(e=>e.map(e=>Object.assign({},e.reduce((e,t)=>({x1:Math.min(e.x1,t.x1),x2:Math.max(e.x2,t.x2)})),{y1:e[0].y,y2:e[e.length-1].y,group:e})).map(({x1:e,x2:t,y1:n,y2:r,group:o})=>({x:e,y:n,width:t-e+1,height:r-n+1,color:l.next(),group:o.map(t=>({x1:t.x1-e,x2:t.x2-e}))})).map(e=>Object.assign({},e,{shape:ee(e)})).map(e=>{const t=(r=e.shape,1===new Set(r.map(e=>JSON.stringify(e))).size);var r;const o=t&&(e=>e[0].length===e.length)(e.shape);return Object.assign({},e,{turns:pe(0,+o?0:+t?1:3,n.next())})}));return{boxes:((t?f.map(e=>e.map(e=>Object.assign({},e,{shape:e.shape.reverse(),y:i-e.y-e.height})).reverse()).reverse():null)||f).reduce((e,t)=>e.concat(t),[]),width:o,height:i}};function ve(){const e=we(["\n    display: flex;\n    width: ","px;\n  "]);return ve=function(){return e},e}function ge(){const e=we(["\n          align-items: flex-end;\n        "]);return ge=function(){return e},e}function me(){const e=we(["\n          opacity: 1;\n          align-items: flex-start;\n        "]);return me=function(){return e},e}function ye(){const e=we(['\n  <div class="Word \n  Word-mirror-',"\n  ","\n  ",'"\n    data-width="','"\n    data-height="','"\n  >\n  ',"\n  </div>"]);return ye=function(){return e},e}function be(){const e=we(["\n              width: ","px;\n            "]);return be=function(){return e},e}function xe(){const e=we(['<div class="','"></div>']);return xe=function(){return e},e}function we(e,t){return t||(t=e.slice(0)),e.raw=t,e}const Oe=Array.from({length:20},()=>Math.random());function ke(){const e=Ae(["\n    position: absolute;\n    transform: scaleY(-1);\n    left: -100%;\n  "]);return ke=function(){return e},e}function Se(){const e=Ae(['<img id="Mouse-','" class="Mouse ','" src="','">']);return Se=function(){return e},e}function Ae(e,t){return t||(t=e.slice(0)),e.raw=t,e}const _e=(...e)=>"data:image/svg+xml;base64,"+btoa(((e="#000000",t="#FFFFFF")=>'<svg xmlns="http://www.w3.org/2000/svg" width="28px" height="28px">,\n<defs>,\n  <filter id="f1" x="-50%" y="-50%" width="200%" height="200%">,\n    <feOffset result="offsetOut" in="SourceAlpha" dx="0" dy="1"/>,\n    <feGaussianBlur result="blurOut" in="offsetOut" stdDeviation="1"/>,\n    <feComponentTransfer result="opacityOut" in="blurOut">,\n      <feFuncA type="linear" slope="0.3"/>,\n    </feComponentTransfer>,\n    <feBlend in="SourceGraphic" in2="opacityOut" mode="normal"/>,\n  </filter>,\n</defs>,\n<polygon fill="'+e+'" points="4,18.5 4,2.5 15.5,14 11,14 13,19 9.5,20.5 7.25,15.25" filter="url(#f1)"/>,\n<polygon fill="'+t+'" points="5,16 7.5,13.5 10,19.125 11.625,18.5 9.5,13 13,13 5,5"/>,\n</svg>')(...e));function Ee(){const e=Me(["\n    position: relative;\n  "]);return Ee=function(){return e},e}function je(){const e=Me(["\n  position: absolute;\n  width: 100%;\n"]);return je=function(){return e},e}function Ce(){const e=Me(['\n<div class="MirrorWord ','">\n  <div class="Word-overlay ','"\n  @mousemove="','"\n  @mouseleave="','"\n  @mouseenter="','"\n  >','</div>\n  <div class="Word-overlay-mirror '," ",'">\n    ',"\n    ","\n  </div>\n</div>\n"]);return Ce=function(){return e},e}function Ne(){const e=Me(["\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n"]);return Ne=function(){return e},e}function Me(e,t){return t||(t=e.slice(0)),e.raw=t,e}const Pe=(e=>(t,n=!1)=>{const i=se(),c=[...t].map(t=>" "===t?{width:2,html:T(xe(),Object(o.a)(be(),2*i))}:Q(he(e[t],n,new r.Circulator(Oe)),n)),a=c.map(e=>e.width).reduce((e,t)=>e+t),s=Math.max(...c.map(e=>e.height||0));return T(ye(),n,n?Object(o.a)(me()):Object(o.a)(ge()),Object(o.a)(ve(),a*i+(c.length-1)*i),a,s,c.map(e=>e.html))})(Object.assign({a:"\n az\naazz\na  z\nd  c\nddcc\nd  c\n",b:"\nbbqq\nb  q\nbooq\nroov\nr  v\nrrvv\n",c:"\nccc\nx c\nx\nx\nx q\nqqq\n",d:"\nddcc\ndd c\nqq c\nqa r\nqa r\naarr\n",e:"\neee\ne\ncc\ncc\ne\neee\n",f:"\ncrrr\nc  r\ncc\ndd\nd\nd\n",g:"\niooo\ni  o\ni\ni dd\nc  d\ncccd\n",h:"\nl  h\nl  h\nllhh\nsscc\ns  c\ns  c\n",i:"\npp\npp\ndc\ndc\ndc\ndc\n",j:"\n ooo\n   o\n   p\n   p\nc  p\ncccp\n",k:"\nt  c\nt cc\nttc\nssd\ns dd\ns  d\n",l:"\nto\nto\nto\nto\nattt\naaat\n",m:"\ns  r\nssrr\ncsrc\nc  c\nc  c\nc  c\n",n:"\no  r\noo r\nxo r\nx pr\nx pp\nx  p\n",o:"\nookk\no  k\no  k\ns  t\ns  t\nsstt\n",p:"\npppr\np  r\no rr\no\no\no\n",q:"\nddds\nd  s\ns  s\ns  s\ns cc\ns cc\n",r:"\nddds\nd  s\ns  s\ns cs\ns cc\ns  c\n",s:"\nabbb\naa b\n a\n  d\na dd\naaad\n",t:"\nsscc\nsscc\n fo\n fo\n fo\n fo\n",u:"\nq  q\nq  q\nq  q\nq  q\npppp\nssss\n",v:"\nc  c\nc  c\nc  c\nc  c\n xx\n xx\n  ",w:"\nc  c  c\nc  c  c\nc  c  c\nc  c  c\n aa aa\n aa aa\n  ",z:"\nzzzs\nz ss\n  s\n a\naa c\naccc\n",x:"\nx  c\nxxcc\n xc\n pr\npprr\np  r\n",y:"\nc  r\nccrr\n cr\n oo\n oo\n"},{"č":"\n   oo\n   oo\nxxxxyyyy\n  ssoo\n  ssoo\n  qqzz\n  qqzz\n  t  t\n  t  t\n  tt tt\n","š":"\n   ccc\n  ffcdd\n ffzzzdd\n   qzx\n   q x\n   q x\n   q x\n","ž":"\naa         o o\n aa  zzzz fdaa\n  xxx    ff  aa\n   x      fzzzz\n   f     d\n apffzzzzoa \naapf    a aa\na p     aa a\n  p      a\n","ķ":"\nrr    \n r   kk\n rgggkk\n ppgpp\n p   p\n p   p\n","ģ":"\n x   q\nxxx qqq\nppdddpp\n ppdpp\n  ccc\n   c\n",".":"\nxx\nxx\n"})),Te=Object(o.a)(Ne());let qe=0;var Ie=(e,t=qe++)=>T(Ce(),Object(o.a)(je()),Te,({layerX:e,layerY:n})=>{const r=document.querySelector("#Mouse-"+t);r.style.left=e-5+"px",r.style.bottom=n-5+"px"},()=>{document.querySelector("#Mouse-"+t).style.display="none"},()=>{document.querySelector("#Mouse-"+t).style.display="block"},Pe(e),Object(o.a)(Ee()),Te,Pe(e,!0),(e=>T(Se(),e,Object(o.a)(ke()),_e()))(t)),ze={loop:1,mirror:1,drop:1,hide:1,speedFactor:2,hideDelay:3e3,texts:["welcome to nelabs.dev","č ķ ģ"],offsetAbs:200};const Le=se(),Re=(e,t=!1)=>{const n=[...e.querySelectorAll(".Shape")],r=e.getBoundingClientRect();t||n.reverse();const{offsetAbs:o}=ze,i=t?o:-o,c=n.map((e,c)=>{const a=e.getBoundingClientRect(),{speedFactor:s}=ze,u=+e.dataset.y,l=+e.dataset.x,f=+e.dataset.y,d=+e.dataset.height,p=+e.dataset.width,h=r.height/Le,v=(o/Le+(h-(t?u:h-u-d)))*Le,g=r.width/2,m=p*Le/2+l*Le,y=Math.abs(g-m),b=(...t)=>new KeyframeEffect(e,...t),x=r.width/2-a.width/2,w=b({opacity:[0,1]},{duration:100*s,fill:"both",easing:"ease-in"}),O=2*s,k=.55*s,S=100*s,A=+e.dataset.turns,_=S*A,E=t?-1:1,j=b([{transform:"rotate("+90*A*(c%2?-1:1)*E+"deg)"},{transform:"rotate(0)"}],{duration:_,fill:"both",composite:"add",easing:"ease-in-out",delay:30}),C=b({left:[x+"px",l*Le+"px"]},{duration:y*O,fill:"both",easing:"ease-in-out"}),N=Math.max(y,_/O),M=N*E,P=Math.max(N*O,_),T=b({top:[i+"px",i+M+"px"]},{duration:P,fill:"both"}),q=b({top:[i+M+"px",f*Le+"px"]},{duration:v*k-N*k,fill:"forwards",easing:"ease-in",endDelay:c+1===n.length?ze.hideDelay:0});return new SequenceEffect([w,new GroupEffect([C,T,j]),q])});return new SequenceEffect(c)},Ve={opacity:0},De={opacity:1},Fe=(e,t)=>{const n=e.querySelector(".Cover"),r=e.querySelector(".Letter-container"),o=+e.dataset.height,i=t?-1:1,c=Array.from({length:o},(e,t)=>{const o=new KeyframeEffect(r,[{top:t*Le*i+"px"},{top:(t+1)*Le*i+"px"}],{duration:100,easing:"ease-in",fill:"forwards"});return new SequenceEffect([(c=n,new KeyframeEffect(c,[Ve,De,Ve,De],{duration:250})),o]);var c});return new SequenceEffect(c)};n(82);function He(){const e=Be(["\n  cursor: url(",") 5 5, default;\n"]);return He=function(){return e},e}function $e(){const e=Be(["\n          flex-grow: 1;\n        "]);return $e=function(){return e},e}function We(){const e=Be(['\n      <div\n        class="Animation ','"\n      >\n        ',"\n      </div>\n    "]);return We=function(){return e},e}function Be(e,t){return t||(t=e.slice(0)),e.raw=t,e}const Ge=document.querySelector("#Animation-root");(()=>{P(T(We(),Object(o.a)($e()),ze.texts.map(Ie)),Ge);const e=[...document.querySelectorAll(".MirrorWord")],t=Object(r.Cycle)(e.map(e=>{const t=[...e.querySelectorAll(".Word-mirror-false .Letter")],n=[...e.querySelectorAll(".Word-mirror-true .Letter")],r=Animation[de](new GroupEffect(t.map(e=>new SequenceEffect([].concat(ze.drop?Re(e):[],ze.hide?Fe(e):[]))).concat(ze.mirror?n.map(e=>new SequenceEffect([].concat(ze.drop?Re(e,!0):[],ze.hide?Fe(e,!0):[]))):[])));return{word:e,letters:t,animation:r}}));e.forEach(e=>{e.style.display="none",e.style.position="relative"}),(async()=>{for(const{animation:e,word:n}of t)if(n.style.display="block",window.playing=e,await e[fe](),window.playing=null,n.style.display="none",!ze.loop)break})()})(),document.documentElement.classList.add(Object(o.a)(He(),_e()))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vtb3Rpb24vZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NpcmN1bGF0b3IvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NpcmN1bGF0b3IvZGlzdC9janMvc3JjL0N5Y2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWVtb3Rpb24vZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NpcmN1bGF0b3IvZGlzdC9janMvc3JjL0NpcmN1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL2RvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3BhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi90ZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvdGVtcGxhdGUtcmVzdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saWIvcGFydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGliL3RlbXBsYXRlLWZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpYi9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnNlL3NoYXBlLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJzZS9zZWdtZW50aXplLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJzZS9uZXh0aXplLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnNlL3BhcnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1dvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTW91c2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWlycm9yV29yZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGF0YS9hbHBoYWJldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGF0YS9zaGFwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYW5pbWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJ0eXBlIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImluc3RhbGxlZENodW5rcyIsImhvdERpc3Bvc2VDaHVuayIsImRlcGVuZGVuY3kiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsInNsaWNlIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJjb250ZXh0IiwiZ2xvYmFsIiwiX2NyZWF0ZUVtb3Rpb24iLCJjc3MiLCJmbHVzaCIsImh5ZHJhdGUiLCJjeCIsIm1lcmdlIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsImluamVjdEdsb2JhbCIsImtleWZyYW1lcyIsInNoZWV0IiwiY2FjaGVzIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsImRQIiwiY3JlYXRlRGVzYyIsImYiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiZXhlYyIsIkN5Y2xlXzEiLCJDeWNsZSIsImRlZmF1bHQiLCJDaXJjdWxhdG9yXzEiLCJDaXJjdWxhdG9yIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiSU9iamVjdCIsImRlZmluZWQiLCJweCIsInJhbmRvbSIsInRvU3RyaW5nIiwiaGlkZSIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiU3RyaW5nIiwidGhpcyIsImNvcmUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiX19lIiwiYml0bWFwIiwid3JpdGFibGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJVIiwiVyIsIlIiLCIka2V5cyIsImVudW1CdWdLZXlzIiwidmFsdWVPZiIsInRvSW50ZWdlciIsIm1pbiIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwic2hhcmVkIiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIlJlZ0V4cCIsIm5hdGl2ZVJlcGxhY2UiLCJyZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwic3RyIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJyZSIsImluZGV4IiwiYXJndW1lbnRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpdGVtcyIsImxlbiIsImlzIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImNvbnRlbnRXaW5kb3ciLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJhdCIsInVuaWNvZGUiLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJmYWlscyIsIndrcyIsInJlZ2V4cEV4ZWMiLCJTUEVDSUVTIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJLRVkiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJkb25lIiwic3RyZm4iLCJyeGZuIiwic3RyaW5nIiwiYXJnIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJjaGFyQXQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImluc2VydFJ1bGUiLCJ0b1NoZWV0IiwiYmxvY2siLCJjb250ZW50Iiwic2VsZWN0b3JzIiwibGluZSIsImNvbHVtbiIsImRlcHRoIiwiY2hhckNvZGVBdCIsImRlbGltaXRlciIsImZhY3RvcnkiLCJjYWNoZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImsiLCJYIiwidHJpbSIsImlhIiwiWiIsInYiLCJzdWJzdHJpbmciLCJ3IiwiTCIsImphIiwia2EiLCJ0ZXN0IiwiYWEiLCJiYSIsImxhIiwibWEiLCJuYSIsImVhIiwib2EiLCJIIiwicSIsImciLCJ4IiwiQSIsInByZWZpeCIsIkQiLCJ6IiwiTSIsInkiLCJDIiwiSyIsInUiLCJJIiwiSiIsIk4iLCJjYSIsImRhIiwiZmEiLCJZIiwiRSIsImhhIiwiUSIsInVzZSIsIlQiLCJBcnJheSIsIkJvb2xlYW4iLCJoeXBoZW5hdGVSZWdleCIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImNsYXNzbmFtZXMiLCJhcmdzIiwiY2xzIiwidG9BZGQiLCJpc0FycmF5IiwiaXNCcm93c2VyIiwibWFrZVN0eWxlVGFnIiwib3B0cyIsInNldEF0dHJpYnV0ZSIsIm5vbmNlIiwiY3JlYXRlVGV4dE5vZGUiLCJjb250YWluZXIiLCJTdHlsZVNoZWV0IiwiaXNTcGVlZHkiLCJ0YWdzIiwiY3RyIiwiX3Byb3RvIiwiaW5qZWN0IiwiaW5qZWN0ZWQiLCJzcGVlZHkiLCJib29sIiwiaW5zZXJ0IiwicnVsZSIsInNvdXJjZU1hcCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJjc3NSdWxlcyIsIl90YWciLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfX1NFQ1JFVF9FTU9USU9OX18iLCJjdXJyZW50Iiwic3R5bGlzT3B0aW9ucyIsImluc2VydGlvblBsdWdpbiIsImN1cnJlbnRTb3VyY2VNYXAiLCJyZWdpc3RlcmVkIiwiaW5zZXJ0ZWQiLCJzdHlsaXMiLCJzdHlsaXNQbHVnaW5zIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsImludGVycG9sYXRpb24iLCJjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsInNlbGVjdG9yIiwibWVyZ2VkUHJvcHMiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwiY2FjaGVkIiwic3R5bGVzV2l0aExhYmVsIiwib2JqZWN0VG9TdHJpbmdDYWNoZSIsIldlYWtNYXAiLCJvYmoiLCJsYWJlbFBhdHRlcm4iLCJjcmVhdGVDbGFzc05hbWUiLCJzdHlsZXMiLCJpZGVudGlmaWVyTmFtZSIsImNyZWF0ZVN0eWxlcyIsInN0cmluZ3MiLCJzdHJpbmdNb2RlIiwicmF3IiwiX2xlbiIsImludGVycG9sYXRpb25zIiwiX2tleSIsInAxIiwic2NvcGUiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsImNsYXNzTmFtZSIsImh5ZHJhdGVTaW5nbGVJZCIsImNodW5rcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJub2RlIiwiaW5zZXJ0QmVmb3JlIiwiZ2V0QXR0cmlidXRlIiwiZW1vdGlvbiIsImlkcyIsIl9sZW4yIiwiX2tleTIiLCJhbmltYXRpb24iLCJpdGVyYWJsZSIsImZyb20iLCJzaXplIiwiY3ljbGUiLCJuZXh0IiwiaXRlcmF0b3IiLCJfIiwic3RlcCIsIiRpdGVyYXRvcnMiLCJnZXRLZXlzIiwiSXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiTkFNRSIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsInByb3RvIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwia2luZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsImNvZiIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJDb25zdHJ1Y3RvciIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnRpZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIm1heCIsImRvY3VtZW50RWxlbWVudCIsInRvT2JqZWN0IiwiT2JqZWN0UHJvdG8iLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiTUFUQ0giLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJUT19TVFJJTkciLCJwb3MiLCJBUkciLCJ0cnlHZXQiLCJjYWxsZWUiLCJmb3JjZWQiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiJHRyaW0iLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJUWVBFIiwiaXNSZWdFeHAiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIkxFTkdUSCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJzZXBhcmF0b3IiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJmbGFncyIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwiREVTQ1JJUFRPUlMiLCJNRVRBIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCJnT1BEIiwiZ09QTiIsIiRKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsImlzRW51bSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJoZWFkaW5ncyIsImhlYWRpbmciLCJhcnJvdyIsInF1ZXJ5U2VsZWN0b3IiLCJ1cCIsImxpbmsiLCJoZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwcm9qZWN0cyIsImhlYWRpbmdXcmFwcGVyIiwiaGVhZGluZ0hlaWdodCIsImJvcmRlclNpemUiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJib3JkZXJUb3BXaWR0aCIsImxhc3RTY3JvbGwiLCJ0aWNraW5nIiwib2Zmc2V0IiwidXBkYXRlSGVhZGluZyIsInRvcCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0VG9wIiwicmF0aW8iLCJmb250U2l6ZSIsInNldFByb3BlcnR5IiwidXBTaXplIiwidXBkYXRlU2Nyb2xsIiwicHJvamVjdHNSZWN0IiwiZml4IiwiYm90dG9tIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicGF1c2VkIiwicGxheWluZyIsInBhdXNlIiwicGxheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzY3JvbGxZIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW5jaG9yIiwicHJldmVudERlZmF1bHQiLCJoYXNoIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJkaXJlY3RpdmVzIiwiaXNEaXJlY3RpdmUiLCJpc0NFUG9seWZpbGwiLCJjdXN0b21FbGVtZW50cyIsInBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2siLCJyZW1vdmVOb2RlcyIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJuZXh0U2libGluZyIsIm5vQ2hhbmdlIiwibWFya2VyIiwibm9kZU1hcmtlciIsIm1hcmtlclJlZ2V4IiwicmV3cml0ZXNTdHlsZUF0dHJpYnV0ZSIsIlRlbXBsYXRlIiwiZWxlbWVudCIsInBhcnRzIiwicGFydEluZGV4Iiwibm9kZXNUb1JlbW92ZSIsIl9wcmVwYXJlVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsIndhbGtlciIsImNyZWF0ZVRyZWVXYWxrZXIiLCJwcmV2aW91c05vZGUiLCJjdXJyZW50Tm9kZSIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImNvdW50Iiwic3RyaW5nRm9yUGFydCIsImxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgiLCJhdHRyaWJ1dGVMb29rdXBOYW1lIiwicmVtb3ZlQXR0cmlidXRlIiwidGFnTmFtZSIsIm5vZGVWYWx1ZSIsImNyZWF0ZU1hcmtlciIsInByZXZpb3VzU2libGluZyIsIk5vZGUiLCJURVhUX05PREUiLCJpc1RlbXBsYXRlUGFydEFjdGl2ZSIsInBhcnQiLCJjcmVhdGVDb21tZW50IiwicHJvY2Vzc29yIiwiZ2V0VGVtcGxhdGUiLCJfcGFydHMiLCJfZ2V0VGVtcGxhdGUiLCJzZXRWYWx1ZSIsImNvbW1pdCIsImZyYWdtZW50IiwiY2xvbmVOb2RlIiwiaW1wb3J0Tm9kZSIsIm5vZGVJbmRleCIsIl9wcmVwYXJlSW5zdGFuY2UiLCJoYW5kbGVUZXh0RXhwcmVzc2lvbiIsImluc2VydEFmdGVyTm9kZSIsImhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zIiwibm9kZU5hbWUiLCJhZG9wdE5vZGUiLCJ1cGdyYWRlIiwiaHRtbCIsImlzVGV4dEJpbmRpbmciLCJsYXN0SW5kZXhPZiIsInAyIiwicDMiLCJpbm5lckhUTUwiLCJnZXRIVE1MIiwiaXNQcmltaXRpdmUiLCJBdHRyaWJ1dGVDb21taXR0ZXIiLCJkaXJ0eSIsIl9jcmVhdGVQYXJ0IiwidGV4dCIsIl9nZXRWYWx1ZSIsImNvbWl0dGVyIiwiY29tbWl0dGVyIiwiZGlyZWN0aXZlIiwidGVtcGxhdGVGYWN0b3J5IiwiX3BlbmRpbmdWYWx1ZSIsInJlZiIsIl9pbnNlcnQiLCJfY29tbWl0VGV4dCIsIl9jb21taXRUZW1wbGF0ZVJlc3VsdCIsIl9jb21taXROb2RlIiwiX2NvbW1pdEl0ZXJhYmxlIiwiX2NvbW1pdFByb21pc2UiLCJjbGVhciIsInRleHRDb250ZW50IiwiaW5zdGFuY2UiLCJfY2xvbmUiLCJpdGVtUGFydHMiLCJpdGVtUGFydCIsImFwcGVuZEludG9QYXJ0IiwiaW5zZXJ0QWZ0ZXJQYXJ0IiwiUHJvcGVydHlDb21taXR0ZXIiLCJzdXBlciIsInNpbmdsZSIsIlByb3BlcnR5UGFydCIsImV2ZW50TmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImhhbmRsZUV2ZW50IiwiZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIiwidGVtcGxhdGVDYWNoZSIsInRlbXBsYXRlQ2FjaGVzIiwiTWFwIiwiZ2V0VGVtcGxhdGVFbGVtZW50IiwicmVuZGVyIiwiZmlyc3RDaGlsZCIsImFwcGVuZEludG8iLCJCb3giLCJjb2xvciIsInN0YXRlIiwiU2hhcGUiLCJzaGFwZSIsIndpZHRoIiwidHVybnMiLCJzZWdtZW50IiwiTGV0dGVyIiwiYm94ZXMiLCJtaXJyb3IiLCJib3giLCJncm91cCIsIngxIiwieDIiLCJ0dXBsZSIsInNlZ21lbnRpemUiLCJsaW5lcyIsInRyaW1SaWdodCIsImZpbHRlciIsInNlZ21lbnRpemVkIiwic2VnbWVudHMiLCJjaGFycyIsImNoYXIiLCJuZXh0aXplIiwic2VnbWVudGVkIiwiZmluZCIsImNvbG9ycyIsIm5vcm1hbFBhbGV0dGUiLCJtaXJyb3JQYWxldHRlIiwicm91bmQiLCJnZXRCb3hTaXplIiwiYm9keSIsImdldFByb3BlcnR5VmFsdWUiLCJlbmRzV2l0aCIsImlubmVyV2lkdGgiLCJsb2ciLCJsb2dHcm91cCIsImFzc2lnbiIsImxhYmVsIiwiY29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJvZiIsIkFuaW1hdGlvbiIsImZpbmlzaGVkIiwiZWZmZWN0IiwidGltZWxpbmUiLCJnZXRSYW5kb20iLCJfbWluIiwiX21heCIsInNlZWRzIiwibmV4dGl6ZWQiLCJuZXh0cyIsInJvdyIsInJvb3RzIiwic29tZSIsImluY2x1ZGVzIiwiZ2V0TmV4dCIsImN1cnIiLCJhY2MiLCJwYWxldHRlIiwicm9vdCIsInJlZHVjZSIsInkxIiwieTIiLCJzZW1pIiwieHMiLCJTZXQiLCJmdWxsIiwiaXNGdWxsIiwicmV2ZXJzZSIsInJhbmRvbXMiLCJjdXJzb3IiLCJidG9hIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsInN2ZyIsIkFscGhhYmV0V29yZCIsImJveFNpemUiLCJsZXR0ZXJzIiwibGV0dGVyIiwiV29yZCIsIsSNIiwixaEiLCLFviIsIsS3IiwixKMiLCJvdmVybGF5U3R5bGUiLCJNaXJyb3JXb3JkIiwibGF5ZXJYIiwibGF5ZXJZIiwibW91c2UiLCJsZWZ0IiwiTW91c2UiLCJsb29wIiwiZHJvcCIsInNwZWVkRmFjdG9yIiwiaGlkZURlbGF5IiwidGV4dHMiLCJvZmZzZXRBYnMiLCJhbmltYXRlTGV0dGVyIiwic2hhcGVzIiwibGV0dGVyUmVjdCIsImNvbmZpZyIsInNoYXBlU3RlcHMiLCJzaGFwZVJlY3QiLCJ5T2ZmIiwiZGF0YXNldCIsInNoYXBlWCIsInNoYXBlWSIsInNoYXBlSGVpZ2h0Iiwic2hhcGVXaWR0aCIsImxldHRlckhlaWdodCIsImZhbGxEaXN0YW5jZSIsIm9mZnNldExlZnQiLCJsZWZ0TWlkIiwic2xpZGVEaXN0YW5jZSIsImFicyIsIkVmZmVjdCIsIktleWZyYW1lRWZmZWN0IiwiaW5pdExlZnRPZmZzZXQiLCJmYWRlSW5FZmZlY3QiLCJkdXJhdGlvbiIsImZpbGwiLCJlYXNpbmciLCJiYXNlU3BlZWQiLCJhY3Rpb25TcGVlZCIsInR1cm5TcGVlZCIsInR1cm5EdXJhdGlvbiIsIm1pcnJvckRpciIsInJvdGF0ZUVmZmVjdCIsInRyYW5zZm9ybSIsImNvbXBvc2l0ZSIsImRlbGF5Iiwic2xpZGVFZmZlY3QiLCJwcmVEcm9wRGlzdGFuY2VBYnMiLCJwcmVEcm9wRGlzdGFuY2UiLCJwcmVEcm9wRHVyYXRpb24iLCJwcmVEcm9wRWZmZWN0IiwiZHJvcEVmZmVjdCIsImVuZERlbGF5IiwiU2VxdWVuY2VFZmZlY3QiLCJHcm91cEVmZmVjdCIsIm8wIiwibzEiLCJoaWRlTGV0dGVyIiwiY292ZXIiLCJzdGVwcyIsImxvd2VyIiwid29yZHMiLCJjaXJjdWxhcldvcmRzIiwid29yZCIsIm1pcnJvcnMiLCJwb3NpdGlvbiIsInNldHVwQW5pbWF0aW9uIiwiYWRkIl0sIm1hcHBpbmdzIjoiYUFHRSxJQUFJQSxFQUEwQkMsT0FBeUIsaUJBQ3ZEQSxPQUF5QixpQkFDekIsU0FBa0NDLEVBQVNDLElBK1EzQyxTQUEyQkQsRUFBU0MsR0FDbkMsSUFBS0MsRUFBcUJGLEtBQWFHLEVBQXFCSCxHQUMzRCxPQUVELElBQUssSUFBSUksS0FEVEQsRUFBcUJILElBQVcsRUFDWEMsRUFDaEJJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQWFHLEtBQ3JESyxFQUFVTCxHQUFZSCxFQUFZRyxJQUdWLEtBQXBCTSxHQUE4QyxJQUFyQkMsR0FDOUJDLElBeFJEQyxDQUFrQmIsRUFBU0MsR0FDdkJILEdBQXlCQSxFQUF3QkUsRUFBU0MsSUF1RC9ELElBS0lhLEVBTEFDLEdBQW1CLEVBRW5CQyxFQUFpQix1QkFFakJDLEVBQXVCLEdBR3ZCQyxFQUFvQixHQUVwQkMsRUFBd0IsR0FHNUIsU0FBU0MsRUFBaUJoQixHQUN6QixJQUFJaUIsRUFBS0MsRUFBaUJsQixHQUMx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QUFNQyxRQUFYLFFBQ0txckIsR0FBT1QsS0FDVixPQVJELElBY1A0RCxHQUVBbDdCLFNBQVMyZ0IsZ0JBQWdCZ0osVUFBVXdSLElBQUlqMkIsWUFBdkMsS0FDZ0I4d0IiLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0aWYgKG51bGwpIHNjcmlwdC5jcm9zc09yaWdpbiA9IG51bGw7XG4gXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJkMDQwMzk0YTc0OTNiYTJiYTdmNVwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbiBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbiBcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmVcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoODMpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgzKTtcbiIsImltcG9ydCBjcmVhdGVFbW90aW9uIGZyb20gJ2NyZWF0ZS1lbW90aW9uJztcblxudmFyIGNvbnRleHQgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG52YXIgX2NyZWF0ZUVtb3Rpb24gPSBjcmVhdGVFbW90aW9uKGNvbnRleHQpLFxuICAgIGZsdXNoID0gX2NyZWF0ZUVtb3Rpb24uZmx1c2gsXG4gICAgaHlkcmF0ZSA9IF9jcmVhdGVFbW90aW9uLmh5ZHJhdGUsXG4gICAgY3ggPSBfY3JlYXRlRW1vdGlvbi5jeCxcbiAgICBtZXJnZSA9IF9jcmVhdGVFbW90aW9uLm1lcmdlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXMgPSBfY3JlYXRlRW1vdGlvbi5nZXRSZWdpc3RlcmVkU3R5bGVzLFxuICAgIGluamVjdEdsb2JhbCA9IF9jcmVhdGVFbW90aW9uLmluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXMgPSBfY3JlYXRlRW1vdGlvbi5rZXlmcmFtZXMsXG4gICAgY3NzID0gX2NyZWF0ZUVtb3Rpb24uY3NzLFxuICAgIHNoZWV0ID0gX2NyZWF0ZUVtb3Rpb24uc2hlZXQsXG4gICAgY2FjaGVzID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGVzO1xuXG5leHBvcnQgeyBmbHVzaCwgaHlkcmF0ZSwgY3gsIG1lcmdlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbmplY3RHbG9iYWwsIGtleWZyYW1lcywgY3NzLCBzaGVldCwgY2FjaGVzIH07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBDeWNsZV8xID0gcmVxdWlyZShcIi4vc3JjL0N5Y2xlXCIpO1xuZXhwb3J0cy5DeWNsZSA9IEN5Y2xlXzEuZGVmYXVsdDtcbmNvbnN0IENpcmN1bGF0b3JfMSA9IHJlcXVpcmUoXCIuL3NyYy9DaXJjdWxhdG9yXCIpO1xuZXhwb3J0cy5DaXJjdWxhdG9yID0gQ2lyY3VsYXRvcl8xLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEhWRFFVRXJRanRCUVVrM1FpeG5Ra0ZLU3l4bFFVRkxMRU5CU1V3N1FVRklVQ3hwUkVGQmVVTTdRVUZKZGtNc2NVSkJTa3NzYjBKQlFWVXNRMEZKVENKOSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBBIGdlbmVyYXRvciBmb3IgY3ljbGluZyBhbiBhcnJheSBpbiBib3RoIGRpcmVjdGlvbnNcbiAqL1xuY29uc3QgQ3ljbGUgPSBmdW5jdGlvbiogKGl0ZW1zKSB7XG4gICAgY29uc3QgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpID0gKGxlbiArIGkgKyAoKHlpZWxkIGl0ZW1zW2ldKSB8fCAxKSkgJSBsZW47XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEN5Y2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUTNsamJHVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZRM2xqYkdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN1IwRkZSenRCUVVOSUxFMUJRVTBzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4RlFVRkxMRXRCUVZVN1NVRkRjRU1zVFVGQlRTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRVHRKUVVONFFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRWQ3hQUVVGUExFbEJRVWtzUlVGQlJUdFJRVU5ZTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVFN1MwRkRPVU03UVVGRFNDeERRVUZETEVOQlFVRTdRVUZKUkN4clFrRkJaU3hMUVVGTExFTkJRVUVpZlE9PSIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG5cdFx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdFx0Ly8gcHJvcGVydHlcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdC8vIEBpbXBvcnRcblx0XHRcdFx0XHRpZiAoZGVwdGggPT09IDAgJiYgY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NClcblx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKGNvbnRlbnQrJzsnKSwgJydcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBzZWxlY3RvclxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKG5zID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXJcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBhdC1ydWxlXG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRzd2l0Y2ggKG5zKSB7XG5cdFx0XHRcdFx0XHQvLyBAZm9udC1mYWNlLCBAcGFnZVxuXHRcdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRjYXNlIDExMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdK2NvbnRlbnQpLCAnJ1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyAoYXQgPT09IDAgPyBkZWxpbWl0ZXIgOiAnJylcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgLTI6XG5cdFx0XHRcdFx0Y29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldClcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pKVxuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBtdXJtdXJoYXNoMiB2aWEgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzL2Jsb2IvbWFzdGVyL211cm11cmhhc2gyX2djLmpzXG5mdW5jdGlvbiBtdXJtdXJoYXNoMl8zMl9nYyhzdHIpIHtcbiAgdmFyIGwgPSBzdHIubGVuZ3RoLFxuICAgICAgaCA9IGwgXiBsLFxuICAgICAgaSA9IDAsXG4gICAgICBrO1xuXG4gIHdoaWxlIChsID49IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9IChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChrID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gICAgayBePSBrID4+PiAyNDtcbiAgICBrID0gKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KSBeIGs7XG4gICAgbCAtPSA0O1xuICAgICsraTtcbiAgfVxuXG4gIHN3aXRjaCAobCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9IChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKChoID4+PiAxNikgKiAweDViZDFlOTk1ICYgMHhmZmZmKSA8PCAxNik7XG4gIH1cblxuICBoIF49IGggPj4+IDEzO1xuICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIChoID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cmhhc2gyXzMyX2djO1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlLCBtKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUsIG0pLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3dpdGNoIChkLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwLCBlID0gZC5sZW5ndGg7IGMgPCBlOyArK2MpIHtcbiAgICAgICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uOlxuICAgICAgICAgICAgU1tBKytdID0gZDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgICAgWSA9ICEhZCB8IDA7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCBTdHlsaXMgZnJvbSAnQGVtb3Rpb24vc3R5bGlzJztcbmltcG9ydCBzdHlsaXNSdWxlU2hlZXQgZnJvbSAnc3R5bGlzLXJ1bGUtc2hlZXQnO1xuXG52YXIgaHlwaGVuYXRlUmVnZXggPSAvW0EtWl18Xm1zL2c7XG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IG1lbW9pemUoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gc3R5bGVOYW1lLnJlcGxhY2UoaHlwaGVuYXRlUmVnZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYga2V5LmNoYXJDb2RlQXQoMSkgIT09IDQ1ICYmIC8vIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNvbnRlbnRWYWx1ZVBhdHRlcm4gPSAvKGF0dHJ8Y2FsY3xjb3VudGVycz98dXJsKVxcKC87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdjb3VudGVyJywgJ29wZW4tcXVvdGUnLCAnY2xvc2UtcXVvdGUnLCAnbm8tb3Blbi1xdW90ZScsICduby1jbG9zZS1xdW90ZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuICB9O1xufVxuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignUGFzc2luZyBmdW5jdGlvbnMgdG8gY3ggaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgRW1vdGlvbi5cXG4nICsgJ1BsZWFzZSBjYWxsIHRoZSBmdW5jdGlvbiBiZWZvcmUgcGFzc2luZyBpdCB0byBjeC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhbYXJnKCldKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICB0b0FkZCA9IGNsYXNzbmFtZXMoYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9BZGQgPSAnJztcblxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSAmJiBrKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgJiYgKHRvQWRkICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0b0FkZCA9IGFyZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b0FkZCkge1xuICAgICAgY2xzICYmIChjbHMgKz0gJyAnKTtcbiAgICAgIGNscyArPSB0b0FkZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xzO1xufTtcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKlxuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2Vcbi0gJ3BvbHlmaWxscycgb24gc2VydmVyIHNpZGVcblxuLy8gdXNhZ2VcblxuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnZ2xhbW9yL2xpYi9zaGVldCdcbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoKVxuXG5zdHlsZVNoZWV0LmluamVjdCgpXG4tICdpbmplY3RzJyB0aGUgc3R5bGVzaGVldCBpbnRvIHRoZSBwYWdlIChvciBpbnRvIG1lbW9yeSBpZiBvbiBzZXJ2ZXIpXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZVRhZyhvcHRzKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRzLmtleSB8fCAnJyk7XG5cbiAgaWYgKG9wdHMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0cy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKSAvLyAkRmxvd0ZpeE1lXG4gIDtcbiAgKG9wdHMuY29udGFpbmVyICE9PSB1bmRlZmluZWQgPyBvcHRzLmNvbnRhaW5lciA6IGRvY3VtZW50LmhlYWQpLmFwcGVuZENoaWxkKHRhZyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdGhpcy5pc1NwZWVkeSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7IC8vIHRoZSBiaWcgZHJhd2JhY2sgaGVyZSBpcyB0aGF0IHRoZSBjc3Mgd29uJ3QgYmUgZWRpdGFibGUgaW4gZGV2dG9vbHNcblxuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm9wdHMgPSBvcHRpb25zO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgaWYgKHRoaXMuaW5qZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBpbmplY3RlZCEnKTtcbiAgICB9XG5cbiAgICB0aGlzLnRhZ3NbMF0gPSBtYWtlU3R5bGVUYWcodGhpcy5vcHRzKTtcbiAgICB0aGlzLmluamVjdGVkID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uc3BlZWR5ID0gZnVuY3Rpb24gc3BlZWR5KGJvb2wpIHtcbiAgICBpZiAodGhpcy5jdHIgIT09IDApIHtcbiAgICAgIC8vIGNhbm5vdCBjaGFuZ2Ugc3BlZWR5IG1vZGUgYWZ0ZXIgaW5zZXJ0aW5nIGFueSBydWxlIHRvIHNoZWV0LiBFaXRoZXIgY2FsbCBzcGVlZHkoJHtib29sfSkgZWFybGllciBpbiB5b3VyIGFwcCwgb3IgY2FsbCBmbHVzaCgpIGJlZm9yZSBzcGVlZHkoJHtib29sfSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBjaGFuZ2Ugc3BlZWR5IG5vd1wiKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gISFib29sO1xuICB9O1xuXG4gIF9wcm90by5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQocnVsZSwgc291cmNlTWFwKSB7XG4gICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ2lsbGVnYWwgcnVsZScsIHJ1bGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3RhZyA9IG1ha2VTdHlsZVRhZyh0aGlzLm9wdHMpO1xuXG4gICAgICB0aGlzLnRhZ3MucHVzaChfdGFnKTtcblxuICAgICAgX3RhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlICsgKHNvdXJjZU1hcCB8fCAnJykpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuXG4gICAgaWYgKHRoaXMuY3RyICUgNjUwMDAgPT09IDApIHtcbiAgICAgIHRoaXMudGFncy5wdXNoKG1ha2VTdHlsZVRhZyh0aGlzLm9wdHMpKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDsgLy8gdG9kbyAtIGxvb2sgZm9yIHJlbW5hbnRzIGluIGRvY3VtZW50LnN0eWxlU2hlZXRzXG5cbiAgICB0aGlzLmluamVjdGVkID0gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoY29udGV4dC5fX1NFQ1JFVF9FTU9USU9OX18gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjb250ZXh0Ll9fU0VDUkVUX0VNT1RJT05fXztcbiAgfVxuXG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5IHx8ICdjc3MnO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50O1xuXG4gIGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGN1cnJlbnQgKz0gcnVsZTtcblxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHNoZWV0Lmluc2VydChydWxlLCBjdXJyZW50U291cmNlTWFwKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0aW9uUGx1Z2luID0gc3R5bGlzUnVsZVNoZWV0KGluc2VydFJ1bGUpO1xuICB2YXIgc3R5bGlzT3B0aW9ucztcblxuICBpZiAob3B0aW9ucy5wcmVmaXggIT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxpc09wdGlvbnMgPSB7XG4gICAgICBwcmVmaXg6IG9wdGlvbnMucHJlZml4XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZXMgPSB7XG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0ZWQ6IHt9LFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGtleToga2V5XG4gIH07XG4gIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KG9wdGlvbnMpO1xuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAvLyDwn5qAXG4gICAgc2hlZXQuaW5qZWN0KCk7XG4gIH1cblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhzdHlsaXNPcHRpb25zKTtcbiAgc3R5bGlzLnVzZShvcHRpb25zLnN0eWxpc1BsdWdpbnMpKGluc2VydGlvblBsdWdpbik7XG4gIHZhciBjdXJyZW50U291cmNlTWFwID0gJyc7XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKSB7XG4gICAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gJyc7XG5cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gaW50ZXJwb2xhdGlvbi50b1N0cmluZygpO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludGVycG9sYXRpbmcgZnVuY3Rpb25zIGluIGNzcyBjYWxscyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBFbW90aW9uLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIHRoaXMgPT09IHVuZGVmaW5lZCA/IGludGVycG9sYXRpb24oKSA6IC8vICRGbG93Rml4TWVcbiAgICAgICAgaW50ZXJwb2xhdGlvbih0aGlzLm1lcmdlZFByb3BzLCB0aGlzLmNvbnRleHQpLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKTtcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QuY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIGNhY2hlZCA9IGNhY2hlcy5yZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICAgICAgICByZXR1cm4gY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiA9PT0gZmFsc2UgJiYgY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvYmplY3RUb1N0cmluZ0NhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG9iaikge1xuICAgIGlmIChvYmplY3RUb1N0cmluZ0NhY2hlLmhhcyhvYmopKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmdDYWNoZS5nZXQob2JqKTtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbikge1xuICAgICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIGludGVycG9sYXRpb24sIGZhbHNlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialtrZXldICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlmIChjYWNoZXMucmVnaXN0ZXJlZFtvYmpba2V5XV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3RyaW5nICs9IGtleSArIFwie1wiICsgY2FjaGVzLnJlZ2lzdGVyZWRbb2JqW2tleV1dICsgXCJ9XCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKGtleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgb2JqW2tleV0pICsgXCI7XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tleV0pICYmIHR5cGVvZiBvYmpba2V5XVswXSA9PT0gJ3N0cmluZycgJiYgY2FjaGVzLnJlZ2lzdGVyZWRbb2JqW2tleV1bMF1dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9ialtrZXldLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKGtleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaW5nICs9IGtleSArIFwie1wiICsgaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIG9ialtrZXldLCBmYWxzZSkgKyBcIn1cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIG9iamVjdFRvU3RyaW5nQ2FjaGUuc2V0KG9iaiwgc3RyaW5nKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgdmFyIG5hbWU7XG4gIHZhciBzdHlsZXNXaXRoTGFiZWw7XG4gIHZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKjsvZztcblxuICB2YXIgY3JlYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gY3JlYXRlQ2xhc3NOYW1lKHN0eWxlcywgaWRlbnRpZmllck5hbWUpIHtcbiAgICByZXR1cm4gaGFzaFN0cmluZyhzdHlsZXMgKyBpZGVudGlmaWVyTmFtZSkgKyBpZGVudGlmaWVyTmFtZTtcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvbGRDcmVhdGVDbGFzc05hbWUgPSBjcmVhdGVDbGFzc05hbWU7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmdVcmxQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG5cbiAgICBjcmVhdGVDbGFzc05hbWUgPSBmdW5jdGlvbiBjcmVhdGVDbGFzc05hbWUoc3R5bGVzLCBpZGVudGlmaWVyTmFtZSkge1xuICAgICAgcmV0dXJuIG9sZENyZWF0ZUNsYXNzTmFtZShzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBwaW5nVXJsUGF0dGVybiwgZnVuY3Rpb24gKHNvdXJjZU1hcCkge1xuICAgICAgICBjdXJyZW50U291cmNlTWFwID0gc291cmNlTWFwO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KSwgaWRlbnRpZmllck5hbWUpO1xuICAgIH07XG4gIH1cblxuICB2YXIgY3JlYXRlU3R5bGVzID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0cmluZ3MpIHtcbiAgICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gICAgdmFyIHN0eWxlcyA9ICcnO1xuICAgIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuXG4gICAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIHN0cmluZ3MsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpbnRlcnBvbGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uLCBpKSB7XG4gICAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIGludGVycG9sYXRpb24sIHN0eWxlcy5jaGFyQ29kZUF0KHN0eWxlcy5sZW5ndGggLSAxKSA9PT0gNDYgLy8gLlxuICAgICAgKTtcblxuICAgICAgaWYgKHN0cmluZ01vZGUgPT09IHRydWUgJiYgc3RyaW5nc1tpICsgMV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpICsgMV07XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgc3R5bGVzV2l0aExhYmVsID0gc3R5bGVzO1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKGxhYmVsUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoLCBwMSkge1xuICAgICAgaWRlbnRpZmllck5hbWUgKz0gXCItXCIgKyBwMTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgICBuYW1lID0gY3JlYXRlQ2xhc3NOYW1lKHN0eWxlcywgaWRlbnRpZmllck5hbWUpO1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgb2xkU3R5bGlzID0gc3R5bGlzO1xuXG4gICAgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpIHtcbiAgICAgIG9sZFN0eWxpcyhzZWxlY3Rvciwgc3R5bGVzKTtcbiAgICAgIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0KHNjb3BlLCBzdHlsZXMpIHtcbiAgICBpZiAoY2FjaGVzLmluc2VydGVkW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnQgPSAnJztcbiAgICAgIHN0eWxpcyhzY29wZSwgc3R5bGVzKTtcbiAgICAgIGNhY2hlcy5pbnNlcnRlZFtuYW1lXSA9IGN1cnJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5ICsgXCItXCIgKyBuYW1lO1xuXG4gICAgaWYgKGNhY2hlcy5yZWdpc3RlcmVkW3NlbGVjdG9yXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZXMucmVnaXN0ZXJlZFtzZWxlY3Rvcl0gPSBzdHlsZXNXaXRoTGFiZWw7XG4gICAgfVxuXG4gICAgaW5zZXJ0KFwiLlwiICsgc2VsZWN0b3IsIHN0eWxlcyk7XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xuXG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBhbmltYXRpb24gPSBcImFuaW1hdGlvbi1cIiArIG5hbWU7XG4gICAgaW5zZXJ0KCcnLCBcIkBrZXlmcmFtZXMgXCIgKyBhbmltYXRpb24gKyBcIntcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICByZXR1cm4gYW5pbWF0aW9uO1xuICB9O1xuXG4gIHZhciBpbmplY3RHbG9iYWwgPSBmdW5jdGlvbiBpbmplY3RHbG9iYWwoKSB7XG4gICAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGluc2VydCgnJywgc3R5bGVzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gICAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKGNhY2hlcy5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UoY2xhc3NOYW1lLCBzb3VyY2VNYXApIHtcbiAgICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICAgIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcywgc291cmNlTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN4KCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NOYW1lcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgY2xhc3NOYW1lc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjbGFzc25hbWVzKGNsYXNzTmFtZXMpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh5ZHJhdGVTaW5nbGVJZChpZCkge1xuICAgIGNhY2hlcy5pbnNlcnRlZFtpZF0gPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgICBpZHMuZm9yRWFjaChoeWRyYXRlU2luZ2xlSWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICAgIHNoZWV0LmluamVjdCgpO1xuICAgIH1cblxuICAgIGNhY2hlcy5pbnNlcnRlZCA9IHt9O1xuICAgIGNhY2hlcy5yZWdpc3RlcmVkID0ge307XG4gIH1cblxuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgdmFyIGNodW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1lbW90aW9uLVwiICsga2V5ICsgXCJdXCIpO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoY2h1bmtzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgc2hlZXQudGFnc1swXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBzaGVldC50YWdzWzBdKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvbi1cIiArIGtleSkuc3BsaXQoJyAnKS5mb3JFYWNoKGh5ZHJhdGVTaW5nbGVJZCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgZW1vdGlvbiA9IHtcbiAgICBmbHVzaDogZmx1c2gsXG4gICAgaHlkcmF0ZTogaHlkcmF0ZSxcbiAgICBjeDogY3gsXG4gICAgbWVyZ2U6IG1lcmdlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXM6IGdldFJlZ2lzdGVyZWRTdHlsZXMsXG4gICAgaW5qZWN0R2xvYmFsOiBpbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgY3NzOiBjc3MsXG4gICAgc2hlZXQ6IHNoZWV0LFxuICAgIGNhY2hlczogY2FjaGVzXG4gIH07XG4gIGNvbnRleHQuX19TRUNSRVRfRU1PVElPTl9fID0gZW1vdGlvbjtcbiAgcmV0dXJuIGVtb3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVtb3Rpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEN5Y2xlXzEgPSByZXF1aXJlKFwiLi9DeWNsZVwiKTtcbmNsYXNzIENpcmN1bGF0b3Ige1xuICAgIC8qKlxuICAgICAqIFdyYXAgYW4gaXRlcmFibGUgYW5kIGFsbG93IGN5Y2xpbmcgaXRzIGVsZW1lbnRzIGluZmluaXRlbHlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpdGVyYWJsZSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IEFycmF5LmlzQXJyYXkoaXRlcmFibGUpID8gaXRlcmFibGUgOiBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbiAgICAgICAgdGhpcy5zaXplID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmN5Y2xlID0gQ3ljbGVfMS5kZWZhdWx0KGl0ZW1zKTtcbiAgICAgICAgLy8gSW5pdCBuZXdib3JuIGdlbmVyYXRvclxuICAgICAgICB0aGlzLmN5Y2xlLm5leHQoKTtcbiAgICB9XG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICB5aWVsZCogQXJyYXkuZnJvbShBcnJheSh0aGlzLnNpemUpLCAoXywgaSkgPT4gdGhpcy5zdGVwKCshIWkpKTtcbiAgICAgICAgLy8gUmVzZXQgdG8gc3RhcnRcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0ZXAgdGhyb3VnaCB0aGUgY3ljbGVcbiAgICAgKi9cbiAgICBzdGVwKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3ljbGUubmV4dChuKS52YWx1ZTtcbiAgICB9XG4gICAgY3VycmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcCgwKTtcbiAgICB9XG4gICAgcHJldigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcCgtMSk7XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXAoMSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ2lyY3VsYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEybHlZM1ZzWVhSdmNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OURhWEpqZFd4aGRHOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNiVU5CUVRKQ08wRkJSVE5DTEUxQlFYRkNMRlZCUVZVN1NVRkpOMEk3TzA5QlJVYzdTVUZEU0N4WlFVRlpMRkZCUVhGQ08xRkJReTlDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRSUVVOMlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVUU3VVVGRGVFSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhsUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdVVUZEZWtJc2VVSkJRWGxDTzFGQlEzcENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVRTdTVUZEYmtJc1EwRkJRenRKUVVWRUxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUTJoQ0xFdEJRVXNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0UlFVTTVSQ3hwUWtGQmFVSTdVVUZEYWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzBsQlEySXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlNTeERRVUZETEVOQlFWTTdVVUZEV2l4UFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRVHRKUVVOcVF5eERRVUZETzBsQlJVUXNUMEZCVHp0UlFVTk1MRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTnlRaXhEUVVGRE8wbEJSVVFzU1VGQlNUdFJRVU5HTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzUkNMRU5CUVVNN1NVRkZSQ3hKUVVGSk8xRkJRMFlzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRM0pDTEVOQlFVTTdRMEZEUmp0QlFYWkRSQ3cyUWtGMVEwTWlmUT09IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsImNvbnN0IGhlYWRpbmdzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYGgxLmhlYWRpbmdgKV0ubWFwKFxuICBoZWFkaW5nID0+ICh7XG4gICAgaGVhZGluZyxcbiAgICBhcnJvdzogaGVhZGluZy5xdWVyeVNlbGVjdG9yKGBhLmFycm93YCksXG4gICAgdXA6IGhlYWRpbmcucXVlcnlTZWxlY3RvcihgYS51cGFycm93YCksXG4gICAgbGluazogaGVhZGluZy5xdWVyeVNlbGVjdG9yKGBhLmxpbmtgKSxcbiAgICBoZWlnaHQ6IGhlYWRpbmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LFxuICB9KSxcbilcblxuY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcHJvamVjdHMgLnNlY3Rpb24tY29udGVudGApXG5jb25zdCBoZWFkaW5nV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNhYm91dC1oZWFkaW5nYClcbmNvbnN0IGhlYWRpbmdIZWlnaHQgPSBoZWFkaW5nV3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbmhlYWRpbmdXcmFwcGVyLnN0eWxlLmhlaWdodCA9IGAke2hlYWRpbmdIZWlnaHR9cHhgXG5cbmNvbnN0IGJvcmRlclNpemUgPSBwYXJzZUludChcbiAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoaGVhZGluZ3NbMF0uYXJyb3cpLmJvcmRlclRvcFdpZHRoLFxuICAxMCxcbilcblxubGV0IGxhc3RTY3JvbGwgPSAwXG5sZXQgdGlja2luZyA9IGZhbHNlXG5sZXQgb2Zmc2V0ID0gbnVsbFxuXG5jb25zdCB1cGRhdGVIZWFkaW5nID0gKHsgaGVhZGluZywgbGluaywgYXJyb3csIGhlaWdodCwgdXAgfSkgPT4ge1xuICBjb25zdCB7IHRvcCB9ID0gaGVhZGluZy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBpZiAob2Zmc2V0ID09PSBudWxsKSB7XG4gICAgb2Zmc2V0ID1cbiAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAtXG4gICAgICBoZWFkaW5nc1swXS5oZWFkaW5nLm9mZnNldFRvcCAtXG4gICAgICBoZWFkaW5nc1swXS5oZWlnaHRcbiAgfVxuICBjb25zdCByYXRpbyA9IE1hdGgubWF4KFxuICAgIDAsXG4gICAgdG9wIC8gKHdpbmRvdy5pbm5lckhlaWdodCAtIG9mZnNldCAtIGhlaWdodCksXG4gIClcbiAgY29uc3QgbWFyZ2luID0gMC4yXG4gIGxpbmsuc3R5bGUuZm9udFNpemUgPSBgJHsxIC0gbWFyZ2luICsgbWFyZ2luICogKDEgLSByYXRpbyl9ZW1gXG4gIGNvbnN0IHNpemUgPSBNYXRoLm1heCgwLCByYXRpbyAqIGJvcmRlclNpemUpXG4gIGFycm93LnN0eWxlLnNldFByb3BlcnR5KGAtLXNpemVgLCBgJHtzaXplfXB4YClcbiAgY29uc3QgdXBTaXplID0gTWF0aC5tYXgoMCwgKDEgLSByYXRpbykgKiBib3JkZXJTaXplKVxuICB1cC5zdHlsZS5zZXRQcm9wZXJ0eShgLS1zaXplYCwgYCR7dXBTaXplfXB4YClcbn1cblxuY29uc3QgdXBkYXRlU2Nyb2xsID0gKCkgPT4ge1xuICBoZWFkaW5ncy5mb3JFYWNoKHVwZGF0ZUhlYWRpbmcpXG4gIGNvbnN0IHByb2plY3RzUmVjdCA9IHByb2plY3RzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIGNvbnN0IGZpeCA9XG4gICAgcHJvamVjdHNSZWN0LmJvdHRvbSAtIHdpbmRvdy5pbm5lckhlaWdodCArIGhlYWRpbmdIZWlnaHQgPiAwXG4gIGNvbnN0IHN0YXQgPVxuICAgIHdpbmRvdy5pbm5lckhlaWdodCAtIHByb2plY3RzUmVjdC50b3AgLSBoZWFkaW5nSGVpZ2h0ICsgMjAgPD0gMFxuICBoZWFkaW5nV3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKGBmaXhlZGAsIGZpeClcbiAgaGVhZGluZ1dyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZShgc3RhdGljYCwgc3RhdClcbiAgaWYgKHByb2plY3RzUmVjdC50b3AgLSBoZWFkaW5nSGVpZ2h0IDw9IDApIHtcbiAgICBpZiAoIXdpbmRvdy5wYXVzZWQgJiYgd2luZG93LnBsYXlpbmcpIHtcbiAgICAgIHdpbmRvdy5wYXVzZWQgPSB0cnVlXG4gICAgICB3aW5kb3cucGxheWluZy5wYXVzZSgpXG4gICAgfVxuICB9IGVsc2UgaWYgKHdpbmRvdy5wYXVzZWQpIHtcbiAgICB3aW5kb3cucGF1c2VkID0gZmFsc2VcbiAgICB3aW5kb3cucGxheWluZy5wbGF5KClcbiAgfVxufVxudXBkYXRlU2Nyb2xsKClcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYHNjcm9sbGAsICgpID0+IHtcbiAgbGFzdFNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZXG5cbiAgaWYgKCF0aWNraW5nKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB1cGRhdGVTY3JvbGwobGFzdFNjcm9sbClcbiAgICAgIHRpY2tpbmcgPSBmYWxzZVxuICAgIH0pXG5cbiAgICB0aWNraW5nID0gdHJ1ZVxuICB9XG59KVxuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBhW2hyZWZePVwiI1wiXWApLmZvckVhY2goYW5jaG9yID0+IHtcbiAgYW5jaG9yLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgaGFzaCA9IGFuY2hvci5nZXRBdHRyaWJ1dGUoYGhyZWZgKVxuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaGFzaCkuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgYmxvY2s6IGBzdGFydGAsXG4gICAgICBiZWhhdmlvcjogYHNtb290aGAsXG4gICAgfSlcbiAgfSlcbn0pXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSAoZikgPT4ge1xuICAgIGRpcmVjdGl2ZXMuc2V0KGYsIHRydWUpO1xuICAgIHJldHVybiBmO1xufTtcbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZSA9IChvKSA9PiB0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyAmJiBkaXJlY3RpdmVzLmhhcyhvKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5leHBvcnQgY29uc3QgaXNDRVBvbHlmaWxsID0gd2luZG93LmN1c3RvbUVsZW1lbnRzICE9PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cuY3VzdG9tRWxlbWVudHMucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT0gdW5kZWZpbmVkO1xuLyoqXG4gKiBSZXBhcmVudHMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0Tm9kZWAgKGluY2x1c2l2ZSkgdG8gYGVuZE5vZGVgXG4gKiAoZXhjbHVzaXZlKSwgaW50byBhbm90aGVyIGNvbnRhaW5lciAoY291bGQgYmUgdGhlIHNhbWUgY29udGFpbmVyKSwgYmVmb3JlXG4gKiBgYmVmb3JlTm9kZWAuIElmIGBiZWZvcmVOb2RlYCBpcyBudWxsLCBpdCBhcHBlbmRzIHRoZSBub2RlcyB0byB0aGVcbiAqIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGFyZW50Tm9kZXMgPSAoY29udGFpbmVyLCBzdGFydCwgZW5kID0gbnVsbCwgYmVmb3JlID0gbnVsbCkgPT4ge1xuICAgIGxldCBub2RlID0gc3RhcnQ7XG4gICAgd2hpbGUgKG5vZGUgIT09IGVuZCkge1xuICAgICAgICBjb25zdCBuID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpO1xuICAgICAgICBub2RlID0gbjtcbiAgICB9XG59O1xuLyoqXG4gKiBSZW1vdmVzIG5vZGVzLCBzdGFydGluZyBmcm9tIGBzdGFydE5vZGVgIChpbmNsdXNpdmUpIHRvIGBlbmROb2RlYFxuICogKGV4Y2x1c2l2ZSksIGZyb20gYGNvbnRhaW5lcmAuXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVOb2RlcyA9IChjb250YWluZXIsIHN0YXJ0Tm9kZSwgZW5kTm9kZSA9IG51bGwpID0+IHtcbiAgICBsZXQgbm9kZSA9IHN0YXJ0Tm9kZTtcbiAgICB3aGlsZSAobm9kZSAhPT0gZW5kTm9kZSkge1xuICAgICAgICBjb25zdCBuID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICBub2RlID0gbjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcCIsIi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgdGhhdCBhIHZhbHVlIHdhcyBoYW5kbGVkIGJ5IGEgZGlyZWN0aXZlIGFuZFxuICogc2hvdWxkIG5vdCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gKi9cbmV4cG9ydCBjb25zdCBub0NoYW5nZSA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hcmtlciB1c2VkIHRleHQtcG9zaXRpb25zLCBub3QgYXR0cmlidXRlIHBvc2l0aW9ucyxcbiAqIGluIHRlbXBsYXRlLlxuICovXG5leHBvcnQgY29uc3Qgbm9kZU1hcmtlciA9IGA8IS0tJHttYXJrZXJ9LS0+YDtcbmV4cG9ydCBjb25zdCBtYXJrZXJSZWdleCA9IG5ldyBSZWdFeHAoYCR7bWFya2VyfXwke25vZGVNYXJrZXJ9YCk7XG5leHBvcnQgY29uc3QgcmV3cml0ZXNTdHlsZUF0dHJpYnV0ZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3t7YmFkIHZhbHVlfX0nKTtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCdzdHlsZScpICE9PSAne3tiYWQgdmFsdWV9fSc7XG59KSgpO1xuLyoqXG4gKiBBbiB1cGRhdGVhYmxlIFRlbXBsYXRlIHRoYXQgdHJhY2tzIHRoZSBsb2NhdGlvbiBvZiBkeW5hbWljIHBhcnRzLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGUge1xuICAgIGNvbnN0cnVjdG9yKHJlc3VsdCwgZWxlbWVudCkge1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgY29uc3Qgbm9kZXNUb1JlbW92ZSA9IFtdO1xuICAgICAgICBjb25zdCBfcHJlcGFyZVRlbXBsYXRlID0gKHRlbXBsYXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudDtcbiAgICAgICAgICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmVcbiAgICAgICAgICAgIC8vIG51bGxcbiAgICAgICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGVudCwgMTMzIC8qIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UIHwgTm9kZUZpbHRlci5TSE9XX0NPTU1FTlQgfFxuICAgICAgICAgICAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19URVhUICovLCBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBUaGUgYWN0dWFsIHByZXZpb3VzIG5vZGUsIGFjY291bnRpbmcgZm9yIHJlbW92YWxzOiBpZiBhIG5vZGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICAgLy8gaXQgd2lsbCBuZXZlciBiZSB0aGUgcHJldmlvdXNOb2RlLlxuICAgICAgICAgICAgbGV0IHByZXZpb3VzTm9kZTtcbiAgICAgICAgICAgIC8vIFVzZWQgdG8gc2V0IHByZXZpb3VzTm9kZSBhdCB0aGUgdG9wIG9mIHRoZSBsb29wLlxuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlO1xuICAgICAgICAgICAgd2hpbGUgKHdhbGtlci5uZXh0Tm9kZSgpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gY3VycmVudE5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgLyogTm9kZS5FTEVNRU5UX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmFtZWROb2RlTWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBFZGdlL0lFIGNhbiByZXR1cm4gdGhlbSBvdXQgb2Ygb3JkZXIsIHNvIHdlIGNhbm5vdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzdW1lIGEgY29ycmVzcG9uZGFuY2UgYmV0d2VlbiBwYXJ0IGluZGV4IGFuZCBhdHRyaWJ1dGUgaW5kZXguXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXNbaV0udmFsdWUuaW5kZXhPZihtYXJrZXIpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlbXBsYXRlIGxpdGVyYWwgc2VjdGlvbiBsZWFkaW5nIHVwIHRvIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdGb3JQYXJ0ID0gcmVzdWx0LnN0cmluZ3NbcGFydEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydClbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5hbWUgY29udGFpbnMgc3BlY2lhbCBjaGFyYWN0ZXJzLCBsb3dlci1jYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgc28gdGhhdCBvbiBYTUwgbm9kZXMgd2l0aCBjYXNlLXNlbnNpdGl2ZSBnZXRBdHRyaWJ1dGUoKSB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbiBzdGlsbCBmaW5kIHRoZSBhdHRyaWJ1dGUsIHdoaWNoIHdpbGwgaGF2ZSBiZWVuIGxvd2VyLWNhc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgdGhlIHBhcnNlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgbmFtZSBkb2Vzbid0IGNvbnRhaW4gc3BlY2lhbCBjaGFyYWN0ZXIsIGl0J3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbXBvcnRhbnQgdG8gX25vdF8gbG93ZXItY2FzZSBpdCwgaW4gY2FzZSB0aGUgbmFtZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2Utc2Vuc2l0aXZlLCBsaWtlIHdpdGggWE1MIGF0dHJpYnV0ZXMgbGlrZSBcInZpZXdCb3hcIi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVMb29rdXBOYW1lID0gKHJld3JpdGVzU3R5bGVBdHRyaWJ1dGUgJiYgbmFtZSA9PT0gJ3N0eWxlJykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3R5bGUkJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9eW2EtekEtWi1dKiQvLnRlc3QobmFtZSkgPyBuYW1lIDogbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5ncyA9IGF0dHJpYnV0ZVZhbHVlLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnYXR0cmlidXRlJywgaW5kZXgsIG5hbWUsIHN0cmluZ3MgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTG9va3VwTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJlcGFyZVRlbXBsYXRlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZVZhbHVlID0gbm9kZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlVmFsdWUuaW5kZXhPZihtYXJrZXIpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzID0gbm9kZVZhbHVlLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgcGFydCBmb3IgZWFjaCBtYXRjaCBmb3VuZFxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXggKz0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyB0ZXh0IG5vZGUgZm9yIGVhY2ggbGl0ZXJhbCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSgoc3RyaW5nc1tpXSA9PT0gJycpID8gY3JlYXRlTWFya2VyKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cmluZ3NbaV0pLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IGluZGV4KysgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShzdHJpbmdzW2xhc3RJbmRleF0gPT09ICcnID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZU1hcmtlcigpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cmluZ3NbbGFzdEluZGV4XSksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUmVtb3ZlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogTm9kZS5DT01NRU5UX05PREUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVZhbHVlID09PSBtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBtYXJrZXIgbm9kZSB0byBiZSB0aGUgc3RhcnROb2RlIG9mIHRoZSBQYXJ0IGlmIGFueSBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBhcmUgdHJ1ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAqIFdlIGRvbid0IGhhdmUgYSBwcmV2aW91c1NpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAqIHByZXZpb3VzU2libGluZyBpcyBiZWluZyByZW1vdmVkICh0aHVzIGl0J3Mgbm90IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgYHByZXZpb3VzTm9kZWApXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgKiBwcmV2aW91c1NpYmxpbmcgaXMgbm90IGEgVGV4dCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogV2Ugc2hvdWxkIGJlIGFibGUgdG8gdXNlIHRoZSBwcmV2aW91c05vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUgYXMgdGhlIG1hcmtlciBub2RlIGFuZCByZWR1Y2UgdGhlIG51bWJlciBvZiBleHRyYSBub2RlcyB3ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRvIGEgdGVtcGxhdGUuIFNlZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXJMYWJzL2xpdC1odG1sL2lzc3Vlcy8xNDdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzU2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBwcmV2aW91c1NpYmxpbmcgIT09IHByZXZpb3VzTm9kZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzU2libGluZy5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goeyB0eXBlOiAnbm9kZScsIGluZGV4OiBpbmRleCsrIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1JlbW92ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG5leHRTaWJsaW5nIGFkZCBhIG1hcmtlciBub2RlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSB0byBjaGVjayBpZiB0aGUgbmV4dCBub2RlIGlzIGdvaW5nIHRvIGJlIHJlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHRoYXQgbm9kZSB3aWxsIGluZHVjZSBhIG5ldyBtYXJrZXIgaWYgc28uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gcHJldmlvdXNOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChpID0gbm9kZS5ub2RlVmFsdWUuaW5kZXhPZihtYXJrZXIsIGkgKyAxKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gKGp1c3RpbmZhZ25hbmkpOiBjb25zaWRlciB3aGV0aGVyIGl0J3MgZXZlbiB3b3J0aCBpdCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgYmluZGluZ3MgaW4gY29tbWVudHMgd29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7IHR5cGU6ICdub2RlJywgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfcHJlcGFyZVRlbXBsYXRlKGVsZW1lbnQpO1xuICAgICAgICAvLyBSZW1vdmUgdGV4dCBiaW5kaW5nIG5vZGVzIGFmdGVyIHRoZSB3YWxrIHRvIG5vdCBkaXN0dXJiIHRoZSBUcmVlV2Fsa2VyXG4gICAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1RvUmVtb3ZlKSB7XG4gICAgICAgICAgICBuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVBhcnRBY3RpdmUgPSAocGFydCkgPT4gcGFydC5pbmRleCAhPT0gLTE7XG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuLyoqXG4gKiBUaGlzIHJlZ2V4IGV4dHJhY3RzIHRoZSBhdHRyaWJ1dGUgbmFtZSBwcmVjZWRpbmcgYW4gYXR0cmlidXRlLXBvc2l0aW9uXG4gKiBleHByZXNzaW9uLiBJdCBkb2VzIHRoaXMgYnkgbWF0Y2hpbmcgdGhlIHN5bnRheCBhbGxvd2VkIGZvciBhdHRyaWJ1dGVzXG4gKiBhZ2FpbnN0IHRoZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseSBwcmVjZWRpbmcgdGhlIGV4cHJlc3Npb24sIGFzc3VtaW5nIHRoYXRcbiAqIHRoZSBleHByZXNzaW9uIGlzIGluIGFuIGF0dHJpYnV0ZS12YWx1ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgYXR0cmlidXRlcyBpbiB0aGUgSFRNTCBzcGVjOlxuICogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMFxuICpcbiAqIFwiXFwwLVxceDFGXFx4N0YtXFx4OUZcIiBhcmUgVW5pY29kZSBjb250cm9sIGNoYXJhY3RlcnNcbiAqXG4gKiBcIiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzcGFjZS1jaGFyYWN0ZXJcbiAqXG4gKiBTbyBhbiBhdHRyaWJ1dGUgaXM6XG4gKiAgKiBUaGUgbmFtZTogYW55IGNoYXJhY3RlciBleGNlcHQgYSBjb250cm9sIGNoYXJhY3Rlciwgc3BhY2UgY2hhcmFjdGVyLCAoJyksXG4gKiAgICAoXCIpLCBcIj5cIiwgXCI9XCIsIG9yIFwiL1wiXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnkgXCI9XCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieTpcbiAqICAgICogQW55IGNoYXJhY3RlciBleGNlcHQgc3BhY2UsICgnKSwgKFwiKSwgXCI8XCIsIFwiPlwiLCBcIj1cIiwgKGApLCBvclxuICogICAgKiAoXCIpIHRoZW4gYW55IG5vbi0oXCIpLCBvclxuICogICAgKiAoJykgdGhlbiBhbnkgbm9uLSgnKVxuICovXG5leHBvcnQgY29uc3QgbGFzdEF0dHJpYnV0ZU5hbWVSZWdleCA9IC8oWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0pKFteXFwwLVxceDFGXFx4N0YtXFx4OUYgXFx4MDlcXHgwYVxceDBjXFx4MGRcIic+PS9dKykoWyBcXHgwOVxceDBhXFx4MGNcXHgwZF0qPVsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKig/OlteIFxceDA5XFx4MGFcXHgwY1xceDBkXCInYDw+PV0qfFwiW15cIl0qfCdbXiddKikpJC87XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5pbXBvcnQgeyBpc0NFUG9seWZpbGwgfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBpc1RlbXBsYXRlUGFydEFjdGl2ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiBhIGBUZW1wbGF0ZWAgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIERPTSBhbmQgdXBkYXRlZFxuICogd2l0aCBuZXcgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVJbnN0YW5jZSB7XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGUsIHByb2Nlc3NvciwgZ2V0VGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy5fcGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICAgICAgdGhpcy5fZ2V0VGVtcGxhdGUgPSBnZXRUZW1wbGF0ZTtcbiAgICB9XG4gICAgdXBkYXRlKHZhbHVlcykge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9wYXJ0cykge1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcnQuc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fcGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LmNvbW1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9jbG9uZSgpIHtcbiAgICAgICAgLy8gV2hlbiB1c2luZyB0aGUgQ3VzdG9tIEVsZW1lbnRzIHBvbHlmaWxsLCBjbG9uZSB0aGUgbm9kZSwgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gaW1wb3J0aW5nIGl0LCB0byBrZWVwIHRoZSBmcmFnbWVudCBpbiB0aGUgdGVtcGxhdGUncyBkb2N1bWVudC4gVGhpc1xuICAgICAgICAvLyBsZWF2ZXMgdGhlIGZyYWdtZW50IGluZXJ0IHNvIGN1c3RvbSBlbGVtZW50cyB3b24ndCB1cGdyYWRlIGFuZFxuICAgICAgICAvLyBwb3RlbnRpYWxseSBtb2RpZnkgdGhlaXIgY29udGVudHMgYnkgY3JlYXRpbmcgYSBwb2x5ZmlsbGVkIFNoYWRvd1Jvb3RcbiAgICAgICAgLy8gd2hpbGUgd2UgdHJhdmVyc2UgdGhlIHRyZWUuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gaXNDRVBvbHlmaWxsID9cbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSA6XG4gICAgICAgICAgICBkb2N1bWVudC5pbXBvcnROb2RlKHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LCB0cnVlKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0aGlzLnRlbXBsYXRlLnBhcnRzO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IF9wcmVwYXJlSW5zdGFuY2UgPSAoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICAgIC8vIEVkZ2UgbmVlZHMgYWxsIDQgcGFyYW1ldGVycyBwcmVzZW50OyBJRTExIG5lZWRzIDNyZCBwYXJhbWV0ZXIgdG8gYmVcbiAgICAgICAgICAgIC8vIG51bGxcbiAgICAgICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZnJhZ21lbnQsIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAgICAgbGV0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIG5vZGVzIGFuZCBwYXJ0cyBvZiBhIHRlbXBsYXRlXG4gICAgICAgICAgICB3aGlsZSAocGFydEluZGV4IDwgcGFydHMubGVuZ3RoICYmIG5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgICAgICAvLyBDb25zZWN1dGl2ZSBQYXJ0cyBtYXkgaGF2ZSB0aGUgc2FtZSBub2RlIGluZGV4LCBpbiB0aGUgY2FzZSBvZlxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGJvdW5kIGF0dHJpYnV0ZXMgb24gYW4gZWxlbWVudC4gU28gZWFjaCBpdGVyYXRpb24gd2UgZWl0aGVyXG4gICAgICAgICAgICAgICAgLy8gaW5jcmVtZW50IHRoZSBub2RlSW5kZXgsIGlmIHdlIGFyZW4ndCBvbiBhIG5vZGUgd2l0aCBhIHBhcnQsIG9yIHRoZVxuICAgICAgICAgICAgICAgIC8vIHBhcnRJbmRleCBpZiB3ZSBhcmUuIEJ5IG5vdCBpbmNyZW1lbnRpbmcgdGhlIG5vZGVJbmRleCB3aGVuIHdlIGZpbmQgYVxuICAgICAgICAgICAgICAgIC8vIHBhcnQsIHdlIGFsbG93IGZvciB0aGUgbmV4dCBwYXJ0IHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIG5vZGUgaWYgbmVjY2Vzc2FzcnkuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1RlbXBsYXRlUGFydEFjdGl2ZShwYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlSW5kZXggPT09IHBhcnQuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wcm9jZXNzb3IuaGFuZGxlVGV4dEV4cHJlc3Npb24odGhpcy5fZ2V0VGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydC5pbnNlcnRBZnRlck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFydHMucHVzaCguLi50aGlzLnByb2Nlc3Nvci5oYW5kbGVBdHRyaWJ1dGVFeHByZXNzaW9ucyhub2RlLCBwYXJ0Lm5hbWUsIHBhcnQuc3RyaW5ncykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnVEVNUExBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcHJlcGFyZUluc3RhbmNlKG5vZGUuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3ByZXBhcmVJbnN0YW5jZShmcmFnbWVudCk7XG4gICAgICAgIGlmIChpc0NFUG9seWZpbGwpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkb3B0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy51cGdyYWRlKGZyYWdtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGUtaW5zdGFuY2UuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgcmVwYXJlbnROb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgsIG1hcmtlciwgbm9kZU1hcmtlciwgcmV3cml0ZXNTdHlsZUF0dHJpYnV0ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuLyoqXG4gKiBUaGUgcmV0dXJuIHR5cGUgb2YgYGh0bWxgLCB3aGljaCBob2xkcyBhIFRlbXBsYXRlIGFuZCB0aGUgdmFsdWVzIGZyb21cbiAqIGludGVycG9sYXRlZCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzLCB2YWx1ZXMsIHR5cGUsIHByb2Nlc3Nvcikge1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgb2YgSFRNTCB1c2VkIHRvIGNyZWF0ZSBhIDx0ZW1wbGF0ZT4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXRIVE1MKCkge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBodG1sID0gJyc7XG4gICAgICAgIGxldCBpc1RleHRCaW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnN0cmluZ3NbaV07XG4gICAgICAgICAgICBodG1sICs9IHM7XG4gICAgICAgICAgICBjb25zdCBjbG9zZSA9IHMubGFzdEluZGV4T2YoJz4nKTtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGluIGEgdGV4dCBwb3NpdGlvbiBpZiB0aGUgcHJldmlvdXMgc3RyaW5nIGNsb3NlZCBpdHMgbGFzdCB0YWcsIGFuXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGUgcG9zaXRpb24gaWYgdGhlIHN0cmluZyBvcGVuZWQgYW4gdW5jbG9zZWQgdGFnLCBhbmQgdW5jaGFuZ2VkXG4gICAgICAgICAgICAvLyBpZiB0aGUgc3RyaW5nIGhhZCBubyBicmFja2V0cyBhdCBhbGw6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gXCIuLi4+Li4uXCI6IHRleHQgcG9zaXRpb24uIG9wZW4gPT09IC0xLCBjbG9zZSA+IC0xXG4gICAgICAgICAgICAvLyBcIi4uLjwuLi5cIjogYXR0cmlidXRlIHBvc2l0aW9uLiBvcGVuID4gLTFcbiAgICAgICAgICAgIC8vIFwiLi4uXCI6IG5vIGNoYW5nZS4gb3BlbiA9PT0gLTEsIGNsb3NlID09PSAtMVxuICAgICAgICAgICAgaXNUZXh0QmluZGluZyA9XG4gICAgICAgICAgICAgICAgKGNsb3NlID4gLTEgfHwgaXNUZXh0QmluZGluZykgJiYgcy5pbmRleE9mKCc8JywgY2xvc2UgKyAxKSA9PT0gLTE7XG4gICAgICAgICAgICBpZiAoIWlzVGV4dEJpbmRpbmcgJiYgcmV3cml0ZXNTdHlsZUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UobGFzdEF0dHJpYnV0ZU5hbWVSZWdleCwgKG1hdGNoLCBwMSwgcDIsIHAzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocDIgPT09ICdzdHlsZScpID8gYCR7cDF9c3R5bGUkJHtwM31gIDogbWF0Y2g7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodG1sICs9IGlzVGV4dEJpbmRpbmcgPyBub2RlTWFya2VyIDogbWFya2VyO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gdGhpcy5zdHJpbmdzW2xdO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgZ2V0VGVtcGxhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHRoaXMuZ2V0SFRNTCgpO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBBIFRlbXBsYXRlUmVzdWx0IGZvciBTVkcgZnJhZ21lbnRzLlxuICpcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgSFRNbCBpbiBhbiA8c3ZnPiB0YWcgaW4gb3JkZXIgdG8gcGFyc2UgaXRzIGNvbnRlbnRzIGluIHRoZVxuICogU1ZHIG5hbWVzcGFjZSwgdGhlbiBtb2RpZmllcyB0aGUgdGVtcGxhdGUgdG8gcmVtb3ZlIHRoZSA8c3ZnPiB0YWcgc28gdGhhdFxuICogY2xvbmVzIG9ubHkgY29udGFpbmVyIHRoZSBvcmlnaW5hbCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNWR1RlbXBsYXRlUmVzdWx0IGV4dGVuZHMgVGVtcGxhdGVSZXN1bHQge1xuICAgIGdldEhUTUwoKSB7XG4gICAgICAgIHJldHVybiBgPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKHN2Z0VsZW1lbnQpO1xuICAgICAgICByZXBhcmVudE5vZGVzKGNvbnRlbnQsIHN2Z0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1yZXN1bHQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgaXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgeyByZW1vdmVOb2RlcyB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IG5vQ2hhbmdlIH0gZnJvbSAnLi9wYXJ0LmpzJztcbmltcG9ydCB7IFRlbXBsYXRlSW5zdGFuY2UgfSBmcm9tICcuL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuaW1wb3J0IHsgY3JlYXRlTWFya2VyIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5leHBvcnQgY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWUpID0+ICh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpKTtcbi8qKlxuICogU2V0cyBhdHRyaWJ1dGUgdmFsdWVzIGZvciBBdHRyaWJ1dGVQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZUNvbW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnRzW2ldID0gdGhpcy5fY3JlYXRlUGFydCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaW5nbGUgcGFydC4gT3ZlcnJpZGUgdGhpcyB0byBjcmVhdGUgYSBkaWZmZXJudCB0eXBlIG9mIHBhcnQuXG4gICAgICovXG4gICAgX2NyZWF0ZVBhcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXR0cmlidXRlUGFydCh0aGlzKTtcbiAgICB9XG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5zdHJpbmdzO1xuICAgICAgICBjb25zdCBsID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgdGV4dCA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGV4dCArPSBzdHJpbmdzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFydCA9IHRoaXMucGFydHNbaV07XG4gICAgICAgICAgICBpZiAocGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHYgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAoQXJyYXkuaXNBcnJheSh2KSB8fCB0eXBlb2YgdiAhPT0gJ3N0cmluZycgJiYgdltTeW1ib2wuaXRlcmF0b3JdKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSB0eXBlb2YgdCA9PT0gJ3N0cmluZycgPyB0IDogU3RyaW5nKHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHR5cGVvZiB2ID09PSAnc3RyaW5nJyA/IHYgOiBTdHJpbmcodik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRleHQgKz0gc3RyaW5nc1tsXTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCB0aGlzLl9nZXRWYWx1ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb21pdHRlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbW1pdHRlciA9IGNvbWl0dGVyO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IG5vQ2hhbmdlICYmICghaXNQcmltaXRpdmUodmFsdWUpIHx8IHZhbHVlICE9PSB0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgbm90IGEgZGlyZWN0aXZlLCBkaXJ0eSB0aGUgY29tbWl0dGVyIHNvIHRoYXQgaXQnbGxcbiAgICAgICAgICAgIC8vIGNhbGwgc2V0QXR0cmlidXRlLiBJZiB0aGUgdmFsdWUgaXMgYSBkaXJlY3RpdmUsIGl0J2xsIGRpcnR5IHRoZVxuICAgICAgICAgICAgLy8gY29tbWl0dGVyIGlmIGl0IGNhbGxzIHNldFZhbHVlKCkuXG4gICAgICAgICAgICBpZiAoIWlzRGlyZWN0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21taXQoKSB7XG4gICAgICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub0NoYW5nZTtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbW1pdHRlci5jb21taXQoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm9kZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlRmFjdG9yeSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGVtcGxhdGVGYWN0b3J5ID0gdGVtcGxhdGVGYWN0b3J5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgYXBwZW5kSW50byhjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICB0aGlzLmVuZE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoaXMgcGFydCBiZXR3ZWVuIGByZWZgIGFuZCBgcmVmYCdzIG5leHQgc2libGluZy4gQm90aCBgcmVmYCBhbmRcbiAgICAgKiBpdHMgbmV4dCBzaWJsaW5nIG11c3QgYmUgc3RhdGljLCB1bmNoYW5naW5nIG5vZGVzIHN1Y2ggYXMgdGhvc2UgdGhhdCBhcHBlYXJcbiAgICAgKiBpbiBhIGxpdGVyYWwgc2VjdGlvbiBvZiBhIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAgICovXG4gICAgaW5zZXJ0QWZ0ZXJOb2RlKHJlZikge1xuICAgICAgICB0aGlzLnN0YXJ0Tm9kZSA9IHJlZjtcbiAgICAgICAgdGhpcy5lbmROb2RlID0gcmVmLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHRoaXMgcGFydCBpbnRvIGEgcGFyZW50IHBhcnQuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICAgKi9cbiAgICBhcHBlbmRJbnRvUGFydChwYXJ0KSB7XG4gICAgICAgIHBhcnQuX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgcGFydC5faW5zZXJ0KHRoaXMuZW5kTm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGlzIHBhcnQgYWZ0ZXIgYHJlZmBcbiAgICAgKlxuICAgICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgICAqL1xuICAgIGluc2VydEFmdGVyUGFydChyZWYpIHtcbiAgICAgICAgcmVmLl9pbnNlcnQodGhpcy5zdGFydE5vZGUgPSBjcmVhdGVNYXJrZXIoKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZSA9IHJlZi5lbmROb2RlO1xuICAgICAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9wZW5kaW5nVmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLl9jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21taXROb2RlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21taXRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUudGhlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21taXRQcm9taXNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrLCB3aWxsIHJlbmRlciB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICB0aGlzLl9jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW5zZXJ0KG5vZGUpIHtcbiAgICAgICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHRoaXMuZW5kTm9kZSk7XG4gICAgfVxuICAgIF9jb21taXROb2RlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5faW5zZXJ0KHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBfY29tbWl0VGV4dCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmXG4gICAgICAgICAgICBub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICAgICAgLy8gSWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIHRleHQgbm9kZSBiZXR3ZWVuIHRoZSBtYXJrZXJzLCB3ZSBjYW4ganVzdFxuICAgICAgICAgICAgLy8gc2V0IGl0cyB2YWx1ZSwgcmF0aGVyIHRoYW4gcmVwbGFjaW5nIGl0LlxuICAgICAgICAgICAgLy8gVE9ETyhqdXN0aW5mYWduYW5pKTogQ2FuIHdlIGp1c3QgY2hlY2sgaWYgdGhpcy52YWx1ZSBpcyBwcmltaXRpdmU/XG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb21taXROb2RlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IFN0cmluZyh2YWx1ZSkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIF9jb21taXRUZW1wbGF0ZVJlc3VsdCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVGYWN0b3J5KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZS50ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgcHJvcGFnYXRlIHRoZSB0ZW1wbGF0ZSBwcm9jZXNzb3IgZnJvbSB0aGUgVGVtcGxhdGVSZXN1bHRcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgdXNlIGl0J3Mgc3ludGF4IGV4dGVuc2lvbiwgZXRjLiBUaGUgdGVtcGxhdGUgZmFjdG9yeSBjb21lc1xuICAgICAgICAgICAgLy8gZnJvbSB0aGUgcmVuZGVyIGZ1bmN0aW9uIHNvIHRoYXQgaXQgY2FuIGNvbnRyb2wgY2FjaGluZy5cbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHZhbHVlLnByb2Nlc3NvciwgdGhpcy50ZW1wbGF0ZUZhY3RvcnkpO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpbnN0YW5jZS5fY2xvbmUoKTtcbiAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5fY29tbWl0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICAgIC8vIEZvciBhbiBJdGVyYWJsZSwgd2UgY3JlYXRlIGEgbmV3IEluc3RhbmNlUGFydCBwZXIgaXRlbSwgdGhlbiBzZXQgaXRzXG4gICAgICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgICAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAgICAgLy8gb2YgVGVtcGxhdGVSZXN1bHRzIHRoYXQgd2lsbCBiZSBjb21tb25seSByZXR1cm5lZCBmcm9tIGV4cHJlc3Npb25zIGxpa2U6XG4gICAgICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG4gICAgICAgIC8vIElmIF92YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgICAgICAvLyBpdGVyYWJsZSBhbmQgX3ZhbHVlIHdpbGwgY29udGFpbiB0aGUgTm9kZVBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSWYgX3ZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY2xlYXIgdGhpcyBwYXJ0IGFuZCBtYWtlIGEgbmV3XG4gICAgICAgIC8vIGFycmF5IGZvciBOb2RlUGFydHMuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgICAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMudmFsdWU7XG4gICAgICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgICAgICBsZXQgaXRlbVBhcnQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHJldXNlIGFuIGV4aXN0aW5nIHBhcnRcbiAgICAgICAgICAgIGl0ZW1QYXJ0ID0gaXRlbVBhcnRzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgICBpZiAoaXRlbVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGl0ZW1QYXJ0ID0gbmV3IE5vZGVQYXJ0KHRoaXMudGVtcGxhdGVGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtUGFydC5hcHBlbmRJbnRvUGFydCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1QYXJ0Lmluc2VydEFmdGVyUGFydChpdGVtUGFydHNbcGFydEluZGV4IC0gMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1QYXJ0LnNldFZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgaXRlbVBhcnQuY29tbWl0KCk7XG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydEluZGV4IDwgaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgdGhlIHBhcnRzIGFycmF5IHNvIF92YWx1ZSByZWZsZWN0cyB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgICAgICAgaXRlbVBhcnRzLmxlbmd0aCA9IHBhcnRJbmRleDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoaXRlbVBhcnQgJiYgaXRlbVBhcnQuZW5kTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbW1pdFByb21pc2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB2YWx1ZS50aGVuKCh2KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHYpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbGVhcihzdGFydE5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSkge1xuICAgICAgICByZW1vdmVOb2Rlcyh0aGlzLnN0YXJ0Tm9kZS5wYXJlbnROb2RlLCBzdGFydE5vZGUubmV4dFNpYmxpbmcsIHRoaXMuZW5kTm9kZSk7XG4gICAgfVxufVxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUsIHJvdWdobHkgYXMgZGVmaW5lZCBpbiB0aGUgSFRNTFxuICogc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgdHJ1dGh5LCB0aGVuIHRoZSBhdHRyaWJ1dGUgaXMgcHJlc2VudCB3aXRoIGEgdmFsdWUgb2ZcbiAqICcnLiBJZiB0aGUgdmFsdWUgaXMgZmFsc2V5LCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCAhPT0gMiB8fCBzdHJpbmdzWzBdICE9PSAnJyB8fCBzdHJpbmdzWzFdICE9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb29sZWFuIGF0dHJpYnV0ZXMgY2FuIG9ubHkgY29udGFpbiBhIHNpbmdsZSBleHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nVmFsdWUgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSAhIXRoaXMuX3BlbmRpbmdWYWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgfVxufVxuLyoqXG4gKiBTZXRzIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIFByb3BlcnR5UGFydHMsIHNvIHRoYXQgdGhlIHZhbHVlIGlzIG9ubHkgc2V0IG9uY2VcbiAqIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzIGZvciBhIHByb3BlcnR5LlxuICpcbiAqIElmIGFuIGV4cHJlc3Npb24gY29udHJvbHMgdGhlIHdob2xlIHByb3BlcnR5IHZhbHVlLCB0aGVuIHRoZSB2YWx1ZSBpcyBzaW1wbHlcbiAqIGFzc2lnbmVkIHRvIHRoZSBwcm9wZXJ0eSB1bmRlciBjb250cm9sLiBJZiB0aGVyZSBhcmUgc3RyaW5nIGxpdGVyYWxzIG9yXG4gKiBtdWx0aXBsZSBleHByZXNzaW9ucywgdGhlbiB0aGUgc3RyaW5ncyBhcmUgZXhwcmVzc2lvbnMgYXJlIGludGVycG9sYXRlZCBpbnRvXG4gKiBhIHN0cmluZyBmaXJzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BlcnR5Q29tbWl0dGVyIGV4dGVuZHMgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgICAgICB0aGlzLnNpbmdsZSA9XG4gICAgICAgICAgICAoc3RyaW5ncy5sZW5ndGggPT09IDIgJiYgc3RyaW5nc1swXSA9PT0gJycgJiYgc3RyaW5nc1sxXSA9PT0gJycpO1xuICAgIH1cbiAgICBfY3JlYXRlUGFydCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVBhcnQodGhpcyk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJ0c1swXS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFZhbHVlKCk7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFt0aGlzLm5hbWVdID0gdGhpcy5fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbn1cbmV4cG9ydCBjbGFzcyBFdmVudFBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50TmFtZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tbWl0KCkge1xuICAgICAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICAgICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRoaXMuX3BlbmRpbmdWYWx1ZSA9PSBudWxsKSAhPT0gKHRoaXMudmFsdWUgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLmNhbGwodGhpcy5lbGVtZW50LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMudmFsdWUuaGFuZGxlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlQ29tbWl0dGVyLCBCb29sZWFuQXR0cmlidXRlUGFydCwgRXZlbnRQYXJ0LCBOb2RlUGFydCwgUHJvcGVydHlDb21taXR0ZXIgfSBmcm9tICcuL3BhcnRzLmpzJztcbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS1wb3NpdGlvbiBiaW5kaW5nLCBnaXZlbiB0aGUgZXZlbnQsIGF0dHJpYnV0ZVxuICAgICAqIG5hbWUsIGFuZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBiaW5kaW5nXG4gICAgICogQHBhcmFtIG5hbWUgIFRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAgICogICBldmVudCBmb3IgZnVsbHktY29udHJvbGxlZCBiaW5kaW5ncyB3aXRoIGEgc2luZ2xlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoZWxlbWVudCwgbmFtZSwgc3RyaW5ncykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBuYW1lWzBdO1xuICAgICAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbWl0dGVyID0gbmV3IFByb3BlcnR5Q29tbWl0dGVyKGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbWl0dGVyLnBhcnRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXggPT09ICdAJykge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgRXZlbnRQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSkpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21pdHRlciA9IG5ldyBBdHRyaWJ1dGVDb21taXR0ZXIoZWxlbWVudCwgbmFtZSwgc3RyaW5ncyk7XG4gICAgICAgIHJldHVybiBjb21pdHRlci5wYXJ0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHBhcnRzIGZvciBhIHRleHQtcG9zaXRpb24gYmluZGluZy5cbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVGYWN0b3J5XG4gICAgICovXG4gICAgaGFuZGxlVGV4dEV4cHJlc3Npb24odGVtcGxhdGVGYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZVBhcnQodGVtcGxhdGVGYWN0b3J5KTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yID0gbmV3IERlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgVGVtcGxhdGVGYWN0b3J5IHdoaWNoIGNhY2hlcyBUZW1wbGF0ZXMga2V5ZWQgb25cbiAqIHJlc3VsdC50eXBlIGFuZCByZXN1bHQuc3RyaW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeShyZXN1bHQpIHtcbiAgICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlcy5zZXQocmVzdWx0LnR5cGUsIHRlbXBsYXRlQ2FjaGUpO1xuICAgIH1cbiAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgaWYgKHRlbXBsYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCByZXN1bHQuZ2V0VGVtcGxhdGVFbGVtZW50KCkpO1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlLnNldChyZXN1bHQuc3RyaW5ncywgdGVtcGxhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGU7XG59XG4vLyBUaGUgZmlyc3QgYXJndW1lbnQgdG8gSlMgdGVtcGxhdGUgdGFncyByZXRhaW4gaWRlbnRpdHkgYWNyb3NzIG11bHRpcGxlXG4vLyBjYWxscyB0byBhIHRhZyBmb3IgdGhlIHNhbWUgbGl0ZXJhbCwgc28gd2UgY2FuIGNhY2hlIHdvcmsgZG9uZSBwZXIgbGl0ZXJhbFxuLy8gaW4gYSBNYXAuXG5leHBvcnQgY29uc3QgdGVtcGxhdGVDYWNoZXMgPSBuZXcgTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1mYWN0b3J5LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IHJlbW92ZU5vZGVzIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgTm9kZVBhcnQgfSBmcm9tICcuL3BhcnRzLmpzJztcbmltcG9ydCB7IHRlbXBsYXRlRmFjdG9yeSBhcyBkZWZhdWx0VGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmV4cG9ydCBjb25zdCBwYXJ0cyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFJlbmRlcnMgYSB0ZW1wbGF0ZSB0byBhIGNvbnRhaW5lci5cbiAqXG4gKiBUbyB1cGRhdGUgYSBjb250YWluZXIgd2l0aCBuZXcgdmFsdWVzLCByZWV2YWx1YXRlIHRoZSB0ZW1wbGF0ZSBsaXRlcmFsIGFuZFxuICogY2FsbCBgcmVuZGVyYCB3aXRoIHRoZSBuZXcgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSByZXN1bHQgYSBUZW1wbGF0ZVJlc3VsdCBjcmVhdGVkIGJ5IGV2YWx1YXRpbmcgYSB0ZW1wbGF0ZSB0YWcgbGlrZVxuICogICAgIGBodG1sYCBvciBgc3ZnYC5cbiAqIEBwYXJhbSBjb250YWluZXIgQSBET00gcGFyZW50IHRvIHJlbmRlciB0by4gVGhlIGVudGlyZSBjb250ZW50cyBhcmUgZWl0aGVyXG4gKiAgICAgcmVwbGFjZWQsIG9yIGVmZmljaWVudGx5IHVwZGF0ZWQgaWYgdGhlIHNhbWUgcmVzdWx0IHR5cGUgd2FzIHByZXZpb3VzXG4gKiAgICAgcmVuZGVyZWQgdGhlcmUuXG4gKiBAcGFyYW0gdGVtcGxhdGVGYWN0b3J5IGEgZnVuY3Rpb24gdG8gY3JlYXRlIGEgVGVtcGxhdGUgb3IgcmV0cmVpdmUgb25lIGZyb21cbiAqICAgICBjYWNoZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihyZXN1bHQsIGNvbnRhaW5lciwgdGVtcGxhdGVGYWN0b3J5ID0gZGVmYXVsdFRlbXBsYXRlRmFjdG9yeSkge1xuICAgIGxldCBwYXJ0ID0gcGFydHMuZ2V0KGNvbnRhaW5lcik7XG4gICAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW1vdmVOb2Rlcyhjb250YWluZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgcGFydHMuc2V0KGNvbnRhaW5lciwgcGFydCA9IG5ldyBOb2RlUGFydCh0ZW1wbGF0ZUZhY3RvcnkpKTtcbiAgICAgICAgcGFydC5hcHBlbmRJbnRvKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHBhcnQuc2V0VmFsdWUocmVzdWx0KTtcbiAgICBwYXJ0LmNvbW1pdCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cbmltcG9ydCB7IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciB9IGZyb20gJy4vbGliL2RlZmF1bHQtdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7IFNWR1RlbXBsYXRlUmVzdWx0LCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJy4vbGliL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvdGVtcGxhdGUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvcGFydC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9wYXJ0cy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZGlyZWN0aXZlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3JlbmRlci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFRlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ2h0bWwnLCBkZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IpO1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgdGVtcGxhdGUgbGl0ZXJhbCBhcyBhbiBTVkcgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gKHN0cmluZ3MsIC4uLnZhbHVlcykgPT4gbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXAiLCJpbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiXG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcImxpdC1odG1sXCJcblxuY29uc3QgQm94ID0gY29sb3IgPT4gc3RhdGUgPT5cbiAgaHRtbGA8ZGl2IGNsYXNzPVwiQm94ICR7Y3NzYFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogdmFyKC0tYm94KTtcbiAgICBoZWlnaHQ6IHZhcigtLWJveCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcn07XG4gICAgLS1zaDogMXB4O1xuICAgIGJveC1zaGFkb3c6IGluc2V0IHZhcigtLXNoKSB2YXIoLS1zaCkgMCAwXG4gICAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTUpO1xuICBgfSAke1xuICAgIHN0YXRlXG4gICAgICA/IGNzc2BcbiAgICAgICAgICAvLyBib3JkZXI6IDFweCBzb2xpZCAjZjA2O1xuICAgICAgICBgXG4gICAgICA6IGNzc2BcbiAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgIGBcbiAgfVwiPjwvZGl2PmBcblxuZXhwb3J0IGRlZmF1bHQgQm94XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiXG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcImxpdC1odG1sXCJcbmltcG9ydCBCb3ggZnJvbSBcIi4vQm94XCJcblxuY29uc3QgU2hhcGUgPSAoeyBzaGFwZSwgeCwgeSwgaGVpZ2h0LCB3aWR0aCwgY29sb3IsIHR1cm5zIH0pID0+IGh0bWxgXG4gIDxkaXYgY2xhc3M9XCJTaGFwZSAke2Nzc2BcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiBjYWxjKHZhcigtLWJveCkgKiAke3l9KTtcbiAgICBsZWZ0OiBjYWxjKHZhcigtLWJveCkgKiAke3h9KTtcbiAgYH1cIlxuICBkYXRhLXg9XCIke3h9XCJcbiAgZGF0YS15PVwiJHt5fVwiXG4gIGRhdGEtaGVpZ2h0PVwiJHtoZWlnaHR9XCJcbiAgZGF0YS13aWR0aD1cIiR7d2lkdGh9XCJcbiAgZGF0YS10dXJucz1cIiR7K3R1cm5zfVwiXG4gID4ke3NoYXBlLm1hcChcbiAgICBzZWdtZW50ID0+XG4gICAgICBodG1sYDxkaXYgY2xhc3M9JHtjc3NgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBgfT4ke3NlZ21lbnQubWFwKEJveChjb2xvcikpfTwvZGl2PmAsXG4gICl9PC9kaXY+XG5gXG5cbmV4cG9ydCBkZWZhdWx0IFNoYXBlXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiXG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcImxpdC1odG1sXCJcbmltcG9ydCBTaGFwZSBmcm9tIFwiLi9TaGFwZVwiXG5cbmNvbnN0IExldHRlciA9ICh7IGJveGVzLCB3aWR0aCwgaGVpZ2h0IH0sIG1pcnJvcikgPT4gKHtcbiAgd2lkdGgsXG4gIGhlaWdodCxcbiAgaHRtbDogaHRtbGA8ZGl2IGNsYXNzPVwiTGV0dGVyICR7Y3NzYFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLWJveCk7XG4gICAgd2lkdGg6IGNhbGModmFyKC0tYm94KSAqICR7d2lkdGh9KTtcbiAgICBoZWlnaHQ6IGNhbGModmFyKC0tYm94KSAqICR7aGVpZ2h0fSk7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIGB9XCJcbiAgICBkYXRhLXdpZHRoPVwiJHt3aWR0aH1cIlxuICAgIGRhdGEtaGVpZ2h0PVwiJHtoZWlnaHR9XCJcbiAgPlxuICA8ZGl2IGNsYXNzPVwiTGV0dGVyLWNvbnRhaW5lciAke2Nzc2BcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICBgfVwiPlxuICAgICR7Ym94ZXMubWFwKGJveCA9PiBTaGFwZShib3gpKX1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiQ292ZXIgJHtjc3NgXG4gICAgICBiYWNrZ3JvdW5kOiByZ2IodmFyKC0tYmcpKTtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiB2YXIoLS1ib3gpO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICBgfSAke1xuICAgIG1pcnJvclxuICAgICAgPyBjc3NgXG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICBgXG4gICAgICA6IGNzc2BcbiAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGBcbiAgfVwiPjwvZGl2PlxuPC9kaXY+YCxcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IExldHRlclxuIiwiY29uc3Qgc2hhcGUgPSAoeyB3aWR0aCwgZ3JvdXAgfSkgPT5cbiAgZ3JvdXAubWFwKCh7IHgxLCB4MiB9KSA9PlxuICAgIEFycmF5LmZyb20oXG4gICAgICB7IGxlbmd0aDogd2lkdGggfSxcbiAgICAgIChfLCBpKSA9PiAoaSA8PSB4MiAmJiBpID49IHgxID8gMSA6IDApLFxuICAgICksXG4gIClcblxuZXhwb3J0IGRlZmF1bHQgc2hhcGVcbiIsImNvbnN0IHR1cGxlID0gKC4uLmFyZ3MpID0+IEpTT04uc3RyaW5naWZ5KGFyZ3MpXG5cbmNvbnN0IHNlZ21lbnRpemUgPSB0ZXh0ID0+IHtcbiAgY29uc3QgbGluZXMgPSB0ZXh0XG4gICAgLnNwbGl0KC9cXG4vKVxuICAgIC5tYXAobGluZSA9PiBsaW5lLnRyaW1SaWdodCgpKVxuICAgIC5maWx0ZXIobGluZSA9PiBsaW5lKVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBNYXRoLm1heCguLi5saW5lcy5tYXAoKHsgbGVuZ3RoIH0pID0+IGxlbmd0aCkpLFxuICAgIGhlaWdodDogbGluZXMubGVuZ3RoLFxuICAgIHNlZ21lbnRpemVkOiBsaW5lc1xuICAgICAgLm1hcChsaW5lID0+IGxpbmUubWF0Y2goLyguKVxcMSovZykpXG4gICAgICAubWFwKChzZWdtZW50cywgeSkgPT5cbiAgICAgICAgc2VnbWVudHNcbiAgICAgICAgICAubWFwKChjaGFycywgaSkgPT4gKHtcbiAgICAgICAgICAgIGNoYXI6IGNoYXJzWzBdLFxuICAgICAgICAgICAgbGVuZ3RoOiBjaGFycy5sZW5ndGgsXG4gICAgICAgICAgICB4OiBzZWdtZW50cy5zbGljZSgwLCBpKS5qb2luKGBgKS5sZW5ndGgsXG4gICAgICAgICAgfSkpXG4gICAgICAgICAgLmZpbHRlcigoeyBjaGFyIH0pID0+IGNoYXIgIT09IGAgYClcbiAgICAgICAgICAubWFwKCh7IGNoYXIsIGxlbmd0aCwgeCB9LCBpKSA9PiAoe1xuICAgICAgICAgICAgY2hhcixcbiAgICAgICAgICAgIHgxOiB4LFxuICAgICAgICAgICAgeDI6IHggKyBsZW5ndGggLSAxLFxuICAgICAgICAgICAgaWQ6IHR1cGxlKHgsIHkpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgfSkpLFxuICAgICAgKSxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZWdtZW50aXplXG4iLCJjb25zdCBuZXh0aXplID0gc2VnbWVudGVkID0+XG4gIHNlZ21lbnRlZC5tYXAoKHNlZ21lbnRzLCB5LCBsaW5lcykgPT5cbiAgICBzZWdtZW50cy5tYXAoc2VnbWVudCA9PiAoe1xuICAgICAgLi4uc2VnbWVudCxcbiAgICAgIG5leHQ6XG4gICAgICAgIGxpbmVzW3kgKyAxXSAmJlxuICAgICAgICBsaW5lc1t5ICsgMV0uZmluZChcbiAgICAgICAgICAoeyBjaGFyLCB4MSwgeDIgfSkgPT5cbiAgICAgICAgICAgIGNoYXIgPT09IHNlZ21lbnQuY2hhciAmJlxuICAgICAgICAgICAgc2VnbWVudC54MSA8PSB4MiAmJlxuICAgICAgICAgICAgeDEgPD0gc2VnbWVudC54MixcbiAgICAgICAgKSxcbiAgICB9KSksXG4gIClcblxuZXhwb3J0IGRlZmF1bHQgbmV4dGl6ZVxuIiwiaW1wb3J0IHsgQ2lyY3VsYXRvciB9IGZyb20gXCJjaXJjdWxhdG9yXCJcblxuLy8gc29sYXJpemVkXG4vLyBjb25zdCBjb2xvcnMgPSBbXG4vLyAgIGAjMDAyYjM2YCxcbi8vICAgYCMwNzM2NDJgLFxuLy8gICBgIzU4NmU3NWAsXG4vLyAgIGAjNjU3YjgzYCxcbi8vICAgYCM4Mzk0OTZgLFxuLy8gICBgIzkzYTFhMWAsXG4vLyAgIGAjZWVlOGQ1YCxcbi8vICAgYCNmZGY2ZTNgLFxuLy8gICBgI2I1ODkwMGAsXG4vLyAgIGAjY2I0YjE2YCxcbi8vICAgYCNkYzMyMmZgLFxuLy8gICBgI2QzMzY4MmAsXG4vLyAgIGAjNmM3MWM0YCxcbi8vICAgYCMyNjhiZDJgLFxuLy8gICBgIzJhYTE5OGAsXG4vLyAgIGAjODU5OTAwYCxcbi8vIF1cbi8vIGNvbnN0IGNvbG9ycyA9IFtgIzU2Qjk0OWAsIGAjMzA0OTlCYCwgYCNFRTQwMzVgLCBgI0YwQTMyRmBdXG5jb25zdCBjb2xvcnMgPSBbYCMwMDQ3NzdgLCBgI2EzMDAwMGAsIGAjZmY3NzAwYCwgYCNlZmQyOGRgLCBgIzAwYWZiNWBdXG4vLyBjb25zdCBjb2xvcnMgPSBbYCM0MmZmZGZgLCBgIzJiOGRmZmAsIGAjZmY0ODc0YCwgYCMxNjQxODdgLCBgI2ZmOWM4NGBdXG5cbi8vIGh0dHA6Ly9jb2xvcmJyZXdlcjIub3JnLz90eXBlPXF1YWxpdGF0aXZlJnNjaGVtZT1QYWlyZWQmbj0xMlxuLy8gY29uc3QgY29sb3JzID0gW1xuLy8gICBgI2E2Y2VlM2AsXG4vLyAgIGAjMWY3OGI0YCxcbi8vICAgYCNiMmRmOGFgLFxuLy8gICBgIzMzYTAyY2AsXG4vLyAgIGAjZmI5YTk5YCxcbi8vICAgYCNlMzFhMWNgLFxuLy8gICBgI2ZkYmY2ZmAsXG4vLyAgIGAjZmY3ZjAwYCxcbi8vICAgYCNjYWIyZDZgLFxuLy8gICBgIzZhM2Q5YWAsXG4vLyAgIGAjZmZmZjk5YCxcbi8vICAgYCNiMTU5MjhgLFxuLy8gXVxuXG5leHBvcnQgY29uc3Qgbm9ybWFsUGFsZXR0ZSA9IG5ldyBDaXJjdWxhdG9yKGNvbG9ycylcbmV4cG9ydCBjb25zdCBtaXJyb3JQYWxldHRlID0gbmV3IENpcmN1bGF0b3IoY29sb3JzKVxuY29uc3Qgc3RlcCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXG5ub3JtYWxQYWxldHRlLnN0ZXAoc3RlcClcbm1pcnJvclBhbGV0dGUuc3RlcChzdGVwKVxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCwgbm8tY29uc29sZSAqL1xuXG5leHBvcnQgY29uc3QgZ2V0Qm94U2l6ZSA9ICgpID0+IHtcbiAgY29uc3QgbmFtZSA9IGAtLWJveGBcbiAgY29uc3QgcmF3ID0gd2luZG93XG4gICAgLmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSlcbiAgICAuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KHJhdywgMTApXG4gIGNvbnN0IHJlc3VsdCA9IE1hdGgucm91bmQoXG4gICAgcmF3LmVuZHNXaXRoKGB2d2ApID8gd2luZG93LmlubmVyV2lkdGggKiAwLjAxICogdmFsdWUgOiB2YWx1ZSxcbiAgKVxuICBpZiAodmFsdWUgIT09IHJlc3VsdCkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBgJHtyZXN1bHR9cHhgKVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGNvbnN0IGxvZyA9IFN5bWJvbChgbG9nYClcbmV4cG9ydCBjb25zdCBsb2dHcm91cCA9IFN5bWJvbChgbG9nIGdyb3VwYClcblxuT2JqZWN0LmFzc2lnbihPYmplY3QucHJvdG90eXBlLCB7XG4gIFtsb2ddKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLCAuLi5hcmdzKVxuICAgIHJldHVybiB0aGlzXG4gIH0sXG4gIFtsb2dHcm91cF0obGFiZWwsIGNvbGxhcHNlZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zb2xlW2NvbGxhcHNlZCA/IGBncm91cENvbGxhcHNlZGAgOiBgZ3JvdXBgXShsYWJlbClcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMoLi4uYXJncylcbiAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgfSxcbn0pXG5cbmV4cG9ydCBjb25zdCBwbGF5ID0gU3ltYm9sKGBwbGF5YClcbmV4cG9ydCBjb25zdCBvZiA9IFN5bWJvbChgb2ZgKVxuXG5PYmplY3QuYXNzaWduKEFuaW1hdGlvbi5wcm90b3R5cGUsIHtcbiAgW3BsYXldKCkge1xuICAgIHRoaXMucGxheSgpXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoZWRcbiAgfSxcbn0pXG5cbkFuaW1hdGlvbltvZl0gPSBlZmZlY3QgPT4ge1xuICBjb25zdCBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKGVmZmVjdCwgZG9jdW1lbnQudGltZWxpbmUpXG4gIGFuaW1hdGlvbi5wYXVzZSgpXG4gIHJldHVybiBhbmltYXRpb25cbn1cblxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbSA9IChfbWluLCBfbWF4LCByYW5kb20pID0+IHtcbiAgY29uc3QgbWluID0gTWF0aC5jZWlsKF9taW4pXG4gIGNvbnN0IG1heCA9IE1hdGguZmxvb3IoX21heClcbiAgcmV0dXJuIE1hdGguZmxvb3IocmFuZG9tICogKG1heCAtIG1pbiArIDEpKSArIG1pblxufVxuIiwiaW1wb3J0IHNoYXBlIGZyb20gXCIuL3NoYXBlXCJcbmltcG9ydCBzZWdtZW50aXplIGZyb20gXCIuL3NlZ21lbnRpemVcIlxuaW1wb3J0IG5leHRpemUgZnJvbSBcIi4vbmV4dGl6ZVwiXG5pbXBvcnQgeyBtaXJyb3JQYWxldHRlLCBub3JtYWxQYWxldHRlIH0gZnJvbSBcIi4uL2RhdGEvcGFsZXR0ZVwiXG5pbXBvcnQgeyBnZXRSYW5kb20gfSBmcm9tIFwiLi4vdXRpbFwiXG5cbmNvbnN0IGlzU2VtaSA9IHhzID0+XG4gIG5ldyBTZXQoeHMubWFwKHggPT4gSlNPTi5zdHJpbmdpZnkoeCkpKS5zaXplID09PSAxXG5cbmNvbnN0IGlzRnVsbCA9IHhzID0+IHhzWzBdLmxlbmd0aCA9PT0geHMubGVuZ3RoXG5cbmNvbnN0IHBhcnNlID0gKHRleHQsIG1pcnJvciA9IGZhbHNlLCBzZWVkcykgPT4ge1xuICBjb25zdCB7IHNlZ21lbnRpemVkLCB3aWR0aCwgaGVpZ2h0IH0gPSBzZWdtZW50aXplKHRleHQpXG4gIGNvbnN0IG5leHRpemVkID0gbmV4dGl6ZShzZWdtZW50aXplZClcbiAgY29uc3QgbmV4dHMgPSBuZXh0aXplZC5tYXAocm93ID0+XG4gICAgcm93XG4gICAgICAubWFwKCh7IG5leHQgfSkgPT4gbmV4dClcbiAgICAgIC5maWx0ZXIoeSA9PiB5KVxuICAgICAgLm1hcCgoeyBpZCB9KSA9PiBpZCksXG4gIClcblxuICBjb25zdCByb290cyA9IG5leHRpemVkLm1hcChzZWdtZW50cyA9PlxuICAgIHNlZ21lbnRzLmZpbHRlcigoeyBpZCB9KSA9PiAhbmV4dHMuc29tZShyb3cgPT4gcm93LmluY2x1ZGVzKGlkKSkpLFxuICApXG4gIGNvbnN0IGdldE5leHQgPSAoY3VyciwgYWNjID0gW10pID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhY2MuY29uY2F0KGN1cnIpXG4gICAgaWYgKCFjdXJyLm5leHQpIHtcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgcmV0dXJuIGdldE5leHQobmV4dGl6ZWRbY3Vyci5uZXh0LnldW2N1cnIubmV4dC5pXSwgcmVzdWx0KVxuICB9XG4gIGNvbnN0IHBhbGV0dGUgPSBtaXJyb3IgPyBtaXJyb3JQYWxldHRlIDogbm9ybWFsUGFsZXR0ZVxuICBjb25zdCBncm91cHMgPSByb290cy5tYXAocm93ID0+IHJvdy5tYXAocm9vdCA9PiBnZXROZXh0KHJvb3QpKSlcbiAgY29uc3QgYm94ZXMgPSBncm91cHMubWFwKHJvdyA9PlxuICAgIHJvd1xuICAgICAgLm1hcChncm91cCA9PiAoe1xuICAgICAgICAuLi5ncm91cC5yZWR1Y2UoKHAsIGMpID0+ICh7XG4gICAgICAgICAgeDE6IE1hdGgubWluKHAueDEsIGMueDEpLFxuICAgICAgICAgIHgyOiBNYXRoLm1heChwLngyLCBjLngyKSxcbiAgICAgICAgfSkpLFxuICAgICAgICB5MTogZ3JvdXBbMF0ueSxcbiAgICAgICAgeTI6IGdyb3VwW2dyb3VwLmxlbmd0aCAtIDFdLnksXG4gICAgICAgIGdyb3VwLFxuICAgICAgfSkpXG4gICAgICAubWFwKCh7IHgxLCB4MiwgeTEsIHkyLCBncm91cCB9KSA9PiAoe1xuICAgICAgICB4OiB4MSxcbiAgICAgICAgeTogeTEsXG4gICAgICAgIHdpZHRoOiB4MiAtIHgxICsgMSxcbiAgICAgICAgaGVpZ2h0OiB5MiAtIHkxICsgMSxcbiAgICAgICAgY29sb3I6IHBhbGV0dGUubmV4dCgpLFxuICAgICAgICBncm91cDogZ3JvdXAubWFwKHNlZ21lbnQgPT4gKHtcbiAgICAgICAgICB4MTogc2VnbWVudC54MSAtIHgxLFxuICAgICAgICAgIHgyOiBzZWdtZW50LngyIC0geDEsXG4gICAgICAgIH0pKSxcbiAgICAgIH0pKVxuICAgICAgLm1hcChib3ggPT4gKHtcbiAgICAgICAgLi4uYm94LFxuICAgICAgICBzaGFwZTogc2hhcGUoYm94KSxcbiAgICAgIH0pKVxuICAgICAgLm1hcChib3ggPT4ge1xuICAgICAgICBjb25zdCBzZW1pID0gaXNTZW1pKGJveC5zaGFwZSlcbiAgICAgICAgY29uc3QgZnVsbCA9IHNlbWkgJiYgaXNGdWxsKGJveC5zaGFwZSlcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5ib3gsXG4gICAgICAgICAgdHVybnM6IGdldFJhbmRvbShcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICArZnVsbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICA6ICtzZW1pXG4gICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgOiAzLFxuICAgICAgICAgICAgc2VlZHMubmV4dCgpLFxuICAgICAgICAgICksXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICApXG4gIGNvbnN0IG1pcnJvckJveGVzID0gbWlycm9yXG4gICAgPyBib3hlc1xuICAgICAgICAubWFwKHJvdyA9PlxuICAgICAgICAgIHJvd1xuICAgICAgICAgICAgLm1hcChib3ggPT4gKHtcbiAgICAgICAgICAgICAgLi4uYm94LFxuICAgICAgICAgICAgICBzaGFwZTogYm94LnNoYXBlLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgeTogaGVpZ2h0IC0gYm94LnkgLSBib3guaGVpZ2h0LFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAucmV2ZXJzZSgpLFxuICAgICAgICApXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICA6IG51bGxcblxuICByZXR1cm4ge1xuICAgIGJveGVzOiAobWlycm9yQm94ZXMgfHwgYm94ZXMpLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gXCJlbW90aW9uXCJcbmltcG9ydCB7IGh0bWwgfSBmcm9tIFwibGl0LWh0bWxcIlxuaW1wb3J0IHsgQ2lyY3VsYXRvciB9IGZyb20gXCJjaXJjdWxhdG9yXCJcbmltcG9ydCBMZXR0ZXIgZnJvbSBcIi4vTGV0dGVyXCJcbmltcG9ydCBwYXJzZSBmcm9tIFwiLi4vcGFyc2UvcGFyc2VcIlxuaW1wb3J0IHsgZ2V0Qm94U2l6ZSB9IGZyb20gXCIuLi91dGlsXCJcblxuY29uc3QgcmFuZG9tcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDIwIH0sICgpID0+IE1hdGgucmFuZG9tKCkpXG5jb25zdCBzZWVkcyA9ICgpID0+IG5ldyBDaXJjdWxhdG9yKHJhbmRvbXMpXG5cbmNvbnN0IFdvcmQgPSBzb3VyY2UgPT4gKHRleHQsIG1pcnJvciA9IGZhbHNlKSA9PiB7XG4gIGNvbnN0IGJveFNpemUgPSBnZXRCb3hTaXplKClcbiAgY29uc3QgbGV0dGVycyA9IFsuLi50ZXh0XS5tYXAoXG4gICAgY2hhciA9PlxuICAgICAgY2hhciA9PT0gYCBgXG4gICAgICAgID8ge1xuICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICBodG1sOiBodG1sYDxkaXYgY2xhc3M9XCIke2Nzc2BcbiAgICAgICAgICAgICAgd2lkdGg6ICR7Ym94U2l6ZSAqIDJ9cHg7XG4gICAgICAgICAgICBgfVwiPjwvZGl2PmAsXG4gICAgICAgICAgfVxuICAgICAgICA6IExldHRlcihwYXJzZShzb3VyY2VbY2hhcl0sIG1pcnJvciwgc2VlZHMoKSksIG1pcnJvciksXG4gIClcbiAgY29uc3Qgd2lkdGggPSBsZXR0ZXJzXG4gICAgLm1hcChsZXR0ZXIgPT4gbGV0dGVyLndpZHRoKVxuICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKVxuICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChcbiAgICAuLi5sZXR0ZXJzLm1hcChsZXR0ZXIgPT4gbGV0dGVyLmhlaWdodCB8fCAwKSxcbiAgKVxuICByZXR1cm4gaHRtbGBcbiAgPGRpdiBjbGFzcz1cIldvcmQgXG4gIFdvcmQtbWlycm9yLSR7bWlycm9yfVxuICAke1xuICAgIG1pcnJvclxuICAgICAgPyBjc3NgXG4gICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgYFxuICAgICAgOiBjc3NgXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICAgICAgICBgXG4gIH1cbiAgJHtjc3NgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogJHt3aWR0aCAqIGJveFNpemUgKyAobGV0dGVycy5sZW5ndGggLSAxKSAqIGJveFNpemV9cHg7XG4gIGB9XCJcbiAgICBkYXRhLXdpZHRoPVwiJHt3aWR0aH1cIlxuICAgIGRhdGEtaGVpZ2h0PVwiJHtoZWlnaHR9XCJcbiAgPlxuICAke2xldHRlcnMubWFwKGxldHRlciA9PiBsZXR0ZXIuaHRtbCl9XG4gIDwvZGl2PmBcbn1cblxuZXhwb3J0IGRlZmF1bHQgV29yZFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJsaXQtaHRtbFwiXG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiXG5cbmV4cG9ydCBjb25zdCBzdmcgPSAoXG4gIGJvcmRlciA9IGAjMDAwMDAwYCxcbiAgYmFja2dyb3VuZCA9IGAjRkZGRkZGYCxcbikgPT4gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjhweFwiIGhlaWdodD1cIjI4cHhcIj4sXG48ZGVmcz4sXG4gIDxmaWx0ZXIgaWQ9XCJmMVwiIHg9XCItNTAlXCIgeT1cIi01MCVcIiB3aWR0aD1cIjIwMCVcIiBoZWlnaHQ9XCIyMDAlXCI+LFxuICAgIDxmZU9mZnNldCByZXN1bHQ9XCJvZmZzZXRPdXRcIiBpbj1cIlNvdXJjZUFscGhhXCIgZHg9XCIwXCIgZHk9XCIxXCIvPixcbiAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwib2Zmc2V0T3V0XCIgc3RkRGV2aWF0aW9uPVwiMVwiLz4sXG4gICAgPGZlQ29tcG9uZW50VHJhbnNmZXIgcmVzdWx0PVwib3BhY2l0eU91dFwiIGluPVwiYmx1ck91dFwiPixcbiAgICAgIDxmZUZ1bmNBIHR5cGU9XCJsaW5lYXJcIiBzbG9wZT1cIjAuM1wiLz4sXG4gICAgPC9mZUNvbXBvbmVudFRyYW5zZmVyPixcbiAgICA8ZmVCbGVuZCBpbj1cIlNvdXJjZUdyYXBoaWNcIiBpbjI9XCJvcGFjaXR5T3V0XCIgbW9kZT1cIm5vcm1hbFwiLz4sXG4gIDwvZmlsdGVyPixcbjwvZGVmcz4sXG48cG9seWdvbiBmaWxsPVwiJHtib3JkZXJ9XCIgcG9pbnRzPVwiNCwxOC41IDQsMi41IDE1LjUsMTQgMTEsMTQgMTMsMTkgOS41LDIwLjUgNy4yNSwxNS4yNVwiIGZpbHRlcj1cInVybCgjZjEpXCIvPixcbjxwb2x5Z29uIGZpbGw9XCIke2JhY2tncm91bmR9XCIgcG9pbnRzPVwiNSwxNiA3LjUsMTMuNSAxMCwxOS4xMjUgMTEuNjI1LDE4LjUgOS41LDEzIDEzLDEzIDUsNVwiLz4sXG48L3N2Zz5gXG5cbmV4cG9ydCBjb25zdCBjdXJzb3IgPSAoLi4uYXJncykgPT5cbiAgYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKHN2ZyguLi5hcmdzKSl9YFxuXG5leHBvcnQgY29uc3QgTW91c2UgPSBpZCA9PlxuICBodG1sYDxpbWcgaWQ9XCJNb3VzZS0ke2lkfVwiIGNsYXNzPVwiTW91c2UgJHtjc3NgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRyYW5zZm9ybTogc2NhbGVZKC0xKTtcbiAgICBsZWZ0OiAtMTAwJTtcbiAgYH1cIiBzcmM9XCIke2N1cnNvcigpfVwiPmBcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gXCJlbW90aW9uXCJcbmltcG9ydCB7IGh0bWwgfSBmcm9tIFwibGl0LWh0bWxcIlxuaW1wb3J0IFdvcmQgZnJvbSBcIi4vV29yZFwiXG5pbXBvcnQgYWxwaGFiZXQgZnJvbSBcIi4uL2RhdGEvYWxwaGFiZXRcIlxuaW1wb3J0IHNoYXBlcyBmcm9tIFwiLi4vZGF0YS9zaGFwZXNcIlxuaW1wb3J0IHsgTW91c2UgfSBmcm9tIFwiLi9Nb3VzZVwiXG5cbmNvbnN0IEFscGhhYmV0V29yZCA9IFdvcmQoT2JqZWN0LmFzc2lnbihhbHBoYWJldCwgc2hhcGVzKSlcblxuY29uc3Qgb3ZlcmxheVN0eWxlID0gY3NzYFxuICBvdmVyZmxvdzogaGlkZGVuO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmBcblxubGV0IGNvdW50ID0gMFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG5jb25zdCBNaXJyb3JXb3JkID0gKHRleHQsIGlkID0gY291bnQrKykgPT4gaHRtbGBcbjxkaXYgY2xhc3M9XCJNaXJyb3JXb3JkICR7Y3NzYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMDAlO1xuYH1cIj5cbiAgPGRpdiBjbGFzcz1cIldvcmQtb3ZlcmxheSAke292ZXJsYXlTdHlsZX1cIlxuICBAbW91c2Vtb3ZlPVwiJHsoeyBsYXllclgsIGxheWVyWSB9KSA9PiB7XG4gICAgY29uc3QgbW91c2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjTW91c2UtJHtpZH1gKVxuICAgIG1vdXNlLnN0eWxlLmxlZnQgPSBgJHtsYXllclggLSA1fXB4YFxuICAgIG1vdXNlLnN0eWxlLmJvdHRvbSA9IGAke2xheWVyWSAtIDV9cHhgXG4gIH19XCJcbiAgQG1vdXNlbGVhdmU9XCIkeygpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjTW91c2UtJHtpZH1gKS5zdHlsZS5kaXNwbGF5ID0gYG5vbmVgXG4gIH19XCJcbiAgQG1vdXNlZW50ZXI9XCIkeygpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjTW91c2UtJHtpZH1gKS5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYFxuICB9fVwiXG4gID4ke0FscGhhYmV0V29yZCh0ZXh0KX08L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIldvcmQtb3ZlcmxheS1taXJyb3IgJHtjc3NgXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBgfSAke292ZXJsYXlTdHlsZX1cIj5cbiAgICAke0FscGhhYmV0V29yZCh0ZXh0LCB0cnVlKX1cbiAgICAke01vdXNlKGlkKX1cbiAgPC9kaXY+XG48L2Rpdj5cbmBcblxuZXhwb3J0IGRlZmF1bHQgTWlycm9yV29yZFxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBhOiBgXG4gYXpcbmFhenpcbmEgIHpcbmQgIGNcbmRkY2NcbmQgIGNcbmAsXG4gIGI6IGBcbmJicXFcbmIgIHFcbmJvb3FcbnJvb3ZcbnIgIHZcbnJydnZcbmAsXG4gIGM6IGBcbmNjY1xueCBjXG54XG54XG54IHFcbnFxcVxuYCxcbiAgZDogYFxuZGRjY1xuZGQgY1xucXEgY1xucWEgclxucWEgclxuYWFyclxuYCxcbiAgZTogYFxuZWVlXG5lXG5jY1xuY2NcbmVcbmVlZVxuYCxcbiAgZjogYFxuY3JyclxuYyAgclxuY2NcbmRkXG5kXG5kXG5gLFxuICBnOiBgXG5pb29vXG5pICBvXG5pXG5pIGRkXG5jICBkXG5jY2NkXG5gLFxuICBoOiBgXG5sICBoXG5sICBoXG5sbGhoXG5zc2NjXG5zICBjXG5zICBjXG5gLFxuICBpOiBgXG5wcFxucHBcbmRjXG5kY1xuZGNcbmRjXG5gLFxuICBqOiBgXG4gb29vXG4gICBvXG4gICBwXG4gICBwXG5jICBwXG5jY2NwXG5gLFxuICBrOiBgXG50ICBjXG50IGNjXG50dGNcbnNzZFxucyBkZFxucyAgZFxuYCxcbiAgbDogYFxudG9cbnRvXG50b1xudG9cbmF0dHRcbmFhYXRcbmAsXG4gIG06IGBcbnMgIHJcbnNzcnJcbmNzcmNcbmMgIGNcbmMgIGNcbmMgIGNcbmAsXG4gIG46IGBcbm8gIHJcbm9vIHJcbnhvIHJcbnggcHJcbnggcHBcbnggIHBcbmAsXG4gIG86IGBcbm9va2tcbm8gIGtcbm8gIGtcbnMgIHRcbnMgIHRcbnNzdHRcbmAsXG4gIHA6IGBcbnBwcHJcbnAgIHJcbm8gcnJcbm9cbm9cbm9cbmAsXG4gIHE6IGBcbmRkZHNcbmQgIHNcbnMgIHNcbnMgIHNcbnMgY2NcbnMgY2NcbmAsXG4gIHI6IGBcbmRkZHNcbmQgIHNcbnMgIHNcbnMgY3NcbnMgY2NcbnMgIGNcbmAsXG4gIHM6IGBcbmFiYmJcbmFhIGJcbiBhXG4gIGRcbmEgZGRcbmFhYWRcbmAsXG4gIHQ6IGBcbnNzY2NcbnNzY2NcbiBmb1xuIGZvXG4gZm9cbiBmb1xuYCxcbiAgdTogYFxucSAgcVxucSAgcVxucSAgcVxucSAgcVxucHBwcFxuc3Nzc1xuYCxcbiAgdjogYFxuYyAgY1xuYyAgY1xuYyAgY1xuYyAgY1xuIHh4XG4geHhcbiAgYCxcbiAgdzogYFxuYyAgYyAgY1xuYyAgYyAgY1xuYyAgYyAgY1xuYyAgYyAgY1xuIGFhIGFhXG4gYWEgYWFcbiAgYCxcbiAgejogYFxuenp6c1xueiBzc1xuICBzXG4gYVxuYWEgY1xuYWNjY1xuYCxcbiAgeDogYFxueCAgY1xueHhjY1xuIHhjXG4gcHJcbnBwcnJcbnAgIHJcbmAsXG4gIHk6IGBcbmMgIHJcbmNjcnJcbiBjclxuIG9vXG4gb29cbmAsXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIMSNOiBgXG4gICBvb1xuICAgb29cbnh4eHh5eXl5XG4gIHNzb29cbiAgc3Nvb1xuICBxcXp6XG4gIHFxenpcbiAgdCAgdFxuICB0ICB0XG4gIHR0IHR0XG5gLFxuICDFoTogYFxuICAgY2NjXG4gIGZmY2RkXG4gZmZ6enpkZFxuICAgcXp4XG4gICBxIHhcbiAgIHEgeFxuICAgcSB4XG5gLFxuICDFvjogYFxuYWEgICAgICAgICBvIG9cbiBhYSAgenp6eiBmZGFhXG4gIHh4eCAgICBmZiAgYWFcbiAgIHggICAgICBmenp6elxuICAgZiAgICAgZFxuIGFwZmZ6enp6b2EgXG5hYXBmICAgIGEgYWFcbmEgcCAgICAgYWEgYVxuICBwICAgICAgYVxuYCxcbiAgxLc6IGBcbnJyICAgIFxuIHIgICBra1xuIHJnZ2dra1xuIHBwZ3BwXG4gcCAgIHBcbiBwICAgcFxuYCxcbiAgxKM6IGBcbiB4ICAgcVxueHh4IHFxcVxucHBkZGRwcFxuIHBwZHBwXG4gIGNjY1xuICAgY1xuYCxcbiAgLy8gICDEozogYFxuICAvLyBhICAgICAgZSBwXG4gIC8vIGFmZmZmdWVlcFxuICAvLyBhYXR0Z3V1ZSBwcFxuICAvLyBjdHR0eW91d3d3d1xuICAvLyBjbnl5eW9yXG4gIC8vIGNuICAgb3JcbiAgLy8gY25uICBvcnJcbiAgLy8gYCxcbiAgXCIuXCI6IGBcbnh4XG54eFxuYFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgbG9vcDogMSxcbiAgbWlycm9yOiAxLFxuICBkcm9wOiAxLFxuICBoaWRlOiAxLFxuICBzcGVlZEZhY3RvcjogMixcbiAgaGlkZURlbGF5OiAzMDAwLFxuICAvLyBoaWRlRGVsYXk6IDAsXG4gIHRleHRzOiBbXG4gICAgLy8gYHdgLFxuICAgIC8vIGBhcnRpY2xlc2AsXG4gICAgYHdlbGNvbWUgdG8gbmVsYWJzLmRldmAsXG4gICAgYMSNIMS3IMSjYFxuICAgIC8vIGBhYmNkZWZnaGlqa2AsXG4gICAgLy8gYGxvcmVtIGlwc3VtYCxcbiAgXSxcbiAgb2Zmc2V0QWJzOiAyMDBcbn07XG4iLCJpbXBvcnQgeyBnZXRCb3hTaXplIH0gZnJvbSBcIi4vdXRpbFwiXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuL2NvbmZpZ1wiXG5cbmNvbnN0IGJveFNpemUgPSBnZXRCb3hTaXplKClcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGVMZXR0ZXIgPSAobGV0dGVyLCBtaXJyb3IgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBzaGFwZXMgPSBbLi4ubGV0dGVyLnF1ZXJ5U2VsZWN0b3JBbGwoYC5TaGFwZWApXVxuICBjb25zdCBsZXR0ZXJSZWN0ID0gbGV0dGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIGlmICghbWlycm9yKSB7XG4gICAgc2hhcGVzLnJldmVyc2UoKVxuICB9XG5cbiAgLy8gWFhYIG1ha2UgZHluYW1pY1xuICBjb25zdCB7IG9mZnNldEFicyB9ID0gY29uZmlnXG4gIGNvbnN0IG9mZnNldFRvcCA9IG1pcnJvciA/IG9mZnNldEFicyA6IC1vZmZzZXRBYnNcblxuICBjb25zdCBzaGFwZVN0ZXBzID0gc2hhcGVzLm1hcCgoc2hhcGUsIGkpID0+IHtcbiAgICBjb25zdCBzaGFwZVJlY3QgPSBzaGFwZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHsgc3BlZWRGYWN0b3IgfSA9IGNvbmZpZ1xuICAgIGNvbnN0IHlPZmYgPSArc2hhcGUuZGF0YXNldC55XG4gICAgY29uc3Qgc2hhcGVYID0gK3NoYXBlLmRhdGFzZXQueFxuICAgIGNvbnN0IHNoYXBlWSA9ICtzaGFwZS5kYXRhc2V0LnlcbiAgICBjb25zdCBzaGFwZUhlaWdodCA9ICtzaGFwZS5kYXRhc2V0LmhlaWdodFxuICAgIGNvbnN0IHNoYXBlV2lkdGggPSArc2hhcGUuZGF0YXNldC53aWR0aFxuICAgIGNvbnN0IGxldHRlckhlaWdodCA9IGxldHRlclJlY3QuaGVpZ2h0IC8gYm94U2l6ZVxuICAgIGNvbnN0IHlGYWxsID1cbiAgICAgIGxldHRlckhlaWdodCAtXG4gICAgICAobWlycm9yID8geU9mZiA6IGxldHRlckhlaWdodCAtIHlPZmYgLSBzaGFwZUhlaWdodClcbiAgICBjb25zdCBvZmZzZXRGYWxsID0gb2Zmc2V0QWJzIC8gYm94U2l6ZVxuICAgIGNvbnN0IGZhbGxEaXN0YW5jZSA9IChvZmZzZXRGYWxsICsgeUZhbGwpICogYm94U2l6ZVxuICAgIGNvbnN0IG9mZnNldExlZnQgPSBsZXR0ZXJSZWN0LndpZHRoIC8gMlxuICAgIGNvbnN0IGxlZnRNaWQgPSAoc2hhcGVXaWR0aCAqIGJveFNpemUpIC8gMiArIHNoYXBlWCAqIGJveFNpemVcbiAgICBjb25zdCBzbGlkZURpc3RhbmNlID0gTWF0aC5hYnMob2Zmc2V0TGVmdCAtIGxlZnRNaWQpXG4gICAgY29uc3QgRWZmZWN0ID0gKC4uLmFyZ3MpID0+IG5ldyBLZXlmcmFtZUVmZmVjdChzaGFwZSwgLi4uYXJncylcbiAgICBjb25zdCBpbml0TGVmdE9mZnNldCA9IGxldHRlclJlY3Qud2lkdGggLyAyIC0gc2hhcGVSZWN0LndpZHRoIC8gMlxuICAgIGNvbnN0IGZhZGVJbkVmZmVjdCA9IEVmZmVjdChcbiAgICAgIHtcbiAgICAgICAgb3BhY2l0eTogWzAsIDFdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZHVyYXRpb246IDEwMCAqIHNwZWVkRmFjdG9yLFxuICAgICAgICBmaWxsOiBgYm90aGAsXG4gICAgICAgIGVhc2luZzogYGVhc2UtaW5gLFxuICAgICAgfSxcbiAgICApXG4gICAgY29uc3QgYmFzZVNwZWVkID0gMiAqIHNwZWVkRmFjdG9yXG4gICAgY29uc3QgYWN0aW9uU3BlZWQgPSAwLjU1ICogc3BlZWRGYWN0b3JcbiAgICBjb25zdCB0dXJuU3BlZWQgPSAxMDAgKiBzcGVlZEZhY3RvclxuICAgIGNvbnN0IHR1cm5zID0gK3NoYXBlLmRhdGFzZXQudHVybnNcbiAgICBjb25zdCB0dXJuRGlyID0gaSAlIDIgPyAtMSA6IDFcbiAgICBjb25zdCB0dXJuRHVyYXRpb24gPSB0dXJuU3BlZWQgKiB0dXJuc1xuICAgIGNvbnN0IG1pcnJvckRpciA9IG1pcnJvciA/IC0xIDogMVxuXG4gICAgY29uc3Qgcm90YXRlRWZmZWN0ID0gRWZmZWN0KFxuICAgICAgW1xuICAgICAgICB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7dHVybnMgKiA5MCAqIHR1cm5EaXIgKiBtaXJyb3JEaXJ9ZGVnKWAsXG4gICAgICAgIH0sXG4gICAgICAgIHsgdHJhbnNmb3JtOiBgcm90YXRlKDApYCB9LFxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgZHVyYXRpb246IHR1cm5EdXJhdGlvbixcbiAgICAgICAgZmlsbDogYGJvdGhgLFxuICAgICAgICBjb21wb3NpdGU6IGBhZGRgLFxuICAgICAgICBlYXNpbmc6IGBlYXNlLWluLW91dGAsXG4gICAgICAgIGRlbGF5OiAzMCxcbiAgICAgIH0sXG4gICAgKVxuICAgIGNvbnN0IHNsaWRlRWZmZWN0ID0gRWZmZWN0KFxuICAgICAge1xuICAgICAgICBsZWZ0OiBbYCR7aW5pdExlZnRPZmZzZXR9cHhgLCBgJHtzaGFwZVggKiBib3hTaXplfXB4YF0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkdXJhdGlvbjogc2xpZGVEaXN0YW5jZSAqIGJhc2VTcGVlZCxcbiAgICAgICAgZmlsbDogYGJvdGhgLFxuICAgICAgICBlYXNpbmc6IGBlYXNlLWluLW91dGAsXG4gICAgICB9LFxuICAgIClcbiAgICBjb25zdCBwcmVEcm9wRGlzdGFuY2VBYnMgPSBNYXRoLm1heChcbiAgICAgIHNsaWRlRGlzdGFuY2UsXG4gICAgICB0dXJuRHVyYXRpb24gLyBiYXNlU3BlZWQsXG4gICAgKVxuICAgIGNvbnN0IHByZURyb3BEaXN0YW5jZSA9IHByZURyb3BEaXN0YW5jZUFicyAqIG1pcnJvckRpclxuICAgIGNvbnN0IHByZURyb3BEdXJhdGlvbiA9IE1hdGgubWF4KFxuICAgICAgcHJlRHJvcERpc3RhbmNlQWJzICogYmFzZVNwZWVkLFxuICAgICAgdHVybkR1cmF0aW9uLFxuICAgIClcbiAgICBjb25zdCBwcmVEcm9wRWZmZWN0ID0gRWZmZWN0KFxuICAgICAge1xuICAgICAgICB0b3A6IFtgJHtvZmZzZXRUb3B9cHhgLCBgJHtvZmZzZXRUb3AgKyBwcmVEcm9wRGlzdGFuY2V9cHhgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiBwcmVEcm9wRHVyYXRpb24sXG4gICAgICAgIGZpbGw6IGBib3RoYCxcbiAgICAgIH0sXG4gICAgKVxuICAgIGNvbnN0IGZhbGxEdXJhdGlvbiA9XG4gICAgICBmYWxsRGlzdGFuY2UgKiBhY3Rpb25TcGVlZCAtIHByZURyb3BEaXN0YW5jZUFicyAqIGFjdGlvblNwZWVkXG4gICAgY29uc3QgZHJvcEVmZmVjdCA9IEVmZmVjdChcbiAgICAgIHtcbiAgICAgICAgdG9wOiBbXG4gICAgICAgICAgYCR7b2Zmc2V0VG9wICsgcHJlRHJvcERpc3RhbmNlfXB4YCxcbiAgICAgICAgICBgJHtzaGFwZVkgKiBib3hTaXplfXB4YCxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiBmYWxsRHVyYXRpb24sXG4gICAgICAgIGZpbGw6IGBmb3J3YXJkc2AsXG4gICAgICAgIGVhc2luZzogYGVhc2UtaW5gLFxuICAgICAgICBlbmREZWxheTogaSArIDEgPT09IHNoYXBlcy5sZW5ndGggPyBjb25maWcuaGlkZURlbGF5IDogMCxcbiAgICAgIH0sXG4gICAgKVxuXG4gICAgY29uc3QgZHJvcFN0ZXBzID0gbmV3IFNlcXVlbmNlRWZmZWN0KFtcbiAgICAgIGZhZGVJbkVmZmVjdCxcbiAgICAgIG5ldyBHcm91cEVmZmVjdChbXG4gICAgICAgIHNsaWRlRWZmZWN0LCAvL1xuICAgICAgICBwcmVEcm9wRWZmZWN0LFxuICAgICAgICByb3RhdGVFZmZlY3QsXG4gICAgICBdKSxcbiAgICAgIGRyb3BFZmZlY3QsXG4gICAgXSlcblxuICAgIHJldHVybiBkcm9wU3RlcHNcbiAgfSlcbiAgcmV0dXJuIG5ldyBTZXF1ZW5jZUVmZmVjdChzaGFwZVN0ZXBzKVxufVxuXG5jb25zdCBvMCA9IHtcbiAgb3BhY2l0eTogMCxcbn1cbmNvbnN0IG8xID0ge1xuICBvcGFjaXR5OiAxLFxufVxuY29uc3QgYmxpbmtJbiA9IGVsID0+XG4gIG5ldyBLZXlmcmFtZUVmZmVjdChlbCwgW28wLCBvMSwgbzAsIG8xXSwge1xuICAgIGR1cmF0aW9uOiAyNTAsXG4gIH0pXG5cbmV4cG9ydCBjb25zdCBoaWRlTGV0dGVyID0gKGxldHRlciwgbWlycm9yKSA9PiB7XG4gIGNvbnN0IGNvdmVyID0gbGV0dGVyLnF1ZXJ5U2VsZWN0b3IoYC5Db3ZlcmApXG4gIGNvbnN0IGNvbnRhaW5lciA9IGxldHRlci5xdWVyeVNlbGVjdG9yKGAuTGV0dGVyLWNvbnRhaW5lcmApXG4gIGNvbnN0IGxpbmVzID0gK2xldHRlci5kYXRhc2V0LmhlaWdodFxuICBjb25zdCBtaXJyb3JEaXIgPSBtaXJyb3IgPyAtMSA6IDFcbiAgY29uc3Qgc3RlcHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBsaW5lcyB9LCAoXywgbikgPT4ge1xuICAgIGNvbnN0IHRvcCA9IGAkeyhuICsgMSkgKiBib3hTaXplICogbWlycm9yRGlyfXB4YFxuICAgIGNvbnN0IGxvd2VyID0gbmV3IEtleWZyYW1lRWZmZWN0KFxuICAgICAgY29udGFpbmVyLFxuICAgICAgW1xuICAgICAgICB7XG4gICAgICAgICAgdG9wOiBgJHtuICogYm94U2l6ZSAqIG1pcnJvckRpcn1weGAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0b3AsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IGBlYXNlLWluYCxcbiAgICAgICAgZmlsbDogYGZvcndhcmRzYCxcbiAgICAgIH0sXG4gICAgKVxuICAgIHJldHVybiBuZXcgU2VxdWVuY2VFZmZlY3QoW2JsaW5rSW4oY292ZXIpLCBsb3dlcl0pXG4gIH0pXG4gIHJldHVybiBuZXcgU2VxdWVuY2VFZmZlY3Qoc3RlcHMpXG59XG4iLCJpbXBvcnQgeyBDeWNsZSB9IGZyb20gXCJjaXJjdWxhdG9yXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0IHsgaHRtbCwgcmVuZGVyIH0gZnJvbSBcImxpdC1odG1sXCI7XG5pbXBvcnQgXCIuLi9zdGF0aWMvbWFpbi5jc3NcIjtcbmltcG9ydCBNaXJyb3JXb3JkIGZyb20gXCIuL2NvbXBvbmVudHMvTWlycm9yV29yZFwiO1xuaW1wb3J0IHsgYW5pbWF0ZUxldHRlciwgaGlkZUxldHRlciB9IGZyb20gXCIuL2FuaW1hdGVcIjtcbmltcG9ydCB7IGN1cnNvciB9IGZyb20gXCIuL2NvbXBvbmVudHMvTW91c2VcIjtcbmltcG9ydCBjb25maWcgZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBwbGF5LCBvZiB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCBcIi4vc2Nyb2xsXCI7XG5cbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjQW5pbWF0aW9uLXJvb3RgKTtcblxuY29uc3Qgc2V0dXBBbmltYXRpb24gPSAoKSA9PiB7XG4gIHJlbmRlcihcbiAgICBodG1sYFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzcz1cIkFuaW1hdGlvbiAke2Nzc2BcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIGB9XCJcbiAgICAgID5cbiAgICAgICAgJHtjb25maWcudGV4dHMubWFwKE1pcnJvcldvcmQpfVxuICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICByb290XG4gICk7XG5cbiAgY29uc3Qgc2V0dXBXb3JkID0gd29yZCA9PiB7XG4gICAgY29uc3QgbGV0dGVycyA9IFsuLi53b3JkLnF1ZXJ5U2VsZWN0b3JBbGwoYC5Xb3JkLW1pcnJvci1mYWxzZSAuTGV0dGVyYCldO1xuICAgIGNvbnN0IG1pcnJvcnMgPSBbLi4ud29yZC5xdWVyeVNlbGVjdG9yQWxsKGAuV29yZC1taXJyb3ItdHJ1ZSAuTGV0dGVyYCldO1xuXG4gICAgY29uc3QgYW5pbWF0aW9uID0gQW5pbWF0aW9uW29mXShcbiAgICAgIG5ldyBHcm91cEVmZmVjdChcbiAgICAgICAgbGV0dGVyc1xuICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICBsZXR0ZXIgPT5cbiAgICAgICAgICAgICAgbmV3IFNlcXVlbmNlRWZmZWN0KFxuICAgICAgICAgICAgICAgIFtdLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgIGNvbmZpZy5kcm9wID8gYW5pbWF0ZUxldHRlcihsZXR0ZXIpIDogW10sXG4gICAgICAgICAgICAgICAgICBjb25maWcuaGlkZSA/IGhpZGVMZXR0ZXIobGV0dGVyKSA6IFtdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICBjb25maWcubWlycm9yXG4gICAgICAgICAgICAgID8gbWlycm9ycy5tYXAoXG4gICAgICAgICAgICAgICAgICBsZXR0ZXIgPT5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFNlcXVlbmNlRWZmZWN0KFxuICAgICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5kcm9wID8gYW5pbWF0ZUxldHRlcihsZXR0ZXIsIHRydWUpIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuaGlkZSA/IGhpZGVMZXR0ZXIobGV0dGVyLCB0cnVlKSA6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IFtdXG4gICAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd29yZCxcbiAgICAgIGxldHRlcnMsXG4gICAgICBhbmltYXRpb25cbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IHdvcmRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC5NaXJyb3JXb3JkYCldO1xuICBjb25zdCBjaXJjdWxhcldvcmRzID0gQ3ljbGUod29yZHMubWFwKHNldHVwV29yZCkpO1xuXG4gIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgd29yZC5zdHlsZS5kaXNwbGF5ID0gYG5vbmVgO1xuICAgIHdvcmQuc3R5bGUucG9zaXRpb24gPSBgcmVsYXRpdmVgO1xuICB9KTtcblxuICB2b2lkIChhc3luYyAoKSA9PiB7XG4gICAgZm9yIChjb25zdCB7IGFuaW1hdGlvbiwgd29yZCB9IG9mIGNpcmN1bGFyV29yZHMpIHtcbiAgICAgIHdvcmQuc3R5bGUuZGlzcGxheSA9IGBibG9ja2A7XG4gICAgICB3aW5kb3cucGxheWluZyA9IGFuaW1hdGlvbjtcbiAgICAgIGF3YWl0IGFuaW1hdGlvbltwbGF5XSgpO1xuICAgICAgd2luZG93LnBsYXlpbmcgPSBudWxsO1xuICAgICAgd29yZC5zdHlsZS5kaXNwbGF5ID0gYG5vbmVgO1xuICAgICAgaWYgKCFjb25maWcubG9vcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG59O1xuXG5zZXR1cEFuaW1hdGlvbigpO1xuXG5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChjc3NgXG4gIGN1cnNvcjogdXJsKCR7Y3Vyc29yKCl9KSA1IDUsIGRlZmF1bHQ7XG5gKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=